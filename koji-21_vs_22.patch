diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/kojid /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/kojid
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/kojid	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/kojid	2020-09-07 15:44:50.000000000 +0800
@@ -37,6 +37,7 @@
 import signal
 import smtplib
 import socket
+import subprocess
 import sys
 import time
 import traceback
@@ -69,16 +70,14 @@
 from koji.util import dslice, dslice_ex, isSuccess, parseStatus, to_list
 
 try:
-    import krbV
-    Krb5Error = krbV.Krb5Error
+    import requests_gssapi as reqgssapi
+    Krb5Error = reqgssapi.exceptions.RequestException
 except ImportError:  # pragma: no cover
-    krbV = None
-
-try:
-    import requests_kerberos
-    Krb5Error = requests_kerberos.exceptions.RequestException
-except ImportError:  # pragma: no cover
-    requests_kerberos = None
+    try:
+        import requests_kerberos as reqgssapi
+        Krb5Error = reqgssapi.exceptions.RequestException
+    except ImportError:  # pragma: no cover
+        reqgssapi = None
 
 try:
     import librepo
@@ -290,13 +289,42 @@
             opts['package_manager'] = self.config['extra']['mock.package_manager']
         if 'mock.yum.module_hotfixes' in self.config['extra']:
             opts['module_hotfixes'] = self.config['extra']['mock.yum.module_hotfixes']
+        if 'mock.yum.best' in self.config['extra']:
+            opts['yum_best'] = int(self.config['extra']['mock.yum.best'])
+        # Append opts['plugin_conf'] to enable Mock package signing
+        if 'mock.plugin_conf.sign_enable' in self.config['extra']:
+            # check rest of configuration
+            if ('mock.plugin_conf.sign_opts.cmd' not in self.config['extra'] or
+               'mock.plugin_conf.sign_opts.opts' not in self.config['extra']):
+                raise koji.GenericError("Tag is not configured properly for mock's sign plugin'")
+            opts['plugin_conf'] = {
+                'sign_enable': self.config['extra']['mock.plugin_conf.sign_enable'],
+                'sign_opts': {
+                    'cmd': self.config['extra']['mock.plugin_conf.sign_opts.cmd'],
+                    'opts': self.config['extra']['mock.plugin_conf.sign_opts.opts'],
+                }
+            }
         if self.internal_dev_setup is not None:
             opts['internal_dev_setup'] = bool(self.internal_dev_setup)
         opts['tag_macros'] = {}
+        opts['tag_envvars'] = {}
         for key in self.config['extra']:
             if key.startswith('rpm.macro.'):
                 macro = '%' + key[10:]
                 opts['tag_macros'][macro] = self.config['extra'][key]
+            elif key.startswith('rpm.env.'):
+                opts['tag_envvars'][key[8:]] = self.config['extra'][key]
+        if 'mock.use_bootstrap' in self.config['extra']:
+            opts['use_bootstrap'] = bool(self.config['extra']['mock.use_bootstrap'])
+
+        # it must be allowed in kojid.conf *and* in tag's extra info
+        if (not self.options.mock_bootstrap_image and
+           self.config['extra'].get('mock.bootstrap_image')):
+            self.logger.warning("Mock bootstrap image requested by buildroot %d, "
+                                "but forbidden on builder" % self.id)
+        opts['bootstrap_image'] = self.options.mock_bootstrap_image and \
+            self.config['extra'].get('mock.bootstrap_image')
+
         output = koji.genMockConfig(self.name, self.br_arch, managed=True, **opts)
 
         # write config
@@ -1145,7 +1173,6 @@
         opts = dict([(k, getattr(self.options, k)) for k in ('topurl', 'topdir')])
         opts['tempdir'] = self.workdir
         with koji.openRemoteFile(relpath, **opts) as fo:
-            koji.check_rpm_file(fo)
             h = koji.get_rpm_header(fo)
         if not koji.get_header_field(h, 'sourcepackage'):
             raise koji.BuildError("%s is not a source package" % srpm)
@@ -1677,14 +1704,16 @@
         uploadpath = self.getUploadDir()
 
         self.run_callbacks('preSCMCheckout', scminfo=scm.get_info(),
-                           build_tag=build_tag, scratch=opts.get('scratch'))
+                           build_tag=build_tag, scratch=opts.get('scratch'),
+                           buildroot=buildroot)
         # Check out sources from the SCM
         sourcedir = scm.checkout(scmdir, self.session, uploadpath, logfile)
         self.run_callbacks("postSCMCheckout",
                            scminfo=scm.get_info(),
                            build_tag=build_tag,
                            scratch=opts.get('scratch'),
-                           srcdir=sourcedir)
+                           srcdir=sourcedir,
+                           buildroot=buildroot)
 
         # zip up pristine sources for auditing purposes
         self._zip_dir(sourcedir, os.path.join(outputdir, 'scm-sources.zip'))
@@ -1695,7 +1724,8 @@
             patch_scm = SCM(self.opts.get('patches'))
             patch_scm.assert_allowed(self.options.allowed_scms)
             self.run_callbacks('preSCMCheckout', scminfo=patch_scm.get_info(),
-                               build_tag=build_tag, scratch=opts.get('scratch'))
+                               build_tag=build_tag, scratch=opts.get('scratch'),
+                               buildroot=buildroot)
             # never try to check out a common/ dir when checking out patches
             patch_scm.use_common = False
             patchcheckoutdir = patch_scm.checkout(patchdir, self.session, uploadpath, patchlog)
@@ -1703,7 +1733,8 @@
                                scminfo=patch_scm.get_info(),
                                build_tag=build_tag,
                                scratch=opts.get('scratch'),
-                               srcdir=patchcheckoutdir)
+                               srcdir=patchcheckoutdir,
+                               buildroot=buildroot)
             self._zip_dir(patchcheckoutdir, os.path.join(outputdir, 'patches.zip'))
 
         # Apply patches, if present
@@ -1996,13 +2027,15 @@
         scmdir = buildroot.tmpdir() + '/scmroot'
         koji.ensuredir(scmdir)
         self.run_callbacks('preSCMCheckout', scminfo=scm.get_info(),
-                           build_tag=build_tag, scratch=opts.get('scratch'))
+                           build_tag=build_tag, scratch=opts.get('scratch'),
+                           buildroot=buildroot)
         specdir = scm.checkout(scmdir, self.session, self.getUploadDir(), logfile)
         self.run_callbacks("postSCMCheckout",
                            scminfo=scm.get_info(),
                            build_tag=build_tag,
                            scratch=opts.get('scratch'),
-                           srcdir=specdir)
+                           srcdir=specdir,
+                           buildroot=buildroot)
 
         spec_template = None
         for path, dir, files in os.walk(specdir):
@@ -2036,7 +2069,7 @@
         contents = contents.encode('utf-8')
 
         specfile = spec_template[:-5]
-        with open(specfile, 'w') as specfd:
+        with open(specfile, 'wb') as specfd:
             specfd.write(contents)
 
         # Run spec file sanity checks.  Any failures will throw a BuildError
@@ -2441,10 +2474,6 @@
                                                 dict(name=name, version=version, release=release,
                                                      epoch=0))
 
-    def getRelease(self, name, ver):
-        """return the next available release number for an N-V"""
-        return self.session.getNextRelease(dict(name=name, version=ver))
-
 
 class BuildBaseImageTask(BuildImageTask):
     Methods = ['image']
@@ -2476,15 +2505,14 @@
         bld_info = None
         try:
             release = opts.get('release')
-            if not release:
-                release = self.getRelease(name, version)
             if '-' in version:
                 raise koji.ApplianceError('The Version may not have a hyphen')
-            if '-' in release:
+            if release and '-' in release:
                 raise koji.ApplianceError('The Release may not have a hyphen')
             if not opts.get('scratch'):
                 bld_info = self.initImageBuild(name, version, release,
                                                target_info, opts)
+                release = bld_info['release']
 
             subtasks = {}
             self.logger.debug("Spawning jobs for image arches: %r" % (arches))
@@ -2616,11 +2644,10 @@
         bld_info = None
         try:
             release = opts.get('release')
-            if not release:
-                release = self.getRelease(name, version)
             if not opts.get('scratch'):
                 bld_info = self.initImageBuild(name, version, release,
                                                target_info, opts)
+                release = bld_info['release']
             create_task_id = self.session.host.subtask(method='createAppliance',
                                                        arglist=[name, version, release, arch,
                                                                 target_info, build_tag,
@@ -2704,11 +2731,10 @@
         bld_info = None
         try:
             release = opts.get('release')
-            if not release:
-                release = self.getRelease(name, version)
             if not opts.get('scratch'):
                 bld_info = self.initImageBuild(name, version, release,
                                                target_info, opts)
+                release = bld_info['release']
             create_task_id = self.session.host.subtask(method='createLiveCD',
                                                        arglist=[name, version, release, arch,
                                                                 target_info, build_tag,
@@ -2797,16 +2823,16 @@
         bld_info = None
         try:
             release = opts.get('release')
-            if not release:
-                release = self.getRelease(name, version)
             if not opts.get('scratch'):
                 bld_info = self.initImageBuild(name, version, release,
                                                target_info, opts)
+                release = bld_info['release']
             subtasks = {}
             canfail = []
             for arch in arches:
                 subtasks[arch] = self.subtask('createLiveMedia',
-                                              [name, version, release, arch, target_info,
+                                              [name, version, release,
+                                               arch, target_info,
                                                build_tag, repo_info, ksfile, opts],
                                               label='livemedia %s' % arch, arch=arch)
                 if arch in opts.get('optional_arches', []):
@@ -2965,13 +2991,15 @@
             scm.assert_allowed(self.options.allowed_scms)
             logfile = os.path.join(self.workdir, 'checkout.log')
             self.run_callbacks('preSCMCheckout', scminfo=scm.get_info(),
-                               build_tag=build_tag, scratch=self.opts.get('scratch'))
+                               build_tag=build_tag, scratch=self.opts.get('scratch'),
+                               buildroot=broot)
             scmsrcdir = scm.checkout(scmdir, self.session, self.getUploadDir(), logfile)
             self.run_callbacks("postSCMCheckout",
                                scminfo=scm.get_info(),
                                build_tag=build_tag,
                                scratch=self.opts.get('scratch'),
-                               srcdir=scmsrcdir)
+                               srcdir=scmsrcdir,
+                               buildroot=broot)
             kspath = os.path.join(scmsrcdir, ksfile)
         else:
             kspath = self.localPath("work/%s" % ksfile)
@@ -3067,6 +3095,16 @@
         self.uploadFile(kskoji)
         return broot.path_without_to_within(kskoji)  # absolute path within chroot
 
+    def getBootloaderAppend(self):
+        """
+        Return `bootloader --append`
+        This is passed to livemedia `--extra-boot-args`
+        """
+        try:
+            return self.ks.handler.bootloader.appendLine
+        except AttributeError:
+            return
+
     def getImagePackages(self, cachepath):
         """
         Read RPM header information from the yum cache available in the
@@ -3150,6 +3188,10 @@
         for part in self.ks.handler.partition.partitions:
             if part.mountpoint == '/':
                 return part.disk
+            elif part.fstype == 'btrfs':
+                for s in self.ks.handler.btrfs.btrfsList:
+                    if s.subvol and s.mountpoint == '/':
+                        return part.disk
         raise koji.ApplianceError('kickstart lacks a "/" mountpoint')
 
     def handler(self, name, version, release, arch, target_info,
@@ -3511,6 +3553,7 @@
         kspath = self.fetchKickstart(broot, ksfile, target_info['build_tag_name'])
         self.readKickstart(kspath, opts)
         kskoji = self.prepareKickstart(repo_info, target_info, arch, broot, opts)
+        b_append = self.getBootloaderAppend()
 
         # arbitrary paths in chroot
         livemedia_log = broot.tmpdir(within=True) + '/lmc-logs/livemedia-out.log'
@@ -3548,6 +3591,9 @@
         if arch == 'x86_64':
             cmd.append('--macboot')
 
+        if b_append:
+            cmd.extend(['--extra-boot-args', '\"%s\"' % b_append])
+
         if 'lorax_url' in self.opts:
             templates_dir = self.fetch_lorax_templates_from_scm(broot)
             cmd.extend(['--lorax-templates', templates_dir])
@@ -4454,11 +4500,6 @@
         return self.session.host.initImageBuild(self.id,
                                                 dict(name=name, version=version, release=release,
                                                      epoch=0))
-
-    def getRelease(self, name, ver):
-        """return the next available release number for an N-V"""
-        return self.session.getNextRelease(dict(name=name, version=ver))
-
     # END inefficient base image task method copies
 
     def fetchHubOrSCM(self, filepath, fileurl, build_tag):
@@ -4637,11 +4678,9 @@
         release = opts['release']
 
         # TODO: Another mostly copy-paste
-        if not release:
-            release = self.getRelease(name, version)
         if '-' in version:
             raise koji.ApplianceError('The Version may not have a hyphen')
-        if '-' in release:
+        if release and '-' in release:
             raise koji.ApplianceError('The Release may not have a hyphen')
 
         indirection_template = self.fetchHubOrSCM(opts.get('indirection_template'),
@@ -4932,14 +4971,16 @@
         uploadpath = self.getUploadDir()
 
         self.run_callbacks('preSCMCheckout', scminfo=scm.get_info(),
-                           build_tag=build_tag, scratch=opts.get('scratch'))
+                           build_tag=build_tag, scratch=opts.get('scratch'),
+                           buildroot=broot)
         # Check out spec file, etc. from SCM
         sourcedir = scm.checkout(scmdir, self.session, uploadpath, logfile)
         self.run_callbacks("postSCMCheckout",
                            scminfo=scm.get_info(),
                            build_tag=build_tag,
                            scratch=opts.get('scratch'),
-                           srcdir=sourcedir)
+                           srcdir=sourcedir,
+                           buildroot=broot)
         # chown the sourcedir and everything under it to the mockuser
         # so we can build the srpm as non-root
         uid = pwd.getpwnam(self.options.mockuser)[2]
@@ -4959,8 +5000,26 @@
         if len(spec_files) == 0:
             raise koji.BuildError("No spec file found")
         elif len(spec_files) > 1:
-            raise koji.BuildError("Multiple spec files found: %s" % spec_files)
-        spec_file = spec_files[0]
+            # If there are multiple spec files, check whether one of them
+            # matches the SCM repo name
+            scm_spec_options = (
+                "%s/%s.spec" % (sourcedir, os.path.basename(sourcedir)),
+                "%s/SPECS/%s.spec" % (sourcedir, os.path.basename(sourcedir)),
+            )
+
+            spec_file = None
+            for scm_spec in scm_spec_options:
+                if scm_spec in spec_files:
+                    # We have a match, so use this one.
+                    spec_file = scm_spec
+                    break
+
+            if not spec_file:
+                # We didn't find an exact match, so throw an error
+                raise koji.BuildError("Multiple spec files found but none is matching "
+                                      "SCM checkout dir name: %s" % spec_files)
+        else:
+            spec_file = spec_files[0]
 
         # Run spec file sanity checks.  Any failures will throw a BuildError
         self.spec_sanity_checks(spec_file)
@@ -5219,8 +5278,8 @@
         if target is not None:
             dest_tag = target['dest_tag_name']
         status = koji.BUILD_STATES[build['state']].lower()
-        creation_time = koji.formatTimeLong(build['creation_time'])
-        completion_time = koji.formatTimeLong(build['completion_time'])
+        creation_time = koji.formatTimeLong(build['creation_ts'])
+        completion_time = koji.formatTimeLong(build['completion_ts'])
         task_id = build['task_id']
 
         task_data = self._getTaskData(task_id)
@@ -5479,6 +5538,28 @@
             raise koji.GenericError('failed to create repo: %s'
                                     % parseStatus(status, ' '.join(cmd)))
 
+    def _get_mergerepo_c_version(self):
+        cmd = ['/usr/bin/mergerepo_c', '--version']
+        try:
+            proc = subprocess.Popen(cmd, stdout=subprocess.PIPE)
+            out, _ = proc.communicate()
+            status = proc.wait()
+            if status != 0:
+                self.logger.warning("Unable to detect mergerepo_c version")
+                return None
+        except Exception:
+            self.logger.warning("Unable to detect mergerepo_c version")
+            return None
+        out = out.decode().strip()
+        # Expects output like: "Version: 0.15.11 (Features: DeltaRPM LegacyWeakdeps )"
+        m = re.match(r'Version: (\d+).(\d+).(\d+).*', out)
+        if not m:
+            self.logger.warning("Unable to parse mergerepo_c version")
+            return None
+        version = m.groups()
+        version = [int(x) for x in version]
+        return tuple(version)
+
     def merge_repos(self, external_repos, arch, groupdata):
         # group repos by merge type
         repos_by_mode = {}
@@ -5506,26 +5587,39 @@
             ext_url = ext_url.replace('$arch', arch)
             repos.append(ext_url)
 
+        mergerepo_c_version = None
+        if self.options.use_createrepo_c or six.PY3:
+            mergerepo_c_version = self._get_mergerepo_c_version()
+
         # construct command
         if merge_mode == 'simple':
-            # currently only supported by our own mergerepos script
-            # (we need it to write pkgorigins)
-            cmd = ['/usr/libexec/kojid/mergerepos',
-                   '--mode', 'simple',
-                   '--tempdir', self.workdir]
+            if mergerepo_c_version and mergerepo_c_version >= (0, 13, 0):
+                cmd = ['/usr/bin/mergerepo_c', '--koji', '--simple']
+            elif six.PY3:
+                # koji's mergerepos script only works on python2
+                raise koji.GenericError("mergerepo_c is not installed or has low version: "
+                                        "%s (0.13.0 needed for --simple)" %
+                                        ".".join([str(d) for d in mergerepo_c_version or [None]]))
+            else:
+                cmd = ['/usr/libexec/kojid/mergerepos',
+                       '--mode', 'simple',
+                       '--tempdir', self.workdir]
         elif merge_mode == 'bare':
             # "bare" merge mode for repos with modular metadata
             # forces use of mergerepo_c
             cmd = ['/usr/bin/mergerepo_c', '--pkgorigins', '--all']
-        elif self.options.use_createrepo_c:
+        elif self.options.use_createrepo_c or six.PY3:
             cmd = ['/usr/bin/mergerepo_c', '--koji']
         else:
-            cmd = ['/usr/libexec/kojid/mergerepos']
-            cmd.extend(['--tempdir', self.workdir])
+            cmd = ['/usr/libexec/kojid/mergerepos', '--tempdir', self.workdir]
+
         if merge_mode != 'bare':
             blocklist = self.repodir + '/blocklist'
             cmd.extend(['-b', blocklist])
         cmd.extend(['-a', arch, '-o', self.outdir])
+        if cmd[0].endswith('mergerepo_c') and mergerepo_c_version \
+           and mergerepo_c_version >= (0, 15, 11):
+            cmd.append('--arch-expand')
         if os.path.isfile(groupdata):
             cmd.extend(['-g', groupdata])
         for repo in repos:
@@ -6361,10 +6455,6 @@
                 'host_principal_format': 'compile/%s@EXAMPLE.COM',
                 'keytab': '/etc/kojid/kojid.keytab',
                 'ccache': '/var/tmp/kojid.ccache',
-                'krbservice': 'host',
-                'krb_rdns': True,
-                'krb_canon_host': False,
-                'krb_server_realm': None,
                 'server': None,
                 'user': None,
                 'password': None,
@@ -6379,6 +6469,7 @@
                 'use_createrepo_c': True,
                 'createrepo_skip_stat': True,
                 'createrepo_update': True,
+                'mock_bootstrap_image': False,
                 'pkgurl': None,
                 'allowed_scms': '',
                 'scm_credentials_dir': None,
@@ -6407,8 +6498,7 @@
                     quit("value for %s option must be a valid integer" % name)
             elif name in ['offline_retry', 'use_createrepo_c', 'createrepo_skip_stat',
                           'createrepo_update', 'use_fast_upload', 'support_rpm_source_layout',
-                          'krb_rdns', 'krb_canon_host', 'build_arch_can_fail', 'no_ssl_verify',
-                          'log_timestamps']:
+                          'build_arch_can_fail', 'no_ssl_verify', 'log_timestamps']:
                 defaults[name] = config.getboolean('kojid', name)
             elif name in ['plugin', 'plugins']:
                 defaults['plugin'] = value.split()
@@ -6514,14 +6604,14 @@
             quit("Error: Unable to log in. Bad credentials?")
         except requests.exceptions.ConnectionError:
             quit("Error: Unable to connect to server %s" % (options.server))
-    elif krbV or requests_kerberos:
+    elif reqgssapi:
         krb_principal = options.krb_principal
         if krb_principal is None:
             krb_principal = options.host_principal_format % socket.getfqdn()
         try:
-            session.krb_login(principal=krb_principal,
-                              keytab=options.keytab,
-                              ccache=options.ccache)
+            session.gssapi_login(principal=krb_principal,
+                                 keytab=options.keytab,
+                                 ccache=options.ccache)
         except Krb5Error as e:
             quit("Kerberos authentication failed: %s" % e.args)
         except socket.error as e:
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/kojid.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/kojid.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/kojid.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/kojid.conf	2020-09-07 15:44:50.000000000 +0800
@@ -102,9 +102,6 @@
 ;location of the keytab
 ;keytab = /etc/kojid/kojid.keytab
 
-;the service name of the principal being used by the hub
-;krbservice = host
-
 ;configuration for SSL authentication
 
 ;client certificate
@@ -116,6 +113,9 @@
 ;if set to True, failing subtask will not automatically cancel other siblings
 ;build_arch_can_fail = False
 
+;if set to True, tag extra 'mock.bootstrap_image' can be used
+;mock_boostrap_image = False
+
 ;image build with raw-xz type will use following xz options
 ;xz_options=-z6T0
 
@@ -123,3 +123,11 @@
 ;to hub. It could be useful for debugging purposes, but creates twice as many
 ;log files
 ;log_timestamps = False
+
+;enabled plugins, base koji installation has access to runroot and save_failed_tree
+;none of these is enabled by default
+;plugin = 
+
+;path where builder plugins are located, there could be multiple paths delimited
+by :
+;pluginpath = /usr/lib/koji-builder-plugins
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/Makefile /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/Makefile
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/builder/Makefile	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/builder/Makefile	2020-09-07 15:44:50.000000000 +0800
@@ -1,3 +1,5 @@
+PYVER := $(shell $(PYTHON) -c 'import sys; print("%.1s" %(sys.version))')
+
 BINFILES = kojid
 LIBEXECFILES = mergerepos
 SYSTEMDSYSTEMUNITDIR = $(shell pkg-config systemd --variable=systemdsystemunitdir)
@@ -21,8 +23,10 @@
 	mkdir -p $(DESTDIR)/usr/sbin
 	install -p -m 755 $(BINFILES) $(DESTDIR)/usr/sbin
 
-	mkdir -p $(DESTDIR)/usr/libexec/kojid
-	install -p -m 755 $(LIBEXECFILES) $(DESTDIR)/usr/libexec/kojid
+	@if [ "$(PYVER)" -lt 3 ] ; then \
+		mkdir -p $(DESTDIR)/usr/libexec/kojid; \
+		install -p -m 755 $(LIBEXECFILES) $(DESTDIR)/usr/libexec/kojid; \
+	fi
 
 	mkdir -p $(DESTDIR)/etc/mock/koji
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji	2020-09-07 15:44:50.000000000 +0800
@@ -119,9 +119,8 @@
                       help=_("specify a configuration profile"))
     parser.add_option("--keytab", help=_("specify a Kerberos keytab to use"), metavar="FILE")
     parser.add_option("--principal", help=_("specify a Kerberos principal to use"))
-    parser.add_option("--krbservice", help=_("specify the Kerberos service name for the hub"))
     parser.add_option("--cert", help=_("specify a SSL cert to use"), metavar="FILE")
-    parser.add_option("--ca", help=_("specify a SSL CA to use"), metavar="FILE")
+    parser.add_option("--ca", help=SUPPRESS_HELP, metavar="FILE")  # FIXME: remove in 1.24
     parser.add_option("--runas", help=_("run as the specified user (requires special privileges)"))
     parser.add_option("--user", help=_("specify user"))
     parser.add_option("--password", help=_("specify password"))
@@ -150,6 +149,9 @@
                       help=_("list commands"))
     (options, args) = parser.parse_args()
 
+    if options.ca:
+        koji.util.deprecated("--ca option is deprecated and will be removed in 1.24")
+
     # load local config
     try:
         result = koji.read_config(options.profile, user_config=options.configFile)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji_cli/commands.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji_cli/commands.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji_cli/commands.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji_cli/commands.py	2020-09-07 15:44:50.000000000 +0800
@@ -2,7 +2,6 @@
 
 import ast
 import fnmatch
-import hashlib
 import itertools
 import json
 import logging
@@ -24,7 +23,7 @@
 from six.moves import filter, map, range, zip
 
 import koji
-from koji.util import base64encode, to_list
+from koji.util import base64encode, md5_constructor, to_list
 from koji_cli.lib import (
     _,
     _list_tasks,
@@ -35,6 +34,7 @@
     download_archive,
     download_file,
     download_rpm,
+    ensure_connection,
     error,
     format_inheritance_flags,
     get_usage_str,
@@ -82,14 +82,12 @@
 
     dsttag = session.getTag(tag)
     if not dsttag:
-        print("Unknown tag: %s" % tag)
-        return 1
+        error("Unknown tag: %s" % tag)
 
     groups = dict([(p['name'], p['group_id']) for p in session.getTagGroups(tag, inherit=False)])
     group_id = groups.get(group, None)
     if group_id is not None:
-        print("Group %s already exists for tag %s" % (group, tag))
-        return 1
+        error("Group %s already exists for tag %s" % (group, tag))
 
     session.groupListAdd(tag, group)
 
@@ -110,14 +108,12 @@
 
     dsttag = session.getTag(tag)
     if not dsttag:
-        print("Unknown tag: %s" % tag)
-        return 1
+        error("Unknown tag: %s" % tag)
 
     groups = dict([(p['name'], p['group_id']) for p in session.getTagGroups(tag, inherit=False)])
     group_id = groups.get(group, None)
     if group_id is None:
-        print("Group %s doesn't exist within tag %s" % (group, tag))
-        return 1
+        error("Group %s doesn't exist within tag %s" % (group, tag))
 
     session.groupListBlock(tag, group)
 
@@ -234,15 +230,14 @@
     session.multicall = True
     for host in args:
         session.getHost(host)
-    error = False
+    error_hit = False
     for host, [info] in zip(args, session.multiCall(strict=True)):
         if not info:
-            print(_("Host %s does not exist") % host)
-            error = True
+            warn(_("Host %s does not exist") % host)
+            error_hit = True
 
-    if error:
-        print(_("No changes made, please correct the command line"))
-        return 1
+    if error_hit:
+        error(_("No changes made, please correct the command line"))
 
     session.multicall = True
     for host in args:
@@ -272,13 +267,11 @@
     if not options.new:
         channelinfo = session.getChannel(channel)
         if not channelinfo:
-            print("No such channel: %s" % channel)
-            return 1
+            error("No such channel: %s" % channel)
     host = args[0]
     hostinfo = session.getHost(host)
     if not hostinfo:
-        print("No such host: %s" % host)
-        return 1
+        error("No such host: %s" % host)
     kwargs = {}
     if options.new:
         kwargs['create'] = True
@@ -296,14 +289,12 @@
     activate_session(session, goptions)
     hostinfo = session.getHost(host)
     if not hostinfo:
-        print("No such host: %s" % host)
-        return 1
+        error("No such host: %s" % host)
     hostchannels = [c['name'] for c in session.listChannels(hostinfo['id'])]
 
     channel = args[1]
     if channel not in hostchannels:
-        print("Host %s is not a member of channel %s" % (host, channel))
-        return 1
+        error("Host %s is not a member of channel %s" % (host, channel))
 
     session.removeHostFromChannel(host, channel)
 
@@ -319,8 +310,7 @@
     activate_session(session, goptions)
     cinfo = session.getChannel(args[0])
     if not cinfo:
-        print("No such channel: %s" % args[0])
-        return 1
+        error("No such channel: %s" % args[0])
     session.removeChannel(args[0], force=options.force)
 
 
@@ -334,8 +324,7 @@
     activate_session(session, goptions)
     cinfo = session.getChannel(args[0])
     if not cinfo:
-        print("No such channel: %s" % args[0])
-        return 1
+        error("No such channel: %s" % args[0])
     session.renameChannel(args[0], args[1])
 
 
@@ -352,8 +341,7 @@
     if not options.owner:
         parser.error(_("Please specify an owner for the package(s)"))
     if not session.getUser(options.owner):
-        print("User %s does not exist" % options.owner)
-        return 1
+        error("User %s does not exist" % options.owner)
     activate_session(session, goptions)
     tag = args[0]
     opts = {}
@@ -398,18 +386,17 @@
     # check if list of packages exists for that tag already
     dsttag = session.getTag(tag)
     if dsttag is None:
-        print("No such tag: %s" % tag)
-        return 1
+        error("No such tag: %s" % tag)
     pkglist = dict([(p['package_name'], p['package_id'])
                     for p in session.listPackages(tagID=dsttag['id'], inherited=True)])
     ret = 0
     for package in args[1:]:
         package_id = pkglist.get(package, None)
         if package_id is None:
-            print("Package %s doesn't exist in tag %s" % (package, tag))
+            warn("Package %s doesn't exist in tag %s" % (package, tag))
             ret = 1
     if ret:
-        return ret
+        error(code=ret)
     session.multicall = True
     for package in args[1:]:
         # force is not supported on older hub, so use it only explicitly
@@ -436,18 +423,17 @@
     # check if list of packages exists for that tag already
     dsttag = session.getTag(tag)
     if dsttag is None:
-        print("No such tag: %s" % tag)
-        return 1
+        error("No such tag: %s" % tag)
     pkglist = dict([(p['package_name'], p['package_id'])
                     for p in session.listPackages(tagID=dsttag['id'])])
     ret = 0
     for package in args[1:]:
         package_id = pkglist.get(package, None)
         if package_id is None:
-            print("Package %s is not in tag %s" % (package, tag))
+            warn("Package %s is not in tag %s" % (package, tag))
             ret = 1
     if ret:
-        return ret
+        error(code=ret)
     session.multicall = True
     for package in args[1:]:
         session.packageListRemove(tag, package, **opts)
@@ -552,8 +538,6 @@
         session.logout()
         return watch_tasks(session, [task_id], quiet=build_opts.quiet,
                            poll_interval=options.poll_interval)
-    else:
-        return
 
 
 def handle_chain_build(options, session, args):
@@ -584,11 +568,9 @@
     ancestors = session.getFullInheritance(build_target['build_tag'])
     if dest_tag['id'] not in [build_target['build_tag']] + \
             [ancestor['parent_id'] for ancestor in ancestors]:
-        print(_("Packages in destination tag %(dest_tag_name)s are not inherited by build tag "
-                "%(build_tag_name)s" % build_target))
-        print(_("Target %s is not usable for a chain-build" % build_target['name']))
-        return 1
-
+        warn(_("Packages in destination tag %(dest_tag_name)s are not inherited by build tag "
+               "%(build_tag_name)s" % build_target))
+        error(_("Target %s is not usable for a chain-build" % build_target['name']))
     sources = args[1:]
 
     src_list = []
@@ -608,8 +590,7 @@
             # quick check that it looks like a N-V-R
             build_level.append(src)
         else:
-            print(_('"%s" is not a SCM URL or package N-V-R' % src))
-            return 1
+            error(_('"%s" is not a SCM URL or package N-V-R' % src))
     if build_level:
         src_list.append(build_level)
 
@@ -949,7 +930,7 @@
     parser.add_option("--yum-proxy", help=_("Specify a yum proxy"))
     parser.add_option("-o", metavar="FILE", dest="ofile", help=_("Output to a file"))
     (options, args) = parser.parse_args(args)
-    activate_session(session, goptions)
+    ensure_connection(session)
     if args:
         # for historical reasons, we also accept buildroot name as first arg
         if not options.name:
@@ -980,8 +961,7 @@
             parser.error(_("Task id must be an integer"))
         broots = session.listBuildroots(taskID=task_id)
         if not broots:
-            print(_("No buildroots for task %s (or no such task)") % options.task)
-            return 1
+            error(_("No buildroots for task %s (or no such task)") % options.task)
         if len(broots) > 1:
             print(_("Multiple buildroots found: %s" % [br['id'] for br in broots]))
         brootinfo = broots[-1]
@@ -995,29 +975,25 @@
             options.name = "%s-task_%i" % (opts['tag_name'], task_id)
     elif options.tag:
         if not options.arch:
-            print(_("Please specify an arch"))
-            return 1
+            error(_("Please specify an arch"))
         tag = session.getTag(options.tag)
         if not tag:
             parser.error(_("Invalid tag: %s" % options.tag))
         arch = options.arch
         config = session.getBuildConfig(tag['id'])
         if not config:
-            print(_("Could not get config info for tag: %(name)s") % tag)
-            return 1
+            error(_("Could not get config info for tag: %(name)s") % tag)
         opts['tag_name'] = tag['name']
         if options.latest:
             opts['repoid'] = 'latest'
         else:
             repo = session.getRepo(config['id'])
             if not repo:
-                print(_("Could not get a repo for tag: %(name)s") % tag)
-                return 1
+                error(_("Could not get a repo for tag: %(name)s") % tag)
             opts['repoid'] = repo['id']
     elif options.target:
         if not options.arch:
-            print(_("Please specify an arch"))
-            return 1
+            error(_("Please specify an arch"))
         arch = options.arch
         target = session.getBuildTarget(options.target)
         if not target:
@@ -1028,8 +1004,7 @@
         else:
             repo = session.getRepo(target['build_tag'])
             if not repo:
-                print(_("Could not get a repo for tag: %s") % opts['tag_name'])
-                return 1
+                error(_("Could not get a repo for tag: %s") % opts['tag_name'])
             opts['repoid'] = repo['id']
     else:
         parser.error(_("Please specify one of: --tag, --target, --task, --buildroot"))
@@ -1046,7 +1021,18 @@
         opts['package_manager'] = buildcfg['extra']['mock.package_manager']
     if 'mock.yum.module_hotfixes' in buildcfg['extra']:
         opts['module_hotfixes'] = buildcfg['extra']['mock.yum.module_hotfixes']
-
+    if 'mock.yum.best' in buildcfg['extra']:
+        opts['yum_best'] = int(buildcfg['extra']['mock.yum.best'])
+    if 'mock.bootstrap_image' in buildcfg['extra']:
+        opts['use_bootstrap_image'] = True
+        opts['bootstrap_image'] = buildcfg['extra']['mock.bootstrap_image']
+    if 'mock.use_bootstrap' in buildcfg['extra']:
+        opts['use_bootstrap'] = buildcfg['extra']['mock.use_bootstrap']
+    opts['tag_macros'] = {}
+    for key in buildcfg['extra']:
+        if key.startswith('rpm.macro.'):
+            macro = '%' + key[10:]
+            opts['tag_macros'][macro] = buildcfg['extra'][key]
     output = koji.genMockConfig(name, arch, **opts)
     if options.ofile:
         with open(options.ofile, 'w') as fo:
@@ -1069,14 +1055,13 @@
     session.multicall = True
     for host in args:
         session.getHost(host)
-    error = False
+    error_hit = False
     for host, [id] in zip(args, session.multiCall(strict=True)):
         if not id:
             print("Host %s does not exist" % host)
-            error = True
-    if error:
-        print("No changes made. Please correct the command line.")
-        return 1
+            error_hit = True
+    if error_hit:
+        error("No changes made. Please correct the command line.")
     session.multicall = True
     for host in args:
         session.disableHost(host)
@@ -1099,14 +1084,13 @@
     session.multicall = True
     for host in args:
         session.getHost(host)
-    error = False
+    error_hit = False
     for host, [id] in zip(args, session.multiCall(strict=True)):
         if not id:
             print("Host %s does not exist" % host)
-            error = True
-    if error:
-        print("No changes made. Please correct the command line.")
-        return 1
+            error_hit = True
+    if error_hit:
+        error("No changes made. Please correct the command line.")
     session.multicall = True
     for host in args:
         session.enableHost(host)
@@ -1149,10 +1133,9 @@
         }
         others = session.listTasks(query)
         if others:
-            print('Found other restartHosts tasks running.')
-            print('Task ids: %r' % [t['id'] for t in others])
-            print('Use --force to run anyway')
-            return 1
+            warn('Found other restartHosts tasks running.')
+            warn('Task ids: %r' % [t['id'] for t in others])
+            error('Use --force to run anyway')
 
     callopts = {}
     if my_opts.channel:
@@ -1170,8 +1153,6 @@
         session.logout()
         return watch_tasks(session, [task_id], quiet=my_opts.quiet,
                            poll_interval=options.poll_interval)
-    else:
-        return
 
 
 def handle_import(goptions, session, args):
@@ -1389,15 +1370,13 @@
     # check if the tag exists
     dsttag = session.getTag(args[1])
     if dsttag is None:
-        print("No such tag: %s" % args[1])
-        return 1
+        error("No such tag: %s" % args[1])
     if libcomps is not None:
         _import_comps(session, args[0], args[1], local_options)
     elif yumcomps is not None:
         _import_comps_alt(session, args[0], args[1], local_options)
     else:
-        print("comps module not available")
-        return 1
+        error("comps module not available")
 
 
 def _import_comps(session, filename, tag, options):
@@ -1516,7 +1495,7 @@
         previous = session.queryRPMSigs(rpm_id=rinfo['id'], sigkey=sigkey)
         assert len(previous) <= 1
         if previous:
-            sighash = hashlib.md5(sighdr).hexdigest()
+            sighash = md5_constructor(sighdr).hexdigest()
             if previous[0]['sighash'] == sighash:
                 print(_("Signature already imported: %s") % path)
                 continue
@@ -1575,7 +1554,7 @@
         session.writeSignedRPM(rpminfo['id'], key)
 
 
-def handle_prune_signed_copies(options, session, args):
+def handle_prune_signed_copies(goptions, session, args):
     "[admin] Prune signed copies"
     usage = _("usage: %prog prune-sigs [options]")
     parser = OptionParser(usage=get_usage_str(usage))
@@ -1593,7 +1572,9 @@
     parser.add_option("--protect-tag-file",
                       help=_("File to read tag protect patterns from"))
     parser.add_option("--trashcan-tag", default="trashcan", help=_("Specify trashcan tag"))
-    parser.add_option("--debug", action="store_true", help=_("Show debugging output"))
+    # Don't use local debug option, this one stays here for backward compatibility
+    # https://pagure.io/koji/issue/2084
+    parser.add_option("--debug", action="store_true", default=goptions.debug, help=SUPPRESS_HELP)
     (options, args) = parser.parse_args(args)
     # different ideas/modes
     #  1) remove all signed copies of builds that are not latest for some tag
@@ -1933,8 +1914,7 @@
         parser.error(_("You must provide a volume and at least one build"))
     volinfo = session.getVolume(args[0])
     if not volinfo:
-        print("No such volume: %s" % args[0])
-        return 1
+        error("No such volume: %s" % args[0])
     activate_session(session, goptions)
     builds = []
     for nvr in args[1:]:
@@ -1946,8 +1926,7 @@
         else:
             builds.append(binfo)
     if not builds:
-        print("No builds to move")
-        return 1
+        error("No builds to move")
     for binfo in builds:
         session.changeBuildVolume(binfo['id'], volinfo['id'])
         if options.verbose:
@@ -1964,8 +1943,7 @@
     name = args[0]
     volinfo = session.getVolume(name)
     if volinfo:
-        print("Volume %s already exists" % name)
-        return 1
+        error("Volume %s already exists" % name)
     activate_session(session, goptions)
     volinfo = session.addVolume(name)
     print("Added volume %(name)s with id %(id)i" % volinfo)
@@ -1993,8 +1971,7 @@
     if options.user:
         user = session.getUser(options.user)
         if not user:
-            print("User %s does not exist" % options.user)
-            return 1
+            error("User %s does not exist" % options.user)
         perms = session.getUserPerms(user['id'])
     elif options.mine:
         perms = session.getPerms()
@@ -2088,7 +2065,9 @@
     "[admin] List signed copies of rpms"
     usage = _("usage: %prog list-signed [options]")
     parser = OptionParser(usage=get_usage_str(usage))
-    parser.add_option("--debug", action="store_true")
+    # Don't use local debug option, this one stays here for backward compatibility
+    # https://pagure.io/koji/issue/2084
+    parser.add_option("--debug", action="store_true", default=goptions.debug, help=SUPPRESS_HELP)
     parser.add_option("--key", help=_("Only list RPMs signed with this key"))
     parser.add_option("--build", help=_("Only list RPMs from this build"))
     parser.add_option("--rpm", help=_("Only list signed copies for this RPM"))
@@ -2167,7 +2146,7 @@
         builddir = koji.pathinfo.build(binfo)
         signedpath = "%s/%s" % (builddir, koji.pathinfo.signed(rinfo, sigkey))
         if not os.path.exists(signedpath):
-            if options.debug:
+            if goptions.debug:
                 print("No copy: %s" % signedpath)
             continue
         print(signedpath)
@@ -2277,7 +2256,8 @@
     "[admin] Grant a permission to a user"
     usage = _("usage: %prog grant-permission [--new] <permission> <user> [<user> ...]")
     parser = OptionParser(usage=get_usage_str(usage))
-    parser.add_option("--new", action="store_true", help=_("Create a new permission"))
+    parser.add_option("--new", action="store_true",
+                      help=_("Create this permission if the permission does not exist"))
     (options, args) = parser.parse_args(args)
     if len(args) < 2:
         parser.error(_("Please specify a permission and at least one user"))
@@ -2380,7 +2360,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) == 0:
         parser.error(_("A tag name must be specified"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     if options.all:
         if len(args) > 1:
             parser.error(_("A package name may not be combined with --all"))
@@ -2448,7 +2428,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 0:
         parser.error(_("This command takes no arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     for x in sorted(session._listapi(), key=lambda x: x['name']):
         if 'argdesc' in x:
             args = x['argdesc']
@@ -2494,7 +2474,7 @@
         parser.error(_("A tag name must be specified"))
     elif len(args) > 2:
         parser.error(_("Only one package name may be specified"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     pathinfo = koji.PathInfo()
     package = None
     if len(args) > 1:
@@ -2593,7 +2573,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 1:
         parser.error(_("Incorrect number of arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     buildrootID = int(args[0])
     opts = {}
     if options.built:
@@ -2620,7 +2600,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) > 1:
         parser.error(_("Only one package name may be specified"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     package = None
     if len(args) > 0:
         package = args[0]
@@ -2643,7 +2623,7 @@
             if refs.get('rpms'):
                 r.append("rpms: %s" % refs['rpms'])
             if refs.get('component_of'):
-                r.append("images/archives: %" % refs['component_of'])
+                r.append("images/archives: %s" % refs['component_of'])
             if refs.get('archives'):
                 r.append("archives buildroots: %s" % refs['archives'])
             build['refs'] = ', '.join(r)
@@ -2688,7 +2668,7 @@
     opts = {}
     if options.incl_blocked:
         opts['incl_blocked'] = True
-    activate_session(session, goptions)
+    ensure_connection(session)
     event = koji.util.eventFromOpts(session, options)
     if event:
         opts['event'] = event['id']
@@ -2817,7 +2797,7 @@
     parser.add_option("--quiet", action="store_true", default=goptions.quiet,
                       help=_("Do not print header information"))
     (options, args) = parser.parse_args(args)
-    activate_session(session, goptions)
+    ensure_connection(session)
     channels = session.listChannels()
     channels = sorted(channels, key=lambda x: x['name'])
     session.multicall = True
@@ -2865,7 +2845,7 @@
     parser.add_option("--show-channels", action="store_true", help=_("Show host's channels"))
     (options, args) = parser.parse_args(args)
     opts = {}
-    activate_session(session, goptions)
+    ensure_connection(session)
     if options.arch:
         opts['arches'] = options.arch
     if options.channel:
@@ -2946,7 +2926,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 0:
         parser.error(_("This command takes no arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     opts = {}
     if options.owner:
         user = session.getUser(options.owner)
@@ -2987,8 +2967,7 @@
 
     data = session.listPackages(**opts)
     if not data:
-        print("(no matching packages)")
-        return 1
+        error("(no matching packages)")
     if not options.quiet:
         if allpkgs:
             print("Package")
@@ -3040,7 +3019,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 0:
         parser.error(_("This command takes no arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     opts = {}
     for key in ('type', 'prefix'):
         value = getattr(options, key)
@@ -3144,7 +3123,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) < 1:
         parser.error(_("Please specify an RPM"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     for rpm in args:
         info = session.getRPM(rpm)
         if info is None:
@@ -3216,7 +3195,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) < 1:
         parser.error(_("Please specify a build"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     for build in args:
         if build.isdigit():
             build = int(build)
@@ -3246,7 +3225,7 @@
             print("Task: %s %s" % (task['id'], koji.taskLabel(task)))
         else:
             print("Task: none")
-        print("Finished: %s" % koji.formatTimeLong(info['completion_time']))
+        print("Finished: %s" % koji.formatTimeLong(info['completion_ts']))
         maven_info = session.getMavenBuild(info['id'])
         if maven_info:
             print("Maven groupId: %s" % maven_info['group_id'])
@@ -3314,7 +3293,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) < 1:
         parser.error(_("Please specify a host"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     for host in args:
         if host.isdigit():
             host = int(host)
@@ -3427,7 +3406,7 @@
         print(_("Cloning at event %(id)i (%(timestr)s)") % event)
 
     # store tags.
-    srctag = session.getTag(args[0])
+    srctag = session.getTag(args[0], event=event.get('id'))
     dsttag = session.getTag(args[1])
     if not srctag:
         parser.error(_("Unknown src-tag: %s" % args[0]))
@@ -3896,14 +3875,11 @@
     chkbuildtag = session.getTag(build_tag)
     chkdesttag = session.getTag(dest_tag)
     if not chkbuildtag:
-        print("Build tag does not exist: %s" % build_tag)
-        return 1
+        error("Build tag does not exist: %s" % build_tag)
     if not chkbuildtag.get("arches", None):
-        print("Build tag has no arches: %s" % build_tag)
-        return 1
+        error("Build tag has no arches: %s" % build_tag)
     if not chkdesttag:
-        print("Destination tag does not exist: %s" % dest_tag)
-        return 1
+        error("Destination tag does not exist: %s" % dest_tag)
 
     session.createBuildTarget(name, build_tag, dest_tag)
 
@@ -3937,16 +3913,13 @@
         targetInfo['build_tag_name'] = options.build_tag
         chkbuildtag = session.getTag(options.build_tag)
         if not chkbuildtag:
-            print("Build tag does not exist: %s" % options.build_tag)
-            return 1
+            error("Build tag does not exist: %s" % options.build_tag)
         if not chkbuildtag.get("arches", None):
-            print("Build tag has no arches: %s" % options.build_tag)
-            return 1
+            error("Build tag has no arches: %s" % options.build_tag)
     if options.dest_tag:
         chkdesttag = session.getTag(options.dest_tag)
         if not chkdesttag:
-            print("Destination tag does not exist: %s" % options.dest_tag)
-            return 1
+            error("Destination tag does not exist: %s" % options.dest_tag)
         targetInfo['dest_tag_name'] = options.dest_tag
 
     session.editBuildTarget(targetInfo['orig_name'], targetInfo['name'],
@@ -3969,8 +3942,7 @@
     target = args[0]
     target_info = session.getBuildTarget(target)
     if not target_info:
-        print("Build target %s does not exist" % target)
-        return 1
+        error("Build target %s does not exist" % target)
 
     session.deleteBuildTarget(target_info['id'])
 
@@ -3991,8 +3963,7 @@
     tag = args[0]
     tag_info = session.getTag(tag)
     if not tag_info:
-        print("Tag %s does not exist" % tag)
-        return 1
+        error("Tag %s does not exist" % tag)
 
     session.deleteTag(tag_info['id'])
 
@@ -4007,7 +3978,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 0:
         parser.error(_("This command takes no arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
 
     fmt = "%(name)-30s %(build_tag_name)-30s %(dest_tag_name)-30s"
     if not options.quiet:
@@ -4077,7 +4048,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) != 1:
         parser.error(_("This command takes exctly one argument: a tag name or ID"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     event = koji.util.eventFromOpts(session, options)
     if event:
         event['timestr'] = time.asctime(time.localtime(event['ts']))
@@ -4128,7 +4099,7 @@
     parser.add_option("--build", help=_("Show tags associated with a build"))
     parser.add_option("--package", help=_("Show tags associated with a package"))
     (options, args) = parser.parse_args(args)
-    activate_session(session, goptions)
+    ensure_connection(session)
 
     pkginfo = {}
     buildinfo = {}
@@ -4143,7 +4114,29 @@
         if not buildinfo:
             parser.error(_("Invalid build %s" % options.build))
 
-    tags = session.listTags(buildinfo.get('id', None), pkginfo.get('id', None))
+    if not args:
+        # list everything if no pattern is supplied
+        tags = session.listTags(build=buildinfo.get('id', None),
+                                package=pkginfo.get('id', None))
+    else:
+        # The hub may not support the pattern option. We try with that first
+        # and fall back to the old way.
+        fallback = False
+        try:
+            tags = []
+            with session.multicall(strict=True) as m:
+                for arg in args:
+                    tags.append(m.listTags(build=buildinfo.get('id', None),
+                                           package=pkginfo.get('id', None),
+                                           pattern=arg))
+            tags = list(itertools.chain(*[t.result for t in tags]))
+        except koji.ParameterError:
+            fallback = True
+        if fallback:
+            # without the pattern option, we have to filter client side
+            tags = session.listTags(buildinfo.get('id', None), pkginfo.get('id', None))
+            tags = [t for t in tags if koji.util.multi_fnmatch(t['name'], args)]
+
     tags.sort(key=lambda x: x['name'])
     # if options.verbose:
     #    fmt = "%(name)s [%(id)i] %(perm)s %(locked)s %(arches)s"
@@ -4152,12 +4145,6 @@
     else:
         fmt = "%(name)s"
     for tag in tags:
-        if args:
-            for pattern in args:
-                if fnmatch.fnmatch(tag['name'], pattern):
-                    break
-            else:
-                continue
         if options.unlocked:
             if tag['locked'] or tag['perm']:
                 continue
@@ -4176,7 +4163,9 @@
     "[info] Print a history of tag operations"
     usage = _("usage: %prog list-tag-history [options]")
     parser = OptionParser(usage=get_usage_str(usage))
-    parser.add_option("--debug", action="store_true")
+    # Don't use local debug option, this one stays here for backward compatibility
+    # https://pagure.io/koji/issue/2084
+    parser.add_option("--debug", action="store_true", default=goptions.debug, help=SUPPRESS_HELP)
     parser.add_option("--build", help=_("Only show data for a specific build"))
     parser.add_option("--package", help=_("Only show data for a specific package"))
     parser.add_option("--tag", help=_("Only show data for a specific tag"))
@@ -4202,7 +4191,7 @@
     if not limited and not options.all:
         parser.error(_("Please specify an option to limit the query"))
 
-    activate_session(session, goptions)
+    ensure_connection(session)
 
     hist = session.tagHistory(**kwargs)
     timeline = []
@@ -4475,7 +4464,9 @@
     "[info] Display historical data"
     usage = _("usage: %prog list-history [options]")
     parser = OptionParser(usage=get_usage_str(usage))
-    parser.add_option("--debug", action="store_true")
+    # Don't use local debug option, this one stays here for backward compatibility
+    # https://pagure.io/koji/issue/2084
+    parser.add_option("--debug", action="store_true", default=goptions.debug, help=SUPPRESS_HELP)
     parser.add_option("--build", help=_("Only show data for a specific build"))
     parser.add_option("--package", help=_("Only show data for a specific package"))
     parser.add_option("--tag", help=_("Only show data for a specific tag"))
@@ -4483,7 +4474,8 @@
                       help=_("Only show entries modified by user"))
     parser.add_option("--user", help=_("Only show entries affecting a user"))
     parser.add_option("--permission", help=_("Only show entries relating to a given permission"))
-    parser.add_option("--cg", help=_("Only show entries relating to a given permission"))
+    parser.add_option("--cg",
+                      help=_("Only show entries relating to a given content generator"))
     parser.add_option("--external-repo", "--erepo",
                       help=_("Only show entries relating to a given external repo"))
     parser.add_option("--build-target", "--target",
@@ -4555,7 +4547,7 @@
     if not limited and not options.all:
         parser.error(_("Please specify an option to limit the query"))
 
-    activate_session(session, goptions)
+    ensure_connection(session)
 
     if options.watch:
         if not kwargs.get('afterEvent') and not kwargs.get('after'):
@@ -4737,7 +4729,7 @@
         oldrepo = params[2]
         if oldrepo:
             lines.append("Old Repo ID: %i" % oldrepo['id'])
-            lines.append("Old Repo Creation: %s" % koji.formatTimeLong(oldrepo['creation_time']))
+            lines.append("Old Repo Creation: %s" % koji.formatTimeLong(oldrepo['create_ts']))
         if len(params) > 3:
             lines.append("External Repos: %s" %
                          ', '.join([ext['external_repo_name'] for ext in params[3]]))
@@ -4876,7 +4868,7 @@
     if len(args) < 1:
         parser.error(_("You must specify at least one task ID"))
 
-    activate_session(session, goptions)
+    ensure_connection(session)
 
     for arg in args:
         task_id = int(arg)
@@ -4894,7 +4886,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) < 1:
         parser.error(_("Please specify a tag"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     event = koji.util.eventFromOpts(session, options)
     event_opts = {}
     if event:
@@ -5047,7 +5039,7 @@
     if options.arches:
         opts['arches'] = koji.parse_arches(options.arches)
     if options.no_perm:
-        opts['perm_id'] = None
+        opts['perm'] = None
     elif options.perm:
         opts['perm'] = options.perm
     if options.unlock:
@@ -5267,18 +5259,14 @@
         data = [datum for datum in data if datum['priority'] == priority]
 
     if len(data) == 0:
-        print(_("No inheritance link found to remove.  Please check your arguments"))
-        return 1
+        error(_("No inheritance link found to remove.  Please check your arguments"))
     elif len(data) > 1:
         print(_("Multiple matches for tag."))
         if not parent:
-            print(_("Please specify a parent on the command line."))
-            return 1
+            error(_("Please specify a parent on the command line."))
         if not priority:
-            print(_("Please specify a priority on the command line."))
-            return 1
-        print(_("Error: Key constraints may be broken.  Exiting."))
-        return 1
+            error(_("Please specify a priority on the command line."))
+        error(_("Error: Key constraints may be broken.  Exiting."))
 
     # len(data) == 1
     data = data[0]
@@ -5286,9 +5274,8 @@
     inheritanceData = session.getInheritanceData(tag['id'])
     samePriority = [datum for datum in inheritanceData if datum['priority'] == options.priority]
     if samePriority:
-        print(_("Error: There is already an active inheritance with that priority on %s, "
+        error(_("Error: There is already an active inheritance with that priority on %s, "
                 "please specify a different priority with --priority.") % tag['name'])
-        return 1
 
     new_data = data.copy()
     if options.priority is not None and options.priority.isdigit():
@@ -5299,8 +5286,7 @@
         elif options.maxdepth.lower() == "none":
             new_data['maxdepth'] = None
         else:
-            print(_("Invalid maxdepth: %s") % options.maxdepth)
-            return 1
+            error(_("Invalid maxdepth: %s") % options.maxdepth)
     if options.intransitive:
         new_data['intransitive'] = options.intransitive
     if options.noconfig:
@@ -5391,7 +5377,7 @@
         parser.error(_("Incorrect number of arguments"))
     if options.incl_blocked and (options.comps or options.spec):
         parser.error(_("--show-blocked doesn't make sense for comps/spec output"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     tag = args[0]
     callopts = {}
     if options.incl_blocked:
@@ -5426,7 +5412,7 @@
     (options, args) = parser.parse_args(args)
     if len(args) > 0:
         parser.error(_("This command takes no arguments"))
-    activate_session(session, goptions)
+    ensure_connection(session)
     opts = {}
     event = koji.util.eventFromOpts(session, options)
     if event:
@@ -5623,10 +5609,9 @@
     if delete:
         # removing entirely
         if current_tags and not options.force:
-            print(_("Error: external repo %s used by tag(s): %s") %
-                  (repo, ', '.join(current_tags)))
-            print(_("Use --force to remove anyway"))
-            return 1
+            warn(_("Error: external repo %s used by tag(s): %s") %
+                 (repo, ', '.join(current_tags)))
+            error(_("Use --force to remove anyway"))
         session.deleteExternalRepo(args[0])
     else:
         for tag in tags:
@@ -5931,11 +5916,9 @@
     if not options.quiet:
         print("Created task: %d" % task_id)
         print("Task info: %s/taskinfo?taskID=%s" % (options.weburl, task_id))
-    # if task_opts.wait or (task_opts.wait is None and not _running_in_bg()):
-    #    session.logout()
-    #    return watch_tasks(session, [task_id], quiet=options.quiet)
-    # else:
-    #    return
+    if task_opts.wait or (task_opts.wait is None and not _running_in_bg()):
+        session.logout()
+        return watch_tasks(session, [task_id], quiet=options.quiet)
 
 
 def handle_image_build(options, session, args):
@@ -6132,8 +6115,6 @@
         session.logout()
         return watch_tasks(session, [task_id], quiet=options.quiet,
                            poll_interval=options.poll_interval)
-    else:
-        return
 
 
 def _build_image_oz(options, task_opts, session, args):
@@ -6203,8 +6184,6 @@
         session.logout()
         return watch_tasks(session, [task_id], quiet=options.quiet,
                            poll_interval=options.poll_interval)
-    else:
-        return
 
 
 def handle_win_build(options, session, args):
@@ -6280,8 +6259,6 @@
         session.logout()
         return watch_tasks(session, [task_id], quiet=build_opts.quiet,
                            poll_interval=options.poll_interval)
-    else:
-        return
 
 
 def handle_free_task(goptions, session, args):
@@ -6448,15 +6425,13 @@
     packages = args[1:]
     user = session.getUser(owner)
     if not user:
-        print("No such user: %s" % owner)
-        return 1
+        error("No such user: %s" % owner)
     opts = {'with_dups': True}
     old_user = None
     if options.old_user:
         old_user = session.getUser(options.old_user)
         if not old_user:
-            print("No such user: %s" % options.old_user)
-            return 1
+            error("No such user: %s" % options.old_user)
         opts['userID'] = old_user['id']
     to_change = []
     for package in packages:
@@ -6468,8 +6443,7 @@
     if not packages and options.old_user:
         entries = session.listPackages(**opts)
         if not entries:
-            print("No data for user %s" % old_user['name'])
-            return 1
+            error("No data for user %s" % old_user['name'])
         to_change.extend(entries)
     for entry in to_change:
         if user['id'] == entry['owner_id']:
@@ -6511,7 +6485,10 @@
     if args and selection:
         parser.error(_("Selection options cannot be combined with a task list"))
 
-    activate_session(session, goptions)
+    if options.mine:
+        activate_session(session, goptions)
+    else:
+        ensure_connection(session)
     if selection:
         tasks = [task['id'] for task in _list_tasks(options, session)]
         if not tasks:
@@ -6541,9 +6518,9 @@
                              "this case."))
     parser.add_option("--follow", action="store_true", help=_("Follow spawned child tasks"))
     (options, args) = parser.parse_args(args)
-    activate_session(session, goptions)
 
     if options.mine:
+        activate_session(session, goptions)
         if args:
             parser.error(_("Selection options cannot be combined with a task list"))
         tasks = _list_tasks(options, session)
@@ -6552,6 +6529,7 @@
             print(_("You've no active tasks."))
             return
     else:
+        ensure_connection(session)
         tasks = []
         for task in args:
             try:
@@ -6737,11 +6715,11 @@
                 # not in tag, see if it even exists
                 binfo = session.getBuild(nvr)
                 if not binfo:
-                    print(_("No such build: %s") % nvr)
+                    warn(_("No such build: %s") % nvr)
                 else:
-                    print(_("Build %s not in tag %s") % (nvr, tag['name']))
+                    warn(_("Build %s not in tag %s") % (nvr, tag['name']))
                 if not options.force:
-                    return 1
+                    error()
     builds.reverse()
     for binfo in builds:
         if options.test:
@@ -6793,12 +6771,12 @@
     elif len(args) > 1:
         parser.error(_("Only a single package N-V-R or build ID may be specified"))
 
-    activate_session(session, options)
+    ensure_connection(session)
     build = args[0]
 
     if build.isdigit():
         if suboptions.latestfrom:
-            error("--latestfrom not compatible with build IDs, specify a package name.")
+            parser.error("--latestfrom not compatible with build IDs, specify a package name.")
         build = int(build)
         if suboptions.task_id:
             builds = session.listBuilds(taskID=build)
@@ -7004,6 +6982,8 @@
                       help=_("URL under which Koji files are accessible"))
     parser.add_option("--noprogress", action="store_true",
                       help=_("Do not display progress meter"))
+    parser.add_option("--wait", action="store_true",
+                      help=_("Wait for running tasks to finish"))
     parser.add_option("-q", "--quiet", action="store_true",
                       help=_("Suppress output"), default=options.quiet)
 
@@ -7017,7 +6997,7 @@
     if len(suboptions.arches) > 0:
         suboptions.arches = ",".join(suboptions.arches).split(",")
 
-    activate_session(session, options)
+    ensure_connection(session)
 
     # get downloadable tasks
 
@@ -7025,6 +7005,13 @@
     if not base_task:
         error(_('No such task: #%i') % base_task_id)
 
+    if suboptions.wait and base_task['state'] not in (
+            koji.TASK_STATES['CLOSED'],
+            koji.TASK_STATES['CANCELED'],
+            koji.TASK_STATES['FAILED']):
+        watch_tasks(session, [base_task_id], quiet=suboptions.quiet,
+                    poll_interval=options.poll_interval)
+
     def check_downloadable(task):
         return task["method"] == "buildArch"
 
@@ -7122,13 +7109,13 @@
             parser.error(_("Invalid tag: %s") % tag)
         targets = session.getBuildTargets(buildTagID=tag_info['id'])
         if not targets:
-            print("%(name)s is not a build tag for any target" % tag_info)
+            warn("%(name)s is not a build tag for any target" % tag_info)
             targets = session.getBuildTargets(destTagID=tag_info['id'])
             if targets:
                 maybe = {}.fromkeys([t['build_tag_name'] for t in targets])
                 maybe = sorted(maybe.keys())
-                print("Suggested tags: %s" % ', '.join(maybe))
-            return 1
+                warn("Suggested tags: %s" % ', '.join(maybe))
+            error()
         tag_id = tag_info['id']
 
     for nvr in builds:
@@ -7157,12 +7144,12 @@
         if (time.time() - start) >= (suboptions.timeout * 60.0):
             if not suboptions.quiet:
                 if builds:
-                    print("Unsuccessfully waited %s for %s to appear in the %s repo" %
+                    error("Unsuccessfully waited %s for %s to appear in the %s repo" %
                           (koji.util.duration(start), koji.util.printList(suboptions.builds), tag))
                 else:
-                    print("Unsuccessfully waited %s for a new %s repo" %
+                    error("Unsuccessfully waited %s for a new %s repo" %
                           (koji.util.duration(start), tag))
-            return 1
+            error()
 
         time.sleep(options.poll_interval)
         last_repo = repo
@@ -7441,15 +7428,14 @@
     if not options.mine and not options.user:
         parser.error(_("Use --user or --mine."))
 
-    activate_session(session, goptions)
-
     if options.user:
+        ensure_connection(session)
         user = session.getUser(options.user)
         if not user:
-            print("User %s does not exist" % options.user)
-            return 1
+            error("User %s does not exist" % options.user)
         user_id = user['id']
     else:
+        activate_session(session, goptions)
         user_id = None
 
     mask = "%(id)6s %(tag)-25s %(package)-25s %(email)-20s %(success)-12s"
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji_cli/lib.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji_cli/lib.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji_cli/lib.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji_cli/lib.py	2020-09-07 15:44:50.000000000 +0800
@@ -18,12 +18,7 @@
 import koji
 # import parse_arches to current namespace for backward compatibility
 from koji import parse_arches
-from koji.util import to_list
-
-try:
-    import krbV
-except ImportError:  # pragma: no cover
-    krbV = None
+from koji.util import md5_constructor, to_list
 
 
 # for compatibility with plugins based on older version of lib
@@ -333,6 +328,7 @@
         sys.stdout.write(contents)
     else:
         sys.stdout.buffer.write(contents)
+        sys.stdout.buffer.flush()
 
 
 def watch_logs(session, tasklist, opts, poll_interval):
@@ -562,12 +558,13 @@
 
     download_file(url, path, quiet=quiet, noprogress=noprogress, filesize=rpm['size'])
 
-    # size
-    size = os.path.getsize(path)
-    if size != rpm['size']:
-        os.unlink(path)
-        error("Downloaded rpm %s size %d does not match db size %d, deleting" %
-              (path, size, rpm['size']))
+    # size - we have stored size only for unsigned copies
+    if not sigkey:
+        size = os.path.getsize(path)
+        if size != rpm['size']:
+            os.unlink(path)
+            error("Downloaded rpm %s size %d does not match db size %d, deleting" %
+                  (path, size, rpm['size']))
 
     # basic sanity
     try:
@@ -611,7 +608,7 @@
 
     # check checksum/checksum_type
     if archive['checksum_type'] == koji.CHECKSUM_TYPES['md5']:
-        hash = hashlib.md5()
+        hash = md5_constructor()
     elif archive['checksum_type'] == koji.CHECKSUM_TYPES['sha1']:
         hash = hashlib.sha1()
     elif archive['checksum_type'] == koji.CHECKSUM_TYPES['sha256']:
@@ -662,18 +659,6 @@
     sys.stderr.flush()
 
 
-def has_krb_creds():
-    if krbV is None:
-        return False
-    try:
-        ctx = krbV.default_context()
-        ccache = ctx.default_ccache()
-        ccache.principal()
-        return True
-    except krbV.Krb5Error:
-        return False
-
-
 def activate_session(session, options):
     """Test and login the session is applicable"""
     if isinstance(options, dict):
@@ -691,7 +676,7 @@
             and options.authtype is None:
         # authenticate using user/password
         session.login()
-    elif options.authtype == "kerberos" or has_krb_creds() and options.authtype is None:
+    elif options.authtype == "kerberos" or options.authtype is None:
         try:
             if getattr(options, 'keytab', None) and getattr(options, 'principal', None):
                 session.gssapi_login(principal=options.principal, keytab=options.keytab,
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/cli/koji.conf	2024-01-25 14:07:07.393060326 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/cli/koji.conf	2024-01-25 14:07:27.529061613 +0800
@@ -21,21 +21,12 @@
 authtype = kerberos
 krb_rdns = false
 
-;the service name of the principal being used by the hub
-;krbservice = host
-
 ;the principal to auth as for automated clients
 ;principal = client@EXAMPLE.COM
 
 ;the keytab to auth as for automated clients
 ;keytab = /etc/krb5.keytab
 
-;enable to lookup dns canonical hostname for krb auth
-;krb_canon_host = no
-
-;The realm of server principal. Using client's realm if not set
-;krb_server_realm = EXAMPLE.COM
-
 
 ;configuration for SSL authentication
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/schema.sql /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/schema.sql
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/schema.sql	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/schema.sql	2020-09-07 15:44:50.000000000 +0800
@@ -7,7 +7,7 @@
 -- in the event that the system clock rolls back, event_ids will retain proper sequencing
 CREATE TABLE events (
 	id SERIAL NOT NULL PRIMARY KEY,
-	time TIMESTAMP NOT NULL DEFAULT clock_timestamp()
+	time TIMESTAMPTZ NOT NULL DEFAULT clock_timestamp()
 ) WITHOUT OIDS;
 
 -- A function that creates an event and returns the id, used as DEFAULT value for versioned tables
@@ -18,7 +18,7 @@
 
 -- A convenience function for converting events to timestamps, useful for
 -- quick queries where you want to avoid JOINs.
-CREATE FUNCTION get_event_time(INTEGER) RETURNS TIMESTAMP AS '
+CREATE FUNCTION get_event_time(INTEGER) RETURNS TIMESTAMPTZ AS '
 	SELECT time FROM events WHERE id=$1;
 ' LANGUAGE SQL;
 
@@ -116,8 +116,8 @@
 	authtype INTEGER,
 	hostip VARCHAR(255),
 	callnum INTEGER,
-	start_time TIMESTAMP NOT NULL DEFAULT NOW(),
-	update_time TIMESTAMP NOT NULL DEFAULT NOW(),
+	start_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
+	update_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
 	exclusive BOOLEAN CHECK (exclusive),
 	CONSTRAINT no_exclusive_subsessions CHECK (
 		master IS NULL OR "exclusive" IS NULL),
@@ -126,7 +126,7 @@
 	UNIQUE (user_id,exclusive)
 ) WITHOUT OIDS;
 CREATE INDEX sessions_master ON sessions(master);
-CREATE INDEX sessions_active_and_recent ON sessions(expired, master, update_time) WHERE (expired IS NOT TRUE AND master IS NULL);
+CREATE INDEX sessions_active_and_recent ON sessions(expired, master, update_time) WHERE (expired = FALSE AND master IS NULL);
 CREATE INDEX sessions_expired ON sessions(expired);
 
 -- Channels are used to limit which tasks are run on which machines.
@@ -213,9 +213,9 @@
 CREATE TABLE task (
 	id SERIAL NOT NULL PRIMARY KEY,
 	state INTEGER,
-	create_time TIMESTAMP NOT NULL DEFAULT NOW(),
-	start_time TIMESTAMP,
-	completion_time TIMESTAMP,
+	create_time TIMESTAMPTZ NOT NULL DEFAULT NOW(),
+	start_time TIMESTAMPTZ,
+	completion_time TIMESTAMPTZ,
 	channel_id INTEGER NOT NULL REFERENCES channels(id),
 	host_id INTEGER REFERENCES host (id),
 	parent INTEGER REFERENCES task (id),
@@ -279,8 +279,8 @@
 	epoch INTEGER,
 	source TEXT,
 	create_event INTEGER NOT NULL REFERENCES events(id) DEFAULT get_event(),
-	start_time TIMESTAMP,
-	completion_time TIMESTAMP,
+	start_time TIMESTAMPTZ,
+	completion_time TIMESTAMPTZ,
 	state INTEGER NOT NULL,
 	task_id INTEGER REFERENCES task (id),
 	owner INTEGER NOT NULL REFERENCES users (id),
@@ -518,7 +518,7 @@
 CREATE TABLE build_reservations (
 	build_id INTEGER NOT NULL REFERENCES build(id),
 	token VARCHAR(64),
-        created TIMESTAMP NOT NULL,
+        created TIMESTAMPTZ NOT NULL,
 	PRIMARY KEY (build_id)
 ) WITHOUT OIDS;
 CREATE INDEX build_reservations_created ON build_reservations(created);
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/schema-upgrade-1.21-1.22.sql /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/schema-upgrade-1.21-1.22.sql
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/schema-upgrade-1.21-1.22.sql	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/schema-upgrade-1.21-1.22.sql	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,35 @@
+-- upgrade script to migrate the Koji database schema
+-- from version 1.20 to 1.21
+
+
+BEGIN;
+
+ALTER TABLE events ALTER COLUMN time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), time::timestamptz);
+ALTER TABLE sessions ALTER COLUMN start_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), start_time::timestamptz);
+ALTER TABLE sessions ALTER COLUMN update_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), update_time::timestamptz);
+ALTER TABLE task ALTER COLUMN create_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), create_time::timestamptz);
+ALTER TABLE task ALTER COLUMN start_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), start_time::timestamptz);
+ALTER TABLE task ALTER COLUMN completion_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), completion_time::timestamptz);
+ALTER TABLE build ALTER COLUMN start_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), start_time::timestamptz);
+ALTER TABLE build ALTER COLUMN completion_time TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), completion_time::timestamptz);
+ALTER TABLE build_reservations ALTER COLUMN created TYPE TIMESTAMPTZ USING
+    timezone(current_setting('TIMEZONE'), created::timestamptz);
+
+-- input type has to be specified on PostgreSQL 9.x
+DROP FUNCTION IF EXISTS get_event_time(INTEGER);
+CREATE FUNCTION get_event_time(INTEGER) RETURNS TIMESTAMPTZ AS '
+	SELECT time FROM events WHERE id=$1;
+' LANGUAGE SQL;
+
+DROP INDEX IF EXISTS sessions_active_and_recent;
+CREATE INDEX sessions_active_and_recent ON sessions(expired, master, update_time) WHERE (expired = FALSE AND master IS NULL);
+
+COMMIT;
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/access_controls.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/access_controls.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/access_controls.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/access_controls.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,60 @@
+===============
+Access Controls
+===============
+
+Koji is a complex system, so there are many places where some kind of access
+control is used. Here is the documentation hub for all the mechanisms in place.
+
+User/Builder Authentication
+===========================
+
+Users (and builders) are authenticated via one of the following mechanisms. Most
+preferred is GSSAPI/Kerberos authentication. Second best is authentication via
+SSL certificates. Mostly for testing environments we also support authenticating via
+username/password but it has its limitations which you should be aware of.
+
+Details can be found at :ref:`auth-config`
+
+Allowed SCMs
+============
+
+The ``allowed_scms`` option in builder's config controls which SCMs (Source Control Management
+systems) are allowed for building.
+We recommend that every production environment choose a limited set of trusted sources.
+
+Details of the ``allowed_scms`` option are covered under :ref:`scm-config`
+
+
+Hub Policies
+============
+
+Hub policies are a powerful way for administrators to control Koji's behavior.
+Koji's hub allows several different policies to be configured, some of which are
+access control policies.
+
+An access control policy is consulted by the hub to determine if an action should be allowed.
+Such policies return results of ``deny`` or ``allow``.
+
+Examples of access control polices are:
+
+* tag: control which tag operations are allowed
+* package_list: control which package list updates are allowed
+* cg_import: control which content generator imports are allowed
+* vm: control which windows build tasks are allowed
+* dist_repo: control which distRepo tasks are allowed
+* build_from_srpm: control whether builds from srpm are allowed
+* build_from_repo_id: control whether builds from user-specified repos ids are allowed
+
+Note that not all policies are access control policies.
+The ``channel`` and ``volume`` policies are used to control which channels tasks go to
+and which volumes build are stored on.
+
+For more details see :doc:`defining_hub_policies`.
+
+User Permissions
+================
+
+Every user can have a set of permissions which allow them to perform some actions directly.
+These permissions may be checked directly by the hub, or they may be referenced in policies.
+
+See :doc:`permissions` for details.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/conf.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/conf.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/conf.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/conf.py	2020-09-07 15:44:50.000000000 +0800
@@ -54,9 +54,9 @@
 # built documents.
 #
 # The short X.Y version.
-version = '1.21'
+version = '1.22'
 # The full version, including alpha/beta/rc tags.
-release = '1.21.1'
+release = '1.22.1'
 
 # The language for content autogenerated by Sphinx. Refer to documentation
 # for a list of supported languages.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/defining_hub_policies.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/defining_hub_policies.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/defining_hub_policies.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/defining_hub_policies.rst	2020-09-07 15:44:50.000000000 +0800
@@ -19,8 +19,11 @@
 * tag/untag/move operations are governed by tag locks/permissions
 * builds from srpm are only allowed for admins
 * builds from expired repos are only allowed for admins
-* only admins may modify package lists
+* only admins and users with ``tag`` permission may modify package lists
 * tasks go to the default channel
+* vm tasks need ``admin`` or ``win-admin`` permission
+* content generator import can be done by anyone
+* all content ends in ``DEFAULT`` volume.
 
 Configuration
 =============
@@ -53,6 +56,8 @@
 ending in -candidate.
 
 Getting a bit more complicated
+------------------------------
+
 The example above is very simple. The policy syntax also supports compound
 tests, negated tests, and nested tests. Consider the following example:
 
@@ -117,15 +122,15 @@
 ==================
 The system currently looks for the following policies
 
-* tag : checked during tag/untag/move operations
-* build_from_srpm : checked when a build from srpm (not an SCM reference) is
+* ``tag``: checked during tag/untag/move operations
+* ``build_from_srpm``: checked when a build from srpm (not an SCM reference) is
   requested.
-* build_from_repo_id : checked when a build from a specified repo id is
+* ``build_from_repo_id``: checked when a build from a specified repo id is
   requested
-* package_list : checked when the package list for a tag is modified
-* channel : consulted when a task is created
-* cg_import : consulted during content generator imports
-* volume : determine which volume a build should live on
+* ``package_list``: checked when the package list for a tag is modified
+* ``channel``: consulted when a task is created
+* ``cg_import``: consulted during content generator imports
+* ``volume``: determine which volume a build should live on
 
 These policies are set by assigning a rule set to the given name in the policy
 section.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/exporting_repositories.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/exporting_repositories.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/exporting_repositories.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/exporting_repositories.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,93 @@
+======================
+Exporting repositories
+======================
+
+Koji provides some *limited* features for exporting repositories of RPMs.
+Please note that Koji is a build system, not a repository manager, and these
+features are secondary.
+If you need more robust repository generation than Koji provides, then you may
+want to look into using `pungi <https://pagure.io/pungi/>`_.
+
+
+Koji's internal repositories
+============================
+
+Koji uses yum repositories as part of its build process for RPMs.
+These repositories are used by the builders to generate buildroots.
+Their generation is focused on that purpose, and they are not really suitable
+for export.
+However, they can be useful for simple cases.
+
+Koji's internal repositories can be accessed at
+``<topdir>/repos/<tag_name>/<repo_id>``
+For a given tag name, there will be multiple repo ids over time as tag content
+changes.
+The current repo for a given tag can be determined with a call to ``getRepo``.
+
+For convenience, Koji also maintains a "latest" symlink for each tag:
+``<topdir>/repos/<tag_name>/latest``.
+Please note that this symlink changes over time, which could break a yum transaction.
+
+
+Dist-repos
+==========
+
+The simplest way to create a distribution-ready repo is to use the ``koji dist-repo``
+command.
+It allows users with access to generate a more robust yum repository from the
+contents of a given tag.
+These repos differ from the internal ones in several key ways:
+
+* generation is user-controlled via the ``dist-repo`` command
+* supports using signed rpms
+* supports multilib
+* allows for more customized comps data
+* supports deltarpm generation
+* can split debuginfo into separate repos
+* can generate zchunk files
+
+**Access control**
+
+In order to use the ``dist-repo`` command, a user must satisfy one of the
+following:
+
+* have the ``dist-repo`` permission
+* have the ``admin`` permission
+* satisfy the requirements of the ``dist_repo`` policy
+
+For more information about hub policies, see :doc:`defining_hub_policies`.
+
+
+**Usage**
+
+The ``dist-repo`` command takes a tag name and one or more key ids for signing keys.
+
+..
+
+    koji dist-repo [options] <tag> <key_id> [<key_id> ...]
+
+The ``tag`` argument must be a valid tag name.
+The resulting repository will be based on the contents of that tag.
+Any valid tag will work, whether or not it has an associated target.
+
+Koji will attempt to find a signed copy for each rpm matching one
+of the given ``key_id`` arguments (searching in the order given).
+Normally, Koji will error if there is no matching signed copy for any of the
+rpms.
+This behavior can be modified with the ``--allow-missing-signatures`` or
+``--skip-missing-signatures`` options.
+The ``key_id`` argument may be omitted entirely if the
+``--allow-missing-signatures`` option is specified.
+
+Various features of repo generation (e.g. multilib support, delta rpms, or
+zchunk files) are controlled via command options.
+For a full list of options, see ``koji dist-repo --help``.
+
+
+Beyond Koji
+===========
+
+If you're aiming to have more control about repositories, varieties of
+distribution flavours, etc. use `pungi <https://pagure.io/pungi/>`_ which can
+create whole composes and which uses Koji for some of the subtasks.
+Pungi + koji is what Fedora currently uses for composes.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/external_repo_server_bootstrap.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/external_repo_server_bootstrap.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/external_repo_server_bootstrap.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/external_repo_server_bootstrap.rst	2020-09-07 15:44:50.000000000 +0800
@@ -38,6 +38,35 @@
   .. note::
     This uses $arch NOT $basearch
 
+  Koji behaves differently to the external repository based on which ``merge``
+  mode is set for that. Merge modes can be set via ``-m`` option and are as
+  follows:
+
+    ``koji``
+        Basic mode - koji expects, that that repo is complete and
+        doesn't contain mixed content. It means that only rpms from one SRPM can
+        be present in repo for given package.
+
+        It runs ``mergerepos_c --koji`` Repositories generated via ``dist-repo``
+        command (and all other repositories coming from koji` has these
+        properties.
+
+    ``bare``
+        It runs ``mergerepos_c --pkgorigins --all``. It includes all rpms with
+        same package name and architecture even if version or release is
+        different. This one is needed for modular repos. ``createrepo_c`` 0.14+
+        compiled with ``libmodule`` support needs to be installed on the
+        builder. Nevertheless, only the first rpm with identical NEVRA is
+        accepted.
+
+    ``simple``
+        It runs ``mergerepos_c --mode simple`` - we're least restrivtive with
+        this type of repo. Even packages with identical NEVRA are accepted in
+        such case. Simple mode is in ``createrepo_c`` suite from version 0.13.
+        Reasons to use this compared to ``bare`` mode is a) you have older
+        ``createrepo_c``, b) you really want to have all this identical NEVRAs
+        in the repo.
+
 * Create a build target that includes the tags you've already created. ::
 
     $ koji add-target dist-foo dist-foo-build
@@ -86,10 +115,12 @@
 Regenerating your repo
 ======================
 
-koji doesn't monitor external repositories for changes. new repositories
-will be generated when packages you build land in a tag that populates
-the buildroot or you manually regenerate the repository. you should be
-sure to regularly regenerate the repositories manually to pick up
+koji doesn't monitor external repositories for changes by default.
+Administrators can enable such bejaviour with setting ``check_external_repos =
+true`` in ``kojira.conf`` (for details see :doc:`utils`). If it is not
+enabled new repositories will be generated when packages you build land in a tag
+that populates the buildroot or you manually regenerate the repository. you
+should be sure to regularly regenerate the repositories manually to pick up
 updates.
 
 ::
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/index.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/index.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/index.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/index.rst	2020-09-07 15:44:50.000000000 +0800
@@ -22,11 +22,13 @@
     :maxdepth: 2
 
     HOWTO
+    access_controls
     permissions
     defining_hub_policies
     external_repo_server_bootstrap
     image_build
     winbuild
+    exporting_repositories
     tag_inheritance
     misc
     release_notes/release_notes
@@ -38,6 +40,7 @@
     database_howto
     kojid_conf
     using_the_koji_build_system
+    setting_rpm_macros
     profiles
     plugins
     volumes
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/kojid_conf.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/kojid_conf.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/kojid_conf.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/kojid_conf.rst	2020-09-07 15:44:50.000000000 +0800
@@ -242,27 +242,6 @@
    keytab=/etc/kojid/kojid.keytab
       Location of the keytab.
 
-   krb_canon_host=False
-      Kerberos authentication requires correct hostnames. If this option is
-      specified, dns is used to get the correct hostname for the
-      server (i.e. resolve any CNAMEs). Note, this option will not function
-      unless ``python-dns`` is installed.
-      The ``krb_rdns`` option takes a different approach.
-
-   krb_principal=None
-      Explicit principal used for login. If it is not specified, it is
-      created via ``host_principal_format``.
-
-   krb_rdns=True
-      Kerberos authentication needs correct hostname. If this option is
-      specified, ``socket.getfqdn(host)`` is used to determine reverse DNS
-      records. Otherwise, ``host`` is used directly. Playing with this option
-      can help you in some firewalled setups. ``krb_canon_host`` takes
-      precedence over this option and takes a different approach.
-
-   krbservice=host
-      The service name of the principal being used by the hub.
-
 
 SSL Authentication
 ^^^^^^^^^^^^^^^^^^
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/koji_structure1.svg /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/koji_structure1.svg
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/koji_structure1.svg	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/koji_structure1.svg	2020-09-07 15:44:50.000000000 +0800
@@ -318,23 +318,22 @@
          transform="translate(4.054306,-1.3042387)"
          id="g4145">
         <circle
-           transform="translate(27.033772,255.01099)"
            id="path3185"
            style="fill:#294172;fill-opacity:1;stroke:#3c6eb4;stroke-width:20;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
-           cx="502.20462"
-           cy="399.22089"
+           cx="533.29272"
+           cy="652.92761"
            r="90.269691" />
         <text
-           id="text4137"
-           y="671.17914"
-           x="525.05676"
-           style="font-style:normal;font-weight:normal;line-height:0%;font-family:sans-serif;letter-spacing:0px;word-spacing:0px;fill:#ffffff;fill-opacity:1;stroke:none;text-anchor:middle;text-align:center;"
-           xml:space="preserve"><tspan
-             y="671.17914"
-             x="482.45911"
-             id="tspan4139"
+           xml:space="preserve"
+           style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:40px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:'sans-serif, Bold';font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-variant-east-asian:normal;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:0px;word-spacing:0px;text-transform:none;writing-mode:lr-tb;direction:ltr;text-orientation:mixed;dominant-baseline:auto;baseline-shift:baseline;text-anchor:start;white-space:normal;shape-padding:0;opacity:1;vector-effect:none;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
+           x="532.35522"
+           y="667.83972"
+           id="text4141-2"><tspan
+             style="font-style:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:40px;line-height:1.25;font-family:sans-serif;-inkscape-font-specification:'sans-serif, Bold';font-variant-ligatures:normal;font-variant-position:normal;font-variant-caps:normal;font-variant-numeric:normal;font-variant-alternates:normal;font-variant-east-asian:normal;text-indent:0;text-align:center;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:0px;word-spacing:0px;text-transform:none;writing-mode:lr-tb;direction:ltr;text-orientation:mixed;dominant-baseline:auto;baseline-shift:baseline;text-anchor:middle;white-space:normal;shape-padding:0;vector-effect:none;fill:#ffffff;fill-opacity:1;stroke:none;stroke-width:1;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1"
+             id="tspan7286-2"
              sodipodi:role="line"
-             style="font-weight:bold;font-size:40px;line-height:1.25;font-family:sans-serif;fill:#ffffff;fill-opacity:1;text-anchor:middle;text-align:center;">Hub</tspan></text>
+             x="532.35522"
+             y="667.83972">Hub</tspan></text>
       </g>
     </g>
     <g
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrating_to_1.11.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrating_to_1.11.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrating_to_1.11.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrating_to_1.11.rst	2020-09-07 15:44:50.000000000 +0800
@@ -74,7 +74,6 @@
     * ``use_old_ssl``   : Use the old ssl code instead of python-requests
     * ``no_ssl_verify``   : Disable certificate verification for https connections
     * ``upload_blocksize`` : Override the blocksize for uploads
-    * ``krb_rdns``      : Use the fqdn of the server when authenticating via kerberos
 
 The ``ca`` option is deprecated and no longer required for ssl authentication (``serverca`` is still required).
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrating_to_1.22.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrating_to_1.22.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrating_to_1.22.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrating_to_1.22.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,68 @@
+Migrating to Koji 1.22
+======================
+
+You should consider the following changes when migrating to 1.22:
+
+DB Updates
+----------
+
+There are two minor schema changes in this release.
+
+* we've updated all ``timestamp`` fields to ``timestamptz`` with the return value of
+  ``get_event_time()`` function to avoid unexpected time offset caused by PostgreSQL timezone
+  setting (`PR#2237 <https://pagure.io/koji/pull-request/2237>`_).
+* we've updated the ``sessions_active_and_recent`` index for the ``session`` table for better
+  performance (`PR#2334 <https://pagure.io/koji/pull-request/2334>`_)
+
+As in previous releases, we provide a migration script that updates the database.
+
+::
+
+    # psql koji koji < /usr/share/doc/koji/docs/schema-upgrade-1.21-1.22.sql
+
+
+Dropped python2 support of hub and web
+--------------------------------------
+
+Python 2 was `sunset <https://www.python.org/doc/sunset-python-2/>`_ on January 1, 2020.
+Starting with Koji 1.22, hub and web will only support Python 3.
+The CLI, builder, and utils retain Python 2 support for now.
+For more information see: `PR#2218 <https://pagure.io/koji/pull-request/2218>`_
+
+.. _migration_krbv:
+
+Dropped krbV authentication support
+-----------------------------------
+
+We have dropped all the code related to the old python-krbV library, and are now only
+providing GSSAPI auth.
+For ``ClientSession`` objects, ``krb_login()`` is redirected to
+``gssapi_login()`` with a printed warning.
+Any code still calling ``krb_login()`` directly should be updated.
+
+The newer gssapi authentication mechanism requires either ``python-requests-kerberos`` or
+``python-requests-gssapi``.
+
+For more information see: `PR#2244 <https://pagure.io/koji/pull-request/2244>`_ and
+`PR#2280 <https://pagure.io/koji/pull-request/2280>`_
+
+As part of this, the ``krbservice`` and ``krb_rdns`` options have been dropped.
+These options were accepted in several configuration files and also as command
+line options (``--krbservice`` and ``--krb-rdns``) in the cli and some utility
+scripts.
+In the Web UI configuration (``web.conf``), these options were named
+``KrbService`` and ``KrbRDNS``.
+Users and admins should remove these options from their configuration.
+
+These options will cause an error if given on the command line.
+They will also cause an error if used in the following configuration files:
+
+* kojid.conf
+* kojira.conf
+
+
+Other changes
+-------------
+
+There are numerous other changes in 1.22 that should not have a direct impact on migration. For
+details see: :doc:`../release_notes/release_notes_1.22`
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrations.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrations.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/migrations/migrations.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/migrations/migrations.rst	2020-09-07 15:44:50.000000000 +0800
@@ -5,6 +5,7 @@
 .. toctree::
     :maxdepth: 1
 
+    migrating_to_1.22
     migrating_to_1.21
     migrating_to_1.20
     migrating_to_1.19
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/misc.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/misc.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/misc.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/misc.rst	2020-09-07 15:44:50.000000000 +0800
@@ -63,7 +63,7 @@
 
 ::
 
-    koji build [tag] [scheme]://[user]@[hostname]/[path/to/repository]?[path/to/project]#[revision]
+    koji build [target] [scheme]://[user]@[hostname]/[path/to/repository]?[path/to/project]#[revision]
 
 Note the division between repository path and project path. During setup
 of kojid, the allowed\_scms parameter is configured in
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/permissions.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/permissions.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/permissions.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/permissions.rst	2020-09-07 15:44:50.000000000 +0800
@@ -12,8 +12,10 @@
 Most of the built-in permissions control access to various hub calls.
 For example, the ``dist-repo`` permission allows access to create dist repos.
 
-Custom permissions can used as the required permission for a tag, or they can
-be referenced in :doc:`hub policies <defining_hub_policies>`.
+Custom permissions can used as the required permission for a tag, or they can be
+referenced in :doc:`hub policies <defining_hub_policies>`. Note, that you need
+to first understand the policy mechanism as most permissions are reflected in
+policy rules.
 
 
 Permission management
@@ -48,11 +50,15 @@
   We recommend granting the smallest effective permission.
 
 ``host``
-  Restricted permission for handling host-related management tasks.
+  Restricted admin permission for handling host-related management tasks.
 
 ``tag``
-  Permission for adding/deleting/editing tags.
-  Allows use of the tagBuildBypass and untagBuildBypass API calls.
+  Permission for adding/deleting/editing tags.  Allows use of the
+  ``tagBuildBypass`` and ``untagBuildBypass`` API calls also. Note, that this
+  name could be confusing as it is not related to tagging builds but to editing
+  tags themselves. Tagging builds (and adding/removing packages from package
+  lists for given tags) is handled by ``tag`` and ``package_list`` policies
+  respectively.
 
 ``target``
   Permission for adding/deleting/editing targets
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/plugins.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/plugins.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/plugins.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/plugins.rst	2020-09-07 15:44:50.000000000 +0800
@@ -7,7 +7,31 @@
 Runroot
 =======
 
-Plugin for running any command in buildroot.
+Plugin for running any command in buildroot. It has three parts as most of the
+others (hub, builder and CLI).
+
+Builder
+-------
+You enable plugin by editing ``/etc/kojid.conf`` by adding ``plugin = runroot``
+there. Plugin itself has separate configuration file on each builder located at
+``/etc/kojid/plugins/runroot.conf`` There is a sample configuration file
+with option descriptions installed.
+
+Hub
+---
+On the hub side ``Plugins = runroot_hub`` needs to be added to
+``/etc/koji-hub/hub.conf``. Note, that by default policy runroot tasks are
+assigned to ``runroot`` channel. As this is a plugin, we don't create it
+automatically. There are three options - create channel when adding first builder
+there via ``koji add-host-to-channel --new hostname runroot`` or by changing the
+default channel policy according to :doc:`defining_hub_policies`. Last option is
+to use ``--channel-override`` option in CLI to drive task to channel of choice.
+
+CLI
+---
+CLI is looking for available plugins every run, so it if it is installed, you'll
+see new command ``runroot`` with options described in its help. No config
+options are needed to enable it.
 
 Save Failed Tree
 ================
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes_1.22.1.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes_1.22.1.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes_1.22.1.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes_1.22.1.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,80 @@
+Koji 1.22.1 Release notes
+=========================
+
+All changes can be found at `pagure <https://pagure.io/koji/roadmap/1.22.1/>`_.
+Most important changes are listed here.
+
+Migrating from Koji 1.22
+------------------------
+
+No special actions are needed.
+
+Security Fixes
+--------------
+None
+
+Library changes
+---------------
+**Fix time formatting for timezone values**
+
+| PR: https://pagure.io/koji/pull-request/2409
+
+Some datetime values returned from hub were not properly parsed which resulted
+in failing CLI/web. We've replaced it with GMT timestamps internally, so we are
+more sure about their proper timezones.
+
+Hub Changes
+-----------
+**ensure that cursors are closed in QueryProcessor.iterate()**
+
+| PR: https://pagure.io/koji/pull-request/2436
+
+In some cases (especially ``hastag`` policy in combination with ``clone-tag``)
+there were allocated db cursors but not freed.
+
+**stricter config file permissions
+
+| PR: https://pagure.io/koji/pull-request/2474
+
+Hub and web config files contains sensitive values. We've made permissions
+stricter by default and encourage existing users to review theirs.
+
+Builder Changes
+---------------
+**builder: handle btrfs subvolumes in ApplianceTask**
+
+| PR: https://pagure.io/koji/pull-request/2365
+
+When using btrfs, the / mountpoint can be associated with a subvolume; if that's
+the case, return the btrfs partition as the root device. Note that this
+implementation assumes there's only one btrfs partition defined in kickstart.
+
+**fix extra-boot-args option**
+
+| PR: https://pagure.io/koji/pull-request/2452
+
+``bootloader append`` directive in kickstart wasn't properly passed to lorax.
+
+API Changes
+-----------
+**editTag: make compat perm_id option an alias for perm**
+
+| PR: https://pagure.io/koji/pull-request/2409
+
+It is a backward compatible change.
+
+
+Documentation Changes
+---------------------
+**setting rpm macros for build tags**
+
+| PR: https://pagure.io/koji/pull-request/2410
+
+
+**more info about permission system**
+
+| PR: https://pagure.io/koji/pull-request/2415
+
+**migration note regarding dropped krb configuration options**
+
+| PR: https://pagure.io/koji/pull-request/2427
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes_1.22.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes_1.22.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes_1.22.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes_1.22.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,530 @@
+Koji 1.22.0 Release notes
+=========================
+
+Important: python 2 support for hub and web have been dropped in koji 1.22,
+meanwhile CLI and builder are still supporting python2. Please prepare your hub
+and web service for python3 if you are going to upgrade them to koji 1.22.
+
+All changes can be found at `pagure <https://pagure.io/koji/roadmap/1.22/>`_.
+Most important changes are listed here.
+
+
+Migrating from Koji 1.21/1.21.1
+-------------------------------
+
+For details on migrating see :doc:`../migrations/migrating_to_1.22`
+
+
+Security Fixes
+--------------
+
+None
+
+
+Client Changes
+--------------
+
+**Output extra['rpm.macro.*'] to mock-config**
+
+| PR: https://pagure.io/koji/pull-request/2255
+
+The ``mock-config`` command honors 'rpm.macro.*' options in tag's extra config now.
+
+**--ca option has been deprecated**
+
+| PR: https://pagure.io/koji/pull-request/2182
+| PR: https://pagure.io/koji/pull-request/2246
+
+This option is deprecated for a while and not used internally. We added the
+deprecation warning and will finally remove it in 1.24.
+Notes: It is deprecated in koji-gc as well.
+
+**Flush stdout during watch-logs**
+
+| PR: https://pagure.io/koji/pull-request/2228
+
+Calling ``flush()`` immediately to display the output faster for PY3.
+
+**Do not try unnecessary authentication**
+
+| PR: https://pagure.io/koji/pull-request/2228
+
+In some CLI commands we used ``active_session()`` which will try its best to
+login, but it is not necessary. Now, we only ensure the connection without
+authentication.
+
+**Unify --debug options**
+
+| PR: https://pagure.io/koji/pull-request/2085
+
+The cli accepts a global ``--debug`` option before the command name.
+Some commands accepted a separate ``--debug`` option local to the command,
+which was confusing.
+Now these commands take their cue from the global option.
+The local option is still accepted for backwards compatibility, though
+it has been hidden in the help output.
+
+The following commands were affected:
+
+* ``prune-sigs``
+* ``list-signed``
+* ``list-tag-history``
+* ``list-history``
+
+**New option --wait for download-task**
+
+| PR: https://pagure.io/koji/pull-request/2346
+
+This is a UE enhancement to let the command be able to wait for the tasks to be
+finished as the same as the behavior of ``build`` command.
+
+**Fix image-build-indirection --wait**
+
+| PR: https://pagure.io/koji/pull-request/2347
+
+Previously, the ``image-build-indirection`` command accepted the ``--wait``
+option, but did not honor it.
+This oversight has been fixed.
+
+**Fix event option handling in clone-tag**
+
+| PR: https://pagure.io/koji/pull-request/2364
+
+The ``getTag()`` call for fetching source tag info in ``clone_tag`` didn't use event
+before. Now, it does.
+
+
+Library Changes
+---------------
+
+**Correctly identify "hostname doesn't match" errors**
+
+| PR: https://pagure.io/koji/pull-request/2266
+
+"hostname doesn't match" can be identified as a certificate error, so that
+client will not retry the request.
+
+**openRemoteFile retries and checks downloaded content**
+
+| PR: https://pagure.io/koji/pull-request/2254
+
+Sometimes we hit a problem with incorrect downloads caused by various
+malfunctions, like cache, filesystem, network, etc. Now, in
+``openRemoteFile``, we are going to
+
+* compare http's ``Content-Length`` header with the data we really downloaded
+* check the rpm header is valid if the file is an RPM
+* do 3 times retries if it fails
+
+
+API Changes
+-----------
+
+**filterResults and countAndFilterResults raise GenericError**
+
+| PR: https://pagure.io/koji/pull-request/2150
+
+API ``filterResults`` and ``countAndFilterResults`` now raise
+``koji.GenericError`` instead of ``xmlrpc.client.Fault`` when method's keyword
+argument is not expected.
+
+**Deprecation of host.getTask call**
+
+| PR: https://pagure.io/koji/pull-request/2238
+| PR: https://pagure.io/koji/pull-request/2264
+
+This host API will be finally removed in 1.23
+
+**Optimizations to the listBuildroots call**
+
+| PR: https://pagure.io/koji/pull-request/2299
+| PR: https://pagure.io/koji/pull-request/2303
+| PR: https://pagure.io/koji/pull-request/2301
+
+For the optimization purpose, the ``listBuildroots`` API call avoids
+unnecessary checks when the return will be empty.
+
+Additionally, the call avoids some table joins that can slow down the queries
+in some cases.
+As a result, the return value will no longer include the ``is_update`` field
+when querying by ``rpmID``.
+
+**Disable notifications by default in [un]tagBuildBypass calls**
+
+| PR: https://pagure.io/koji/issue/2292
+
+The ``notify`` option to the ``tagBuildBypass`` and ``untagBuildBypass`` now defaults to False.
+Tools that wish to generate email notifications will need to explicitly pass ``notify=True``.
+
+**Fix a typo in the error message of getChangelogEntries**
+
+| PR: https://pagure.io/koji/pull-request/2338
+
+**A new option - pattern for listTags call**
+
+| PR: https://pagure.io/koji/pull-request/2320
+| PR: https://pagure.io/koji/pull-request/2348
+| PR: https://pagure.io/koji/pull-request/2387
+
+This option is a GLOB match pattern for the name of tag. You can now directly
+call ``session.listTags(pattern='prefix-*-postfix')`` for example, to filter the
+result list on server side. The ``list-tags`` command tries its best to call it with
+``pattern`` as well.
+
+
+Builder Changes
+---------------
+
+**Koji now supports Mock's bootstrap chroot and image**
+
+| PR: https://pagure.io/koji/pull-request/2166
+| PR: https://pagure.io/koji/pull-request/2212
+| PR: https://pagure.io/koji/pull-request/2372
+| PR: https://pagure.io/koji/pull-request/2328
+
+Koji now supports Mock's ``--bootstrap-chroot`` and ``--bootstrap-image``
+options. See:
+
+* `Bootstrap chroot <https://github.com/rpm-software-management/mock/wiki/Feature-bootstrap>`_
+* `Container for bootstrap <https://github.com/rpm-software-management/mock/wiki/Feature-container-for-bootstrap>`_
+
+For the configuration on koji, please refer to :doc:`../using_the_koji_build_system`.
+The bootstrap buildroot will be pruned automatically by kojid as the same as the
+normal buildroot.
+
+**Pass bootloader append option to livemedia builds**
+
+| PR: https://pagure.io/koji/pull-request/2262
+
+Koji is now able to pass ``--extra-boot-args --append="bootloader --append"``
+options to ``livemedia-creator`` tool for livemedia builds.
+
+**Per-tag environment variables in Mock's buildroot**
+
+| PR: https://pagure.io/koji/pull-request/2064
+
+Now, you can set ``rpm.env.*`` in build tag's ``extra`` to specify environment
+variables in mock's buildroot. See :doc:`../using_the_koji_build_system`.
+
+**Support specific per-settings for Mock's sign plugin**
+
+| PR: https://pagure.io/koji/pull-request/1932
+| PR: https://pagure.io/koji/pull-request/2337
+
+We are now providing ``mock.plugin_conf.sign_enable``,
+``mock.plugin_conf.sign_opts.cmd`` and ``mock.plugin_conf.sign_opts.opts`` in
+build tag's ``extra`` for enabling and configuring the sign plugin of mock. For
+more details, see :doc:`../using_the_koji_build_system`.
+
+**Per-tag settings of yum's depsolver policy for Mock**
+
+| PR: https://pagure.io/koji/pull-request/1932
+
+``mock.yum.best=0/1`` is available in tag's extra config for the corresponding
+setting of mock config.
+
+**Use mergerepo_c for all merge modes**
+
+| PR: https://pagure.io/koji/pull-request/2376
+
+As ``mergerepo_c`` has supported ``simple`` mode since 0.13.0, we now use it on
+python3 or ``use_createrepo_c=True`` kojid for repo creation. And as `issues/213
+<https://github.com/rpm-software-management/createrepo_c/issues/213>`_ of
+``createrepo_c`` has been fixed in 0.15.11, we also append ``--arch-expand`` on
+demand. Therefore, koji are now able to use ``mergerepo_c`` for all 3 modes: koji,
+simple, bare. Nevertheless, we are still providing ``mergerepos`` scripts for
+python2.
+
+**Turn off dnf_warning in mock.cfg**
+
+| PR: https://pagure.io/koji/pull-request/2353
+
+In `PR #1595 <https://pagure.io/koji/pull-request/1595>`_, we set
+``dnf_warning=True`` when we started to add this configuration. But since Mock
+2.0, ``bootstrap_chroot`` is set to ``True`` by default, we need to set
+``dnf_warning`` to ``False`` accordingly. For the details, please refer to
+`issue #2026 <https://pagure.io/koji/issue/2026>`_.
+
+**BuildSRPMFromSCMTask: Support auto-selecting a matching specfile name**
+
+| PR: https://pagure.io/koji/pull-request/2257
+
+When building SRPM from SCM, if there are more than one ``*.spec`` found in root
+directory, or ``support_rpm_source_layout=yes`` in ``/etc/kojid/kojid.conf`` and
+there are more than one ``*.spec`` found in ``SPECS`` directory, the builder is
+going to use the specfile with the SCM repo's name in root or ``SPECS`` dir.
+
+**Pass buildroot to preSCMCheckout and postSCMCheckout where applicable**
+
+| PR: https://pagure.io/koji/pull-request/2123
+
+The ``preSCMCheckout`` and ``postSCMCheckout`` callbacks for kojid now include
+a ``buildroot`` field that provides access to the internal ``BuildRoot``
+object, when such an object is available.
+This change impacts ``BuildMavenTask``, ``WrapperRPMTask``, ``ImageTask`` and
+``BuildSRPMfromRPMTask``.
+The current exceptions are ``OzImageTask`` and ``BuildIndirectionImageTask``,
+which do not use this type of buildroot.
+
+Any plugins that use this field should be aware that the behavior of this class
+may change across releases.
+
+
+Web UI Changes
+--------------
+
+**A new repoinfo page**
+
+| PR: https://pagure.io/koji/pull-request/2193
+
+The new page displays basic information of a normal repo, linked by the repo id
+on taskinfo and buildrootinfo page.
+
+
+Win Builder Changes
+-------------------
+
+**Clone mac address via xml**
+
+| PR: https://pagure.io/koji/pull-request/2290
+
+We've hit a problem that while VM is being cloned, the mac address cloning is
+refused and a new one is assigned instead. We are now using the xml file for mac
+address setup.
+
+
+System Changes
+--------------
+
+**Drop python2 support for hub and web**
+
+| PR: https://pagure.io/koji/pull-request/2218
+| PR: https://pagure.io/koji/pull-request/2342
+
+Finally, python2 support for hub and web have been dropped in this release.
+
+**Drop krbV support**
+
+| PR: https://pagure.io/koji/pull-request/2244
+| PR: https://pagure.io/koji/pull-request/2151
+
+``krbV`` support has been finally removed from this release. For more information, please refer to
+:ref:`migration_krbv`.
+
+**Use requests_gssapi for GSSAPI authentication**
+
+| PR: https://pagure.io/koji/pull-request/2244
+| PR: https://pagure.io/koji/pull-request/2401
+
+``requests_gssapi`` is supported in this release. In all of the components we provide, we now try to
+use ``request_gssapi`` at first, if it isn't installed, fallback to ``requests_kerberos`` then.
+
+**DB: Use timestamps with timezone**
+
+| PR: https://pagure.io/koji/pull-request/2237
+| PR: https://pagure.io/koji/pull-request/2366
+
+We have updated all our timestamp fields to include timezone.
+This prevents time inconsistencies when the database has a timezone setting
+other than UTC.
+
+**DB: Update sessions_active_and_recent index**
+
+| PR: https://pagure.io/koji/pull-request/2334
+
+We have adjusted the ``sessions_active_and_recent`` index so that the planner
+will actually use it.
+
+**Log tracebacks for multicall**
+
+| PR: https://pagure.io/koji/pull-request/2225
+
+The exceptions inside multicall were not logged before. These tracebacks will
+benefit us for debugging purpose, as we are often using multicall more and more.
+
+**Fix build_notification crashing caused by recipients check**
+
+| PR: https://pagure.io/koji/pull-request/2308
+| PR: https://pagure.io/koji/pull-request/2309
+
+This change fixes an inconsistency in the function where it would return
+``None`` instead of an empty list as expected.
+
+**Allow packagelist changes with 'tag' permission by the default policy**
+
+| PR: https://pagure.io/koji/pull-request/2275
+
+The ``tag`` permission was introduced in version 1.18 as part of an effort to
+make admin permissions more granular.
+This permission now grants access to make package list changes for tags
+via the default ``package_list`` policy.
+
+**Improve race condition for getNextRelease call and images**
+
+| PR: https://pagure.io/koji/pull-request/2263
+
+It was possible to meet the race condition in the old logic of image building.
+We are now calling ``get_next_release()`` in the ``initImageBuild`` call if there is
+ino release passed in, rather than calling ``getNextRelease`` in the ImageBuild
+task individually. This would notably reduce the possibility of the race
+condition.
+
+**Replace MD5 with SHA-256 in most places**
+
+| PR: https://pagure.io/koji/pull-request/2317
+
+Koji should work on the FIPS enabled system where MD5 is disabled for security
+reason. We are now using SHA-256 to replace MD5 for web token and file uploading,
+but only keeping MD5 for RPM file processing.
+
+**Remove "GssapiSSLonly Off" option**
+
+| PR: https://pagure.io/koji/pull-request/2162
+
+We have removed the ``GssapiSSLonly`` option from our example httpd
+configuration.
+It was previously shown in the example, set to ``Off``.
+This is also the default in mod_auth_gssapi, but *it is not the recommended
+setting*.
+For more information, see `mod_auth_gssapi doc
+<https://github.com/gssapi/mod_auth_gssapi#gssapisslonly>`_
+
+**Remove "GssapiLocalName Off" option**
+
+| PR: https://pagure.io/koji/pull-request/2351
+| PR: https://pagure.io/koji/pull-request/2358
+
+We have also removed the ``GssapiLocalName`` option from our example httpd
+configurations.
+Similar to the above, our example setting was already the default.
+
+**Provide task-based data to volume policy**
+
+| PR: https://pagure.io/koji/pull-request/2306
+
+For builds with associated tasks, more information is now available to the volume policy.
+In particular, the ``buildtag`` policy test should work for such builds.
+
+Note that some builds (e.g. content generator builds and other imported builds) do not
+have associated tasks.
+
+For more information on hub policies, see :doc:`../defining_hub_policies`.
+
+**Honor volume policy in host.importImage**
+
+| PR: https://pagure.io/koji/pull-request/2359
+
+This fixes a bug where an underlying function as ignoring the volume policy result.
+
+
+Plugins
+-------
+
+sidetag
+.......
+
+**listSideTags also returns user info**
+
+| PR: https://pagure.io/koji/pull-request/2132
+
+We now provide an easier way to find the owner of sidetags
+
+**Give koji admins the permission to operate sidetags**
+
+| PR: https://pagure.io/koji/pull-request/2322
+
+
+Users with the ``admin`` permission can now manage sidetags even if they are
+not their own.
+
+**Fix is_sidetag_owner and is_sidetag policy tests**
+
+| PR: https://pagure.io/koji/pull-request/2326
+
+These policy tests would previously always return a null result.
+Now they return the correct one.
+
+
+Utilities Changes
+-----------------
+
+Garbage Collector
+.................
+
+**Systemd units for koji-gc**
+
+| PR: https://pagure.io/koji/pull-request/2199
+
+The systemd units(service and timer) are now installed by default.
+
+**Allow specifying CC and BCC address for email notifications**
+
+| PR: https://pagure.io/koji/pull-request/2195
+| PR: https://pagure.io/koji/pull-request/2278
+
+New options ``cc_addr``, ``bcc_addr`` in config file, or CLI options
+``--cc-addr``, ``--bcc-addr`` are available now.
+
+**Set smtp_host to localhost by default**
+
+| PR: https://pagure.io/koji/pull-request/2253
+
+The previous the default value was ``None``, which would cause failures
+if notifications were enabled.
+
+Kojira
+......
+
+**New option: queue_file for task queue monitoring**
+
+| PR: https://pagure.io/koji/pull-request/2024
+
+With a writable filepath specified, the state information will be saved into
+this file in each cycle. For more information, please refer to
+:ref:`utils-kojira`.
+
+**Use mtime of repo directory to determine the age**
+
+| PR: https://pagure.io/koji/pull-request/2154
+
+Kojira should now do a better job of determining the age of a repo at startup.
+
+**Fix logic detecting directories for pruneLocalRepos**
+
+| PR: https://pagure.io/koji/pull-request/2323
+
+The condition was opposite before.
+
+**Totally drop SysV support**
+
+| PR: https://pagure.io/koji/issue/2171
+
+Thus, we won't provide kojira service on <=EL6 platform.
+
+**Repo deletion within thread**
+
+| PR: https://pagure.io/koji/pull-request/2340
+| PR: https://pagure.io/koji/pull-request/2397
+
+Kojira are now able to delete repos in a separated thread.
+The old ``delete_batch_size`` option is no longer used and has been removed.
+
+koji-sidetag-cleanup
+....................
+
+**Set the shebang to /usr/bin/python2 on RHEL<=7**
+
+| PR: https://pagure.io/koji/pull-request/2209
+
+Otherwise, the build will fail on RHEL<=7.
+
+koji-sweep-db
+.............
+
+**use "Type=oneshot" for systemd**
+
+| PR: https://pagure.io/koji/pull-request/2187
+
+``oneshot`` is the appropriate choice for periodic cleanup scripts, see `systemd
+docs
+<https://www.freedesktop.org/software/systemd/man/systemd.service.html#Type=>`_.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/release_notes/release_notes.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/release_notes/release_notes.rst	2020-09-07 15:44:50.000000000 +0800
@@ -5,6 +5,8 @@
 .. toctree::
     :maxdepth: 1
 
+    release_notes_1.22.1
+    release_notes_1.22
     release_notes_1.21.1
     release_notes_1.21
     release_notes_1.20.1
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/server_howto.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/server_howto.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/server_howto.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/server_howto.rst	2020-09-07 15:44:50.000000000 +0800
@@ -383,11 +383,16 @@
 Initialize PostgreSQL DB:
 -------------------------
 
-The following commands will initialize PostgreSQL and will start the database service
-
-::
+Initialize PostgreSQL::
 
+    # On RHEL 7:
     root@localhost$ postgresql-setup initdb
+
+    # Or RHEL 8 and Fedora:
+    root@localhost$ postgresql-setup --initdb --unit postgresql
+
+And start the database service::
+
     root@localhost$ systemctl enable postgresql --now
 
 Setup User Accounts:
@@ -437,53 +442,87 @@
     This will ensure all objects are owned by the koji database user. Upgrades
     may be difficult if this was not done correctly.
 
-Authorize Koji-web and Koji-hub resources
------------------------------------------
+Authorize Koji-hub to PostgreSQL
+--------------------------------
 
-.. note::
-    In this example, Koji-web and Koji-hub are running on localhost.
+Koji-hub is the only service that needs direct access to the database. Every
+other Koji service talks with the koji-hub via the API calls.
 
-``/var/lib/pgsql/data/pg_hba.conf``
-    These settings need to be valid and inline with other services
-    configurations. Please note, the first matching auth line is used so this
-    line must be above any other potential matches. Add:
+Example: Everything on localhost
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
-    ::
+In this example, the koji-hub Apache server is running on the same system
+as the PostgreSQL server, so we can use local-only connections over a Unix
+domain socket.
 
-        #TYPE   DATABASE    USER    CIDR-ADDRESS      METHOD
-        host    koji        koji    127.0.0.1/32      trust
-        host    koji        koji     ::1/128          trust
+#. Edit ``/var/lib/pgsql/data/pg_hba.conf`` to have the following
+   contents::
 
-    It may also be necessary to add an entry for your machine's external IP
-    address:
+       #TYPE   DATABASE    USER    CIDR-ADDRESS      METHOD
+       local   koji        koji                       trust
+       local   all         postgres                   peer
 
-    ::
+   Explanation:
 
-        host    koji        koji    $IP_ADDRESS/32    trust
+   * The ``local`` connection type means the postgres connection uses a local
+     Unix socket, so PostgreSQL is not exposed over TCP/IP at all.
 
-    You can also use UNIX socket access. The DBHost variable must be unset to
-    use this method. Add:
+   * The local ``koji`` user should only have access to the ``koji`` database.
+     The local ``postgres`` user will have access to everything (in order to
+     create the ``koji`` database and user.)
 
-    ::
+   * The ``CIDR-ADDRESS`` column is blank, because this example only uses
+     local Unix sockets.
 
-        local   koji        apache                            trust
-        local   koji        koji                              trust
+   * The `trust <https://www.postgresql.org/docs/current/auth-trust.html>`_
+     method means that PosgreSQL will permit any connections from any local
+     user for this username. We set this for the ``koji`` user because Apache
+     httpd runs as the ``apache`` system user rather than the ``koji`` user
+     when it connects to the Unix socket. ``trust`` is not secure on a
+     multi-user system, but it is fine for a single-purpose Koji system.
 
-    .. note::
-        To enforce password based logins to the database, change ``trust`` to ``md5``.
+     The `peer <https://www.postgresql.org/docs/current/auth-peer.html>`_
+     method means that PostgreSQL will obtain the client's operating system
+     username and use that as the allowed username. This is safer than
+     ``trust`` because only the local ``postgres`` system user will be able to
+     access PostgreSQL with this level of access.
 
-    ::
+#. Edit ``/var/lib/pgsql/data/postgresql.conf`` and set ``listen_addresses``
+   to prevent TCP/IP access entirely::
 
-        #TYPE   DATABASE    USER    CIDR-ADDRESS      METHOD
-        host    koji        koji    127.0.0.1/32      md5
-        host    koji        koji     ::1/128          md5
-        host    koji        koji    $IP_ADDRESS/32    md5
-
-Make auth changes live:
-You must reload the PostgreSQL configuration for these changes to become
-active.
+       listen_addresses = ''
 
-::
+Example: Separate PostgreSQL and Apache servers
+^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
+
+In this example, the PostgreSQL server "db.example.com" is running on one
+host, and the koji-hub Apache server talks to this PostgreSQL server over the
+network. The koji-hub Apache server has an IP address of 192.0.2.1 (IPv4) and
+2001:db8::1 (IPv6), so we authorize connections from both addresses for the
+``koji`` user account.
+
+#. Edit ``/var/lib/pgsql/data/pg_hba.conf`` to have the following contents::
+
+       #TYPE   DATABASE    USER    CIDR-ADDRESS      METHOD
+       host    koji        koji    192.0.2.1/32       md5
+       host    koji        koji    2001:db8::1/128    md5
+       local   all         postgres                   peer
+
+   The ``md5`` authentication mechanism is available in PostgreSQL 9 (RHEL 7).
+   On PostgreSQL 10 (RHEL 8+ and Fedora), use the stronger ``scram-sha-256``
+   mechanism instead, and set ``password_encryption = scram-sha-256`` in
+   ``postgresql.conf``.
+
+#. Edit ``/var/lib/pgsql/data/postgresql.conf`` and set ``listen_addresses``
+   so that PostgreSQL will listen on all network interfaces::
+
+    listen_addresses = '*'
+
+Activating changes
+^^^^^^^^^^^^^^^^^^
+
+You must reload the PostgreSQL daemon to activate changes to
+``postgresql.conf`` or ``pg_hba.conf``::
 
     root@localhost$ systemctl reload postgresql
 
@@ -509,7 +548,7 @@
 handling is done by cron, but can be substituted by anything else (Ansible
 tower, etc.)
 
-Script is by default installed on hub as `/usr/sbin/koji-sweepd-db`. On systemd
+Script is by default installed on hub as `/usr/sbin/koji-sweep-db`. On systemd
 systems it also has corresponding `koji-sweep-db` service and timer. Note, that
 timer is not enabled by default, so you need to run usual `systemctl` commands:
 
@@ -585,11 +624,9 @@
     koji=> insert into user_perms (user_id, perm_id, creator_id) values (<id of user inserted above>, 1, <id of user inserted above>);
 
 .. note::
-    If you do not know the ID of the admin user, you can get the ID by running the query:
+    If you do not know the ID of the admin user, you can get the ID by running the query::
 
-::
-
-    koji=> select * from users;
+      koji=> select * from users;
 
 You can't actually log in and perform any actions until kojihub is up and
 running in your web server.  In order to get to that point you still need to
@@ -597,23 +634,6 @@
 to access koji via a web browser, you will also need to get kojiweb up and
 running.
 
-Set Database To Listen On All Addresses
-^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
-The ``koji-hub`` service will attempt to connect to the database server in the
-manner you configure.  If you use the system hostname, then the database will
-need to be available on that address.  To configure this please perform the
-following:
-
-#.  Edit ``/var/lib/pgsql/data/postgresql.conf``
-#.  Set ``listen_address`` so postgres will listen on all interfaces:
-    ::
-
-        listen_addresses = '*'
-#.  Reload the postgresql service:
-    ::
-
-        systemctl restart postgresql
-
 Koji Hub
 ========
 
@@ -628,6 +648,7 @@
 -------------------
 
 * ``/etc/koji-hub/hub.conf``
+* ``/etc/koji-hub/hub.conf.d/*``
 * ``/etc/httpd/conf/httpd.conf``
 * ``/etc/httpd/conf.d/kojihub.conf``
 * ``/etc/httpd/conf.d/ssl.conf`` (when using ssl auth)
@@ -702,7 +723,8 @@
 
 The part that matters to Koji is this --
 if you are using SSL authentication, then the CA certificate you configure
-here should be the same one that you use to issue user certificates.
+in ``SSLCACertificateFile`` here should be the same one that you use to issue
+user certificates.
 
 ::
 
@@ -724,14 +746,36 @@
 
     DBName = koji
     DBUser = koji
-    DBPass = mypassword
-    DBHost = db.example.com
+
+    # If PostgreSQL is on another host, set that here:
+    #DBHost = db.example.com
+    #DBPass = mypassword
+
     KojiDir = /mnt/koji
     LoginCreatesUser = On
     KojiWebURL = http://kojiweb.example.com/koji
 
-If kojihub is running on the same server as the koji db, then DBHost should be
-set to 127.0.0.1
+If koji-hub is running on the same server as PostgreSQL and you are using Unix
+sockets to query the database, omit the ``DBHost``, ``DBPort``, and ``DBPass``
+variables. Do not set ``DBHost`` to ``localhost``, or else PostgreSQL will
+attempt to connect with TCP through ``127.0.0.1`` instead of using the Unix
+socket.
+
+If koji-hub is running on a separate server from PostgreSQL, you must set the
+``DBHost`` and ``DBPass`` options. You must also configure SELinux to allow
+Apache to connect to the remote PostgreSQL server::
+
+    root@localhost$ setsebool -P httpd_can_network_connect_db=1
+
+Note, that database connection parameters (password) are sensitive values.
+Config is installed by default with 0640 root/apache file permissions. If you're
+not installing hub from rpm double-check these permissions.
+
+Furthermore, you can install any config file in ``/etc/koji-hub/hub.conf.d``
+directory. These files are read *at first* and main config is allowed to
+override all these values. So, you can use e.g.
+``/etc/koji-hub/hub.conf.d/secret.conf`` for sensitive values. Typical usecase
+for separate config is :doc:`policy <defining_hub_policies>` configuration file.
 
 Authentication Configuration
 ----------------------------
@@ -796,21 +840,16 @@
 SELinux Configuration
 ^^^^^^^^^^^^^^^^^^^^^
 
-If running in Enforcing mode
-    * you will need to allow apache to connect to the postgreSQL server
-    * you will need to allow apache to write some files to disk
+Configure SELinux to allow Apache write access to ``/mnt/koji``::
 
-Even if you are not currently running in Enforcing mode, it is still
-recommended to configure the SELinux settings so that there are no future
-issues with SELinux if Enforcing mode is enabled later on.
+    root@localhost$ setsebool -P allow_httpd_anon_write=1
+    root@localhost$ semanage fcontext -a -t public_content_rw_t "/mnt/koji(/.*)?"
+    root@localhost$ restorecon -r -v /mnt/koji
 
-::
-
-    root@localhost$ setsebool -P httpd_can_network_connect_db=1 allow_httpd_anon_write=1
-    root@localhost$ chcon -R -t public_content_rw_t /mnt/koji/*
+If you've placed ``/mnt/koji`` on an NFS share, enable a separate boolean to
+allow Apache access to NFS::
 
-If you've placed ``/mnt/koji`` on an NFS share you may also need to set
-``httpd_use_nfs``.
+    root@localhost$ setsebool -P httpd_use_nfs=1
 
 Check Your Configuration
 ^^^^^^^^^^^^^^^^^^^^^^^^
@@ -855,11 +894,6 @@
     ;path to the koji top directory
     topdir = /mnt/koji
 
-    ; configuration for Kerberos authentication
-
-    ;the service name of the principal being used by the hub
-    ;krbservice = host
-
     ; configuration for SSL athentication
 
     ;client certificate
@@ -891,6 +925,7 @@
 * ``/etc/httpd/conf.d/kojiweb.conf``
 * ``/etc/httpd/conf.d/ssl.conf``
 * ``/etc/kojiweb/web.conf``
+* ``/etc/kojiweb/web.conf.d/*``
 
 Install Koji-Web
 ----------------
@@ -931,7 +966,8 @@
 of Koji
 
 If you are using SSL authentication, then the CA certificate you configure
-here should be the same one that you use to issue user certificates.
+in ``SSLCACertificateFile`` here should be the same one that you use to issue
+user certificates.
 
 ::
 
@@ -949,7 +985,14 @@
 You will also need to tell kojiweb where it can find the SSL certificates for
 each of these components. If you are using SSL authentication, the "WebCert"
 line below must contain both the public **and** private key. You will also want
-to change the last line in the example below to a unique password.
+to change the last line in the example below to a unique password. Also check
+the file permissions (due to Secret value) if you're not installing koji web
+from rpm (0640, root/apache by default).
+
+Furthermore, you can install any config file in ``/etc/kojiweb/web.conf.d``
+directory. These files are read *at first* and main config is allowed to
+override all these values. So, you can use e.g.
+``/etc/kojiweb/web.conf.d/secret.conf`` for sensitive values.
 
 ::
 
@@ -1195,6 +1238,10 @@
 
 The explicit block syntax was added in version 1.13.0.
 
+SCM checkout can contain multiple spec files (checkouted or created by
+``source_cmd``). In such case spec file named same as a checkout directory will
+be selected.
+
 
 Add the host to the createrepo channel
 --------------------------------------
@@ -1249,7 +1296,6 @@
 -------------------
 
 * ``/etc/kojira/kojira.conf`` - Kojira Daemon Configuration
-* ``/etc/sysconfig/kojira`` - Kojira Daemon Switches
 
 Install kojira
 ---------------
@@ -1287,6 +1333,9 @@
 * It is not recommended that kojira run on the builders, as builders only
   should require read-only access to ``/mnt/koji``.
 
+
+.. _auth-config:
+
 Authentication Configuration
 ----------------------------
 
@@ -1311,11 +1360,13 @@
 
 ::
 
-    ; For Kerberos authentication
-    ; the principal to connect with
-    principal=koji/kojira@EXAMPLE.COM
-    ; The location of the keytab for the principal above
-    keytab=/etc/kojira.keytab
+    ;configuration for Kerberos authentication
+
+    ;the kerberos principal to use
+    ;principal = kojira@EXAMPLE.COM
+
+    ;location of the keytab
+    ;keytab = /etc/kojira/kojira.keytab
 
 ``/etc/sysconfig/kojira``
     The local user kojira runs as needs to be able to read and write to
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/setting_rpm_macros.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/setting_rpm_macros.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/setting_rpm_macros.rst	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/setting_rpm_macros.rst	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,112 @@
+=============================
+Setting RPM Macros for Builds
+=============================
+
+The values of RPM macros can have significant effects on the results of RPM builds.
+Note that the subject of RPM macros is complicated and goes well beyond Koji.
+For the purposes of this document, we assume the reader is familiar with the basic concepts.
+
+Further reading:
+
+* https://rpm-guide.readthedocs.io/en/latest/rpm-guide.html#rpm-macros
+* https://rpm.org/user_doc/macros.html
+* https://rpm-packaging-guide.github.io/#more-on-macros
+
+When Koji builds RPMs, it does so by running ``rpmbuild`` in a controlled build environment.
+Inside that environment, ``rpm`` can pull macro values from multiple sources.
+
+There are two basic ways to set rpm macro values for builds in Koji:
+
+* using a build that places an rpmmacros file in the build environment
+* setting ``rpm.macro.`` values for the build tag
+
+
+Setting rpm macros with a build
+===============================
+
+Prior to Koji 1.18, this was the only way to set rpm macros in Koji.
+This method is still valid, and in some cases preferred.
+However, values set this way can be overridden my ``rpm.macro.*`` values set for the build tag.
+
+In short, this method involves:
+
+* creating an rpm build that places an rpm macros file in the buildroot
+* requiring this build to be installed in the build environment
+
+This might be a very simple build that only provides a single rpm macros file.
+Such files will be read by ``rpm`` when they are installed into ``/etc/rpm`` or
+``/usr/lib/rpm/macros.d/``.
+
+There are many examples of this.
+In Fedora, there are numerous packages like ``python-rpm-macros``, ``perl-macros``, and
+``systemd-rpm-macros``.
+Other packages might package such macro files alongside other content.
+The ``ansible`` package is currently an example of this.
+
+*In order for such a build to affect the build environment, it must be installed there.*
+First the build needs to be in the build tag, either tagged there directly or indirectly via 
+inheritance.
+Second, the package needs to be either part of the base buildroot install, or pulled in via
+build requirements.
+
+Often, you want to make sure these macros affect *all* builds for a tag.
+This means making your macros build part of the base install for the buildroot.
+This can be done by adding the rpm name to the ``build`` group for the tag.
+
+::
+
+$ koji add-group-pkg f33-build build my-custom-rpm-macros
+
+If your macro also needs to be available when building source rpms (e.g. ``%dist``), then you'll
+also want to add it to the the ``srpm-build`` group.
+
+::
+
+$ koji add-group-pkg f33-build build my-custom-rpm-macros
+
+
+Setting rpm.macro values
+========================
+
+(this feature was added in :doc:`Koji 1.18 <release_notes/release_notes_1.18>`)
+
+As a convenience, Koji will honor any ``rpm.macro.NAME`` values in the "tag extra" settings for
+a given build tag.
+These values can be set by tag administrators with the ``edit-tag`` command and viewed with
+the ``taginfo`` command.
+For example, to set the ``dist`` macro value, you could use a command like the following:
+
+::
+
+$ koji edit-tag f33-build -x rpm.macro.dist=.fc33
+
+This will cause Koji to pass this value to ``mock`` when constructing the buildroot.
+These values are placed in the mock configuration file.
+
+**Use case**
+
+This feature is best used for macros with simple values that need to be managed by tag administrators.
+The canonical example is managing the ``%dist`` macro, but other simple macros would also make sense.
+
+We do not recommend setting complicated macros in this way.
+E.g. macros that contain complex expansions, or those that are central to the rpmbuild process.
+
+
+**Inheritance**
+
+In Koji, the "tag extra" values are inherited.
+So, by default, any tag a given build tag inherits from will contribute its settings.
+The exception is if the inheritance line has the ``noconfig`` flag set.
+
+
+**Priority over macros builds**
+
+Koji places these macro values in the ``mock`` configuration file in for the buildroot.
+The ``mock`` program places them in the ``.rpmmacros`` file in the build directory, which causes
+them to take priority over other macros defined in the build environment.
+
+In short, this method for setting rpm macros "wins".
+
+This can be important when other build tags inherit from yours.
+If the child tag has its own macros build, but inherits your ``rpm.macro.*`` setting, then the
+inherited value will win.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/using_the_koji_build_system.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/using_the_koji_build_system.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/using_the_koji_build_system.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/using_the_koji_build_system.rst	2020-09-07 15:44:50.000000000 +0800
@@ -389,11 +389,70 @@
     koji edit-tag dnf-fedora-tag -x mock.package_manager=dnf
 
 
-* `mock.package_manager` - If this is set, it will override mock's default
-  package manager. Typically used with `yum` or `dnf` values.
-* `mock.new_chroot` - 0/1 value. If it is set, `--new-chroot` or
+* ``mock.package_manager`` - If this is set, it will override mock's default
+  package manager. Typically used with ``yum`` or ``dnf`` values.
+* ``mock.new_chroot`` - 0/1 value. If it is set, ``--new-chroot`` or
   `--old-chroot` option is appended to any mock call. If it is not set,
   mock's default behavior is used.
+* ``mock.use_bootstrap`` - 0/1 value. If it is set, ``--bootstrap-chroot``
+  is appended to the mock init call.  This tells mock to build in two stages,
+  using chroot rpm for creating the build chroot. If it is not set, mock's
+  default behaviour is used. (Note, that it changed in mock `1.4.1
+  <https://github.com/rpm-software-management/mock/wiki/Feature-bootstrap>`_.
+  Note, that it is not turn on by default by koji, as it is often not needed and
+  it consumes additional resources (larger buildroot, downloading more data).
+* ``mock.bootstrap_image`` - set to name of image, which can builder's podman
+  download (e.g. ``fedora:32``). See mock's `doc
+  <https://github.com/rpm-software-management/mock/wiki/Feature-container-for-bootstrap>`_
+  before using this. You could need it, but do it with following
+  recommendations:
+
+  - you need to explicitly allow builders to do that (``mock_bootstrap_image =
+    True`` in ``kojid.conf``).
+
+  - you need to have builders with `podman <https://podman.io/>`_ installed and
+    working.
+
+  - use concrete hashes not potentially moving tags. Otherwise, you can get into
+    harder debugging and auditing.
+
+  - builders can consume space during time, no cleanup is made for podman's
+    image cache. So, you'll probably want to run something like ``podman rmi
+    `podman images -a --quiet``` periodically via cron or use some other
+    cache-cleaning mechanism. Even simple task will consume roughly three times
+    more space than without bootstrap image (downloaded image + exploded
+    bootstrap dir + mock's buildroot itself)
+
+  - be sure, that your podman is configured properly and it downloads images
+    only from trusted sources. Note, that this setting effectivelly circumvents
+    network isolation *inside* buildroot, as outside DNS, etc. can be spoofed.
+
+  - this option will automatically turn ``mock.use_bootstrap`` (this is how
+    it is implemented in mock)
+* ``mock.yum.module_hotfixes`` - 0/1 value. If set, yum/dnf will use packages
+  regardless if they come from modularity repo or not. It makes sense only for
+  tags with external repositories. (See dnf `docs
+  <https://dnf.readthedocs.io/en/latest/modularity.html#hotfix-repositories>`__)
+
+* `mock signing plugin
+  <https://github.com/rpm-software-management/mock/wiki/Plugin-Sign>`__ -
+  Options ``mock.plugin_conf.sign_enable``, ``mock.plugin_conf.sign_opts.cmd``
+  and ``mock.plugin_conf.sign_opts.opts`` are propagated to mock conf to be used
+  by this plugin. Note, that these tools are run outside of the jailed env.
+  Note, that this functionality doesn't interfere with koji's standard signing
+  commands (``import-sig``, ``write-signed-rpm``, etc.). Note, that rpmsign vs
+  gpg must be configured correctly. If it is not it a) can silently ignore
+  problems during signing b) can hang forever when e.g. gpg password store is
+  not accessible.
+
+You may also specify per-tag environment variables for mock to use.
+For example, to set the CC environment variable to clang, you could
+do:
+
+::
+
+    koji edit-tag dnf-fedora-tag -x rpm.env.CC=clang
+
 
 Using Koji to control tasks
 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/utils.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/utils.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/utils.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/utils.rst	2020-09-07 15:44:50.000000000 +0800
@@ -5,6 +5,8 @@
 healthy build environment. They are packaged in ``koji-utils`` rpm and
 can be installed as such.
 
+.. _utils-kojira:
+
 Kojira
 ------
 
@@ -81,16 +83,19 @@
     Overall limit on running tasks is set here. It involves all
     ``newRepo`` tasks spawned by kojira and also by other users.
 
-``delete_batch_size = 3``
-    How many repos are being removed from disk in one iteration. This
-    generally doesn't need to be changed.
-
 ``check_external_repos = false``
     If True, monitor external repos and trigger the appropriate Koji repo
     regenerations when they change.
     Note that you need to have your database set to use UTC, as otherwise
     you can end with weird behaviour. For details see
     https://pagure.io/koji/issue/2159
+    
+``queue_file = None``
+    Writable path could be set here. In such case, kojira will write a
+    list of currently monitored tags there with simple statistics in
+    every cycle. File would contain information about how long these
+    tags are expired and what is the computed score for them. This can
+    be used to debug and check in realtime the actual performance.
 
 Garbage Collector
 -----------------
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/writing_a_plugin.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/writing_a_plugin.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/writing_a_plugin.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/writing_a_plugin.rst	2020-09-07 15:44:50.000000000 +0800
@@ -188,6 +188,35 @@
     $ koji tag-build mytag mypkg-1.0-1
 
 
+List of callbacks
+-----------------
+
+hub:
+
+- preBuildStateChange
+- preImport
+- prePackageListChange
+- preRPMSign
+- preRepoDone
+- preRepoInit
+- preTag
+- preTaskStateChange
+- preUntag
+- postBuildStateChange
+- postImport
+- postPackageListChange
+- postRPMSign
+- postRepoDone
+- postRepoInit
+- postTag
+- postTaskStateChange
+- postUntag
+
+builder:
+
+- preSCMCheckout
+- postSCMCheckout
+
 .. _plugin-cli-command:
 
 New command for CLI
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/writing_koji_code.rst /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/writing_koji_code.rst
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/docs/source/writing_koji_code.rst	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/docs/source/writing_koji_code.rst	2020-09-07 15:44:50.000000000 +0800
@@ -641,15 +641,19 @@
 
 You will need to install the following packages to actually run the tests.
 
- * ``findutils``
- * ``pyOpenSSL``
- * ``python-coverage``
- * ``python-krbV``
- * ``python-mock``
- * ``python-psycopg2``
- * ``python-requests``
- * ``python-requests-mock``
- * ``python-qpid-proton``
+ * ``glibc-langpack-en``
+ * ``make``
+ * ``python3-cheetah``
+ * ``python3-coverage``
+ * ``python3-dateutil``
+ * ``python3-mock``
+ * ``python3-multilib``
+ * ``python3-nose``
+ * ``python3-psycopg2``
+ * ``python3-qpid-proton``
+ * ``python3-requests``
+ * ``python3-requests-kerberos``
+ * ``python3-requests-mock``
 
 Please note that it is currently not supported to use *virtualenv* when hacking
 on Koji.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/httpd.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/httpd.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/httpd.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/httpd.conf	2020-09-07 15:44:50.000000000 +0800
@@ -59,8 +59,6 @@
 # uncomment this to enable authentication via GSSAPI
 # <Location /kojihub/ssllogin>
 #         AuthType GSSAPI
-#         GssapiSSLonly Off
-#         GssapiLocalName Off
 #         AuthName "GSSAPI Single Sign On Login"
 #         GssapiCredStore keytab:/etc/koji.keytab
 #         Require valid-user
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/hub.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/hub.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/hub.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/hub.conf	2020-09-07 15:44:50.000000000 +0800
@@ -11,6 +11,7 @@
 DBUser = koji
 #DBHost = db.example.com
 #DBPort = 5432
+#Note, that db password is sensitive and this file shouldn't be publicly readable.
 #DBPass = example_password
 KojiDir = /mnt/koji
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/kojihub.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/kojihub.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/kojihub.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/kojihub.py	2020-09-07 15:44:50.000000000 +0800
@@ -43,13 +43,11 @@
 import tempfile
 import time
 import traceback
+from urllib.parse import parse_qs
+import xmlrpc.client
 import zipfile
 
 import rpm
-import six
-import six.moves.xmlrpc_client
-from six.moves import range
-from six.moves.urllib.parse import parse_qs
 
 import koji
 import koji.auth
@@ -66,6 +64,7 @@
     decode_bytes,
     dslice,
     joinpath,
+    md5_constructor,
     move_and_symlink,
     multi_fnmatch,
     safer_move,
@@ -83,7 +82,7 @@
 logger = logging.getLogger('koji.hub')
 
 
-NUMERIC_TYPES = tuple(list(six.integer_types) + [float])
+NUMERIC_TYPES = (int, float)
 
 
 def log_error(msg):
@@ -435,7 +434,7 @@
             # handle older base64 encoded data
             xml_request = base64.b64decode(xml_request)
         # note: loads accepts either bytes or string
-        params, method = six.moves.xmlrpc_client.loads(xml_request)
+        params, method = xmlrpc.client.loads(xml_request)
         return params
 
     def getResult(self, raise_fault=True):
@@ -454,8 +453,8 @@
         try:
             # If the result is a Fault, then loads will raise it
             # This is normally what we want to happen
-            result, method = six.moves.xmlrpc_client.loads(xml_result)
-        except six.moves.xmlrpc_client.Fault as fault:
+            result, method = xmlrpc.client.loads(xml_result)
+        except xmlrpc.client.Fault as fault:
             if raise_fault:
                 raise
             # Note that you can't really return a fault over xmlrpc, except by
@@ -493,7 +492,7 @@
                     # handle older base64 encoded data
                     task['request'] = base64.b64decode(task['request'])
                 # note: loads accepts either bytes or string
-                task['request'] = six.moves.xmlrpc_client.loads(task['request'])[0]
+                task['request'] = xmlrpc.client.loads(task['request'])[0]
         return results
 
     def runCallbacks(self, cbtype, old_info, attr, new_val):
@@ -563,46 +562,7 @@
     if 'channel' in opts:
         policy_data['req_channel'] = opts['channel']
         req_channel_id = get_channel_id(opts['channel'], strict=True)
-    params = {}
-    try:
-        params = koji.tasks.parse_task_params(method, arglist)
-    except TypeError:
-        logger.warning("%s is not a standard koji task", method)
-    except koji.ParameterError:
-        logger.warning("Cannot parse parameters: %s of %s task", arglist, method)
-    except Exception:
-        logger.warning("Unexcepted error occurs when parsing parameters: %s of %s task",
-                       arglist, method, exc_info=True)
-    if params:
-        # parameters that indicate source for build
-        for k in ('src', 'spec_url', 'url'):
-            if method == 'newRepo':
-                # newRepo has a 'src' parameter that means something else
-                break
-            if k in params:
-                policy_data['source'] = params.get(k)
-                break
-        # parameters that indicate build target
-        target = None
-        hastarget = False
-        for k in ('target', 'build_target', 'target_info'):
-            if k in params:
-                target = params.get(k)
-                hastarget = True
-                break
-        if hastarget:
-            if isinstance(target, dict):
-                if 'name' not in target:
-                    logger.warning("Bad build target parameter: %r", target)
-                    target = None
-                else:
-                    target = target.get('name')
-            if target is None:
-                policy_data['target'] = None
-            else:
-                policy_data['target'] = get_build_target(target, strict=True)['name']
-        t_opts = params.get('opts', {})
-        policy_data['scratch'] = t_opts.get('scratch', False)
+    policy_data.update(policy_data_from_task_args(method, arglist))
 
     ruleset = context.policy.get('channel')
     result = ruleset.apply(policy_data)
@@ -663,7 +623,7 @@
         table += '.'
     if event is None:
         return """(%(table)sactive = TRUE)""" % locals()
-    elif isinstance(event, six.integer_types):
+    elif isinstance(event, int):
         return "(%(table)screate_event <= %(event)d AND ( %(table)srevoke_event IS NULL OR " \
                "%(event)d < %(table)srevoke_event ))" % locals()
     else:
@@ -760,12 +720,12 @@
                     data[parent_id] = link
                     break
     if clear:
-        for link in six.itervalues(data):
+        for link in data.values():
             if not link.get('is_update'):
                 link['delete link'] = True
                 link['is_update'] = True
     changed = False
-    for link in six.itervalues(data):
+    for link in data.values():
         if link.get('is_update'):
             changed = True
             break
@@ -775,18 +735,18 @@
         return
     # check for duplicate priorities
     pri_index = {}
-    for link in six.itervalues(data):
+    for link in data.values():
         if link.get('delete link'):
             continue
         pri_index.setdefault(link['priority'], []).append(link)
-    for pri, dups in six.iteritems(pri_index):
+    for pri, dups in pri_index.items():
         if len(dups) <= 1:
             continue
         # oops, duplicate entries for a single priority
         dup_ids = [link['parent_id'] for link in dups]
         raise koji.GenericError("Inheritance priorities must be unique (pri %s: %r )" %
                                 (pri, dup_ids))
-    for parent_id, link in six.iteritems(data):
+    for parent_id, link in data.items():
         if not link.get('is_update'):
             continue
         # revoke old values
@@ -794,7 +754,7 @@
                                  clauses=['tag_id=%(tag_id)s', 'parent_id = %(parent_id)s'])
         update.make_revoke()
         update.execute()
-    for parent_id, link in six.iteritems(data):
+    for parent_id, link in data.items():
         if not link.get('is_update'):
             continue
         # skip rest if we are just deleting
@@ -979,7 +939,7 @@
     tag_id = tag['id']
     pkg = lookup_package(pkginfo, strict=False)
     if not pkg:
-        if not isinstance(pkginfo, six.string_types):
+        if not isinstance(pkginfo, str):
             raise koji.GenericError("Invalid package: %s" % pkginfo)
     if owner is not None:
         owner = get_user(owner, strict=True)['id']
@@ -1176,7 +1136,7 @@
         q += """
         AND users.id = %%(userID)i"""
     if pkgID is not None:
-        if isinstance(pkgID, six.integer_types):
+        if isinstance(pkgID, int):
             q += """
             AND package.id = %%(pkgID)i"""
         else:
@@ -1232,27 +1192,27 @@
     return packages
 
 
-def list_tags(build=None, package=None, perms=True, queryOpts=None):
-    """List tags.  If build is specified, only return tags associated with the
-    given build.  If package is specified, only return tags associated with the
-    specified package.  If neither is specified, return all tags.  Build can be
-    either an integer ID or a string N-V-R.  Package can be either an integer ID
-    or a string name.  Only one of build and package may be specified.  Returns
-    a list of maps.  Each map contains keys:
-      - id
-      - name
-      - arches
-      - locked
-
-    If package is specified, each map will also contain:
-      - owner_id
-      - owner_name
-      - blocked
-      - extra_arches
-
-    If perms is True, each map will also contain:
-      - perm_id
-      - perm
+def list_tags(build=None, package=None, perms=True, queryOpts=None, pattern=None):
+    """List tags according to filters
+
+    :param int|str build: If build is specified, only return tags associated with
+                          the given build.  Build can be either an integer ID or
+                          a string N-V-R.
+    :param int|str package: If package is specified, only return tags associated with the
+                            specified package. Package can be either an integer ID or a
+                            string name.
+
+                            In this case resulting map will have additional keys:
+                              - owner_id
+                              - owner_name
+                              - blocked
+                              - extra_arches
+    :param bool perms: If perms is True, perm_id and perm is added to resulting maps.
+    :param dict queryOpts: hash with query options for QueryProcessor
+    :param pattern: If glob pattern is specified, only return tags matching that pattern.
+
+    :returns list of dicts: Each map contains id, name, arches and locked keys and
+                            additional keys as specified via package or perms options.
     """
     if build is not None and package is not None:
         raise koji.GenericError('only one of build and package may be specified')
@@ -1293,6 +1253,11 @@
                      "   tag_package_owners.active IS TRUE")
         joins.append('users ON tag_package_owners.owner = users.id')
         packageID = packageinfo['id']
+    if pattern is not None:
+        # copied from _prepareSearchTerms / glob
+        pattern = pattern.replace(
+            '\\', '\\\\').replace('_', r'\_').replace('?', '_').replace('*', '%')
+        clauses.append('tag.name ILIKE %(pattern)s')
 
     query = QueryProcessor(columns=fields, aliases=aliases, tables=tables,
                            joins=joins, clauses=clauses, values=locals(),
@@ -1462,7 +1427,7 @@
         joins.append('LEFT OUTER JOIN rpmsigs on rpminfo.id = rpmsigs.rpm_id')
     if arch:
         data['arch'] = arch
-        if isinstance(arch, six.string_types):
+        if isinstance(arch, str):
             clauses.append('rpminfo.arch = %(arch)s')
         elif isinstance(arch, (list, tuple)):
             clauses.append('rpminfo.arch IN %(arch)s')
@@ -2164,7 +2129,7 @@
             groups.setdefault(grp_id, group)
 
     if incl_pkgs:
-        for group in six.itervalues(groups):
+        for group in groups.values():
             group['packagelist'] = {}
         fields = ('group_id', 'tag_id', 'package', 'blocked', 'type', 'basearchonly', 'requires')
         q = """
@@ -2186,7 +2151,7 @@
 
     if incl_reqs:
         # and now the group reqs
-        for group in six.itervalues(groups):
+        for group in groups.values():
             group['grouplist'] = {}
         fields = ('group_id', 'tag_id', 'req_id', 'blocked', 'type', 'is_metapkg', 'name')
         q = """SELECT %s FROM group_req_listing JOIN groups on req_id = id
@@ -2320,7 +2285,7 @@
 def rename_channel(old, new):
     """Rename a channel"""
     context.session.assertPerm('admin')
-    if not isinstance(new, six.string_types):
+    if not isinstance(new, str):
         raise koji.GenericError("new channel name must be a string")
     cinfo = get_channel(old, strict=True)
     dup_check = get_channel(new, strict=False)
@@ -2677,7 +2642,7 @@
                 os.symlink(relpath, destlink)
             except Exception:
                 log_error('Error linking %s to %s' % (destlink, relpath))
-        for artifact_dir, artifacts in six.iteritems(artifact_dirs):
+        for artifact_dir, artifacts in artifact_dirs.items():
             _write_maven_repo_metadata(artifact_dir, artifacts)
 
     koji.plugin.run_callbacks('postRepoInit', tag=tinfo, with_src=with_src,
@@ -2690,10 +2655,7 @@
     # Sort the list so that the highest version number comes last.
     # group_id and artifact_id should be the same for all entries,
     # so we're really only comparing versions.
-    if six.PY3:
-        sort_param = {'key': functools.cmp_to_key(rpm.labelCompare)}
-    else:
-        sort_param = {'cmp': lambda a, b: rpm.labelCompare(a, b)}
+    sort_param = {'key': functools.cmp_to_key(rpm.labelCompare)}
     artifacts = sorted(artifacts, **sort_param)
     artifactinfo = dict(zip(['group_id', 'artifact_id', 'version'], artifacts[-1]))
     artifactinfo['timestamp'] = datetime.datetime.now().strftime('%Y%m%d%H%M%S')
@@ -3099,7 +3061,7 @@
     if info:
         if isinstance(info, str):
             clauses.append('build_target.name = %(info)s')
-        elif isinstance(info, six.integer_types):
+        elif isinstance(info, int):
             clauses.append('build_target.id = %(info)i')
         else:
             raise koji.GenericError('invalid type for lookup: %s' % type(info))
@@ -3144,13 +3106,10 @@
     create option will fail.
     """
     fields = ('id', 'name')
-    if isinstance(info, six.integer_types):
+    if isinstance(info, int):
         q = """SELECT id,name FROM %s WHERE id=%%(info)d""" % table
     elif isinstance(info, str):
         q = """SELECT id,name FROM %s WHERE name=%%(info)s""" % table
-    elif six.PY2 and isinstance(info, unicode):  # noqa: F821
-        info = koji.fixEncoding(info)
-        q = """SELECT id,name FROM %s WHERE name=%%(info)s""" % table
     else:
         raise koji.GenericError('invalid type for id lookup: %s' % type(info))
     ret = _singleRow(q, locals(), fields, strict=False)
@@ -3283,7 +3242,7 @@
 
     # add extra data
     if extra is not None:
-        for key, value in six.iteritems(extra):
+        for key, value in extra.items():
             data = {
                 'tag_id': tag_id,
                 'key': key,
@@ -3341,9 +3300,9 @@
               'tag_config.maven_include_all': 'maven_include_all'
               }
     clauses = [eventCondition(event, table='tag_config')]
-    if isinstance(tagInfo, six.integer_types):
+    if isinstance(tagInfo, int):
         clauses.append("tag.id = %(tagInfo)i")
-    elif isinstance(tagInfo, six.string_types):
+    elif isinstance(tagInfo, str):
         clauses.append("tag.name = %(tagInfo)s")
     else:
         raise koji.GenericError('invalid type for tagInfo: %s' % type(tagInfo))
@@ -3409,13 +3368,13 @@
         raise koji.GenericError("Maven support not enabled")
 
     tag = get_tag(tagInfo, strict=True)
+    if 'perm' in kwargs and 'perm_id' not in kwargs:
+        # for compatibility, perm and perm_id are aliases
+        # if both are given, perm_id takes precedence
+        kwargs['perm_id'] = kwargs['perm']
     if 'perm_id' in kwargs:
-        kwargs['perm_id'] = get_perm_id(kwargs['perm_id'], strict=True)
-    elif 'perm' in kwargs:
-        if kwargs['perm'] is None:
-            kwargs['perm_id'] = None
-        else:
-            kwargs['perm_id'] = get_perm_id(kwargs['perm'], strict=True)
+        if kwargs['perm_id'] is not None:
+            kwargs['perm_id'] = get_perm_id(kwargs['perm_id'], strict=True)
 
     name = kwargs.get('name')
     if name and tag['name'] != name:
@@ -3591,7 +3550,7 @@
     if info is not None:
         if isinstance(info, str):
             clauses.append('name = %(info)s')
-        elif isinstance(info, six.integer_types):
+        elif isinstance(info, int):
             clauses.append('id = %(info)i')
         else:
             raise koji.GenericError('invalid type for lookup: %s' % type(info))
@@ -3777,14 +3736,27 @@
     """
     Get a list of tag<->external repo associations.
 
-    Returns a map containing the following fields:
-    tag_id
-    tag_name
-    external_repo_id
-    external_repo_name
-    url
-    merge_mode
-    priority
+    The list of associations is ordered by the priority field.
+
+    Each map containing the following fields:
+      tag_id
+      tag_name
+      external_repo_id
+      external_repo_name
+      url
+      merge_mode
+      priority
+
+    :param tag_info: Tag name or ID number. This field is optional. If you
+                     specify a value here, Koji will only return
+                     repo association information for this single tag.
+    :param repo_info: External repository name or ID number. This field is
+                      optional. If you specify a value here, Koji will only
+                      return tag association information for this single
+                      repository.
+    :param int event: The event ID at which to search. If unspecified, the
+                      default behavior is to search for the "active" tag and
+                      repo settings.
     """
     tables = ['tag_external_repos']
     joins = ['tag ON tag_external_repos.tag_id = tag.id',
@@ -3875,9 +3847,9 @@
     fields = ['id', 'name', 'status', 'usertype']
     if isinstance(userInfo, dict):
         data = userInfo
-    elif isinstance(userInfo, six.integer_types):
+    elif isinstance(userInfo, int):
         data = {'id': userInfo}
-    elif isinstance(userInfo, six.string_types):
+    elif isinstance(userInfo, str):
         data = {'info': userInfo}
         clauses = ['krb_principal = %(info)s OR name = %(info)s']
     else:
@@ -3887,21 +3859,21 @@
         clauses = []
         uid = data.get('id')
         if uid is not None:
-            if isinstance(uid, six.integer_types):
+            if isinstance(uid, int):
                 clauses.append('users.id = %(id)i')
             else:
                 raise koji.GenericError('invalid type for userid: %s'
                                         % type(uid))
         username = data.get('name')
         if username:
-            if isinstance(username, six.string_types):
+            if isinstance(username, str):
                 clauses.append('users.name = %(name)s')
             else:
                 raise koji.GenericError('invalid type for username: %s'
                                         % type(username))
         krb_principal = data.get('krb_principal')
         if krb_principal:
-            if isinstance(krb_principal, six.string_types):
+            if isinstance(krb_principal, str):
                 clauses.append('user_krb_principals.krb_principal'
                                ' = %(krb_principal)s')
             else:
@@ -3923,15 +3895,28 @@
 def edit_user(userInfo, name=None, krb_principal_mappings=None):
     """Edit information for an existing user.
 
-    userInfo specifies the user to edit
-    fields changes are provided as keyword arguments:
-        name: rename the user
-        krb_principal_mappings: change user's kerberos principal, it is a list
-                                contains krb_principal pair(s)
-                                - old: krb_principal to modify, None and ''
-                                       indicates adding a new krb_principal
-                                - new: new value of krb_principal, None and ''
-                                       indicates removing the old krb_principal
+    Use this method to rename a user, or to add/remove/modify Kerberos
+    principal(s) for this account.
+
+    Example krb_principal_mappings values:
+
+    To add a new Kerberos principal to a user account:
+      [{'old': None, 'new': 'myuser@NEW.EXAMPLE.COM'}]
+
+    To remove an old Kerberos principal from a user account:
+      [{'old': 'myuser@OLD.EXAMPLE.COM', 'new': None}]
+
+    To modify a user's old Kerberos principal to a new one:
+      [{'old': 'myuser@OLD.EXAMPLE.NET', 'new': 'myuser@NEW.EXAMPLE.NET'}]
+
+    :param userInfo: username (str) or ID (int)
+    :param str name: new name for this user account
+    :param list krb_principal_mappings: List of changes to make for this
+                                        user's Kerberos principal. Each change
+                                        is a dict of "old" and "new"
+                                        Kerberos principals.
+    :raises: GenericError if the user does not exist, or if there were
+             problems in the krb_principal_mappings.
     """
 
     context.session.assertPerm('admin')
@@ -4004,7 +3989,7 @@
             raise koji.GenericError("No user provided")
     fields = ['krb_principal']
     data = {'info': user_info}
-    if isinstance(user_info, six.integer_types):
+    if isinstance(user_info, int):
         joins = []
         clauses = ['user_id = %(info)i']
     elif isinstance(user_info, str):
@@ -4049,7 +4034,7 @@
 
     :returns int: build ID
     """
-    if isinstance(X, six.integer_types):
+    if isinstance(X, int):
         return X
     elif isinstance(X, str):
         data = koji.parse_NVR(X)
@@ -4300,7 +4285,7 @@
     )
     # we can look up by id or NVRA
     data = None
-    if isinstance(rpminfo, six.integer_types):
+    if isinstance(rpminfo, int):
         data = {'id': rpminfo}
     elif isinstance(rpminfo, str):
         data = koji.parse_NVRA(rpminfo)
@@ -4545,7 +4530,9 @@
                        If this parameter is None (default), Koji returns all
                        btypes.
     :param dict queryOpts: additional options for this query.
-    :returns: a list of btype dicts.
+    :returns: a list of btype dicts. If you specify a query parameter for a
+              btype name or id that does not exist, Koji will return an empty
+              list.
     """
     if query is None:
         query = {}
@@ -5189,7 +5176,7 @@
               }
     clauses = [eventCondition(event, table='host_config')]
 
-    if isinstance(hostInfo, six.integer_types):
+    if isinstance(hostInfo, int):
         clauses.append("host.id = %(hostInfo)i")
     elif isinstance(hostInfo, str):
         clauses.append("host.name = %(hostInfo)s")
@@ -5266,7 +5253,7 @@
     fields = ('id', 'name')
     query = """SELECT %s FROM channels
     WHERE """ % ', '.join(fields)
-    if isinstance(channelInfo, six.integer_types):
+    if isinstance(channelInfo, int):
         query += """id = %(channelInfo)i"""
     elif isinstance(channelInfo, str):
         query += """name = %(channelInfo)s"""
@@ -5347,18 +5334,15 @@
     # run separate queries for picking smallest candidate set
     candidate_buildroot_ids = set()
     if rpmID is not None:
-        joins.insert(0, 'buildroot_listing ON buildroot.id = buildroot_listing.buildroot_id')
-        fields.append(('buildroot_listing.is_update', 'is_update'))
-        clauses.append('buildroot_listing.rpm_id = %(rpmID)i')
         query = QueryProcessor(columns=['buildroot_id'], tables=['buildroot_listing'],
                                clauses=['rpm_id = %(rpmID)i'], opts={'asList': True},
                                values=locals())
         result = set(query.execute())
         candidate_buildroot_ids = result
+        if not candidate_buildroot_ids:
+            return _applyQueryOpts([], queryOpts)
 
     if archiveID is not None:
-        joins.insert(0, 'buildroot_archives ON buildroot.id = buildroot_archives.buildroot_id')
-        clauses.append('buildroot_archives.archive_id = %(archiveID)i')
         query = QueryProcessor(columns=['buildroot_id'], tables=['buildroot_archives'],
                                clauses=['archive_id = %(archiveID)i'], opts={'asList': True},
                                values=locals())
@@ -5367,9 +5351,10 @@
             candidate_buildroot_ids &= result
         else:
             candidate_buildroot_ids = result
+        if not candidate_buildroot_ids:
+            return _applyQueryOpts([], queryOpts)
 
     if taskID is not None:
-        clauses.append('standard_buildroot.task_id = %(taskID)i')
         query = QueryProcessor(columns=['buildroot_id'], tables=['standard_buildroot'],
                                clauses=['task_id = %(taskID)i'], opts={'asList': True},
                                values=locals())
@@ -5378,6 +5363,8 @@
             candidate_buildroot_ids &= result
         else:
             candidate_buildroot_ids = result
+        if not candidate_buildroot_ids:
+            return _applyQueryOpts([], queryOpts)
 
     if candidate_buildroot_ids:
         candidate_buildroot_ids = list(candidate_buildroot_ids)
@@ -5406,8 +5393,20 @@
 
 
 def list_channels(hostID=None, event=None):
-    """List channels.  If hostID is specified, only list
-    channels associated with the host with that ID."""
+    """
+    List builder channels.
+
+    :param hostID: Koji builder host ID or hostname. If specified, Koji will
+                   return only the channels associated with this builder host.
+                   If unspecified, Koji will return all channels.
+    :type hostID: int or str
+    :param int event: The event ID at which to search. If unspecified, the
+                      default behavior is to search for the "active" host
+                      settings. You must specify a hostID parameter with this
+                      option.
+    :returns: list of dicts, one per channel. For example,
+              [{'id': 20, 'name': 'container'}]
+    """
     fields = {'channels.id': 'id', 'channels.name': 'name'}
     columns, aliases = zip(*fields.items())
     if hostID:
@@ -5599,7 +5598,7 @@
             return
         os.unlink(basedir)
     elif os.path.exists(basedir):
-        raise koji.GenericError('Unexpected build content: %s', basedir)
+        raise koji.GenericError('Unexpected build content: %s' % basedir)
     else:
         # parent dir might not exist
         koji.ensuredir(os.path.dirname(basedir))
@@ -5659,6 +5658,9 @@
     volume we be retained.
     """
     policy_data = {'build': build}
+    task_id = build['task_id']
+    if task_id:
+        policy_data.update(policy_data_from_task(task_id))
     volume = check_volume_policy(policy_data, strict=strict)
     if volume is None:
         # just leave the build where it is
@@ -5893,6 +5895,8 @@
         'import': True,
         'import_type': 'rpm',
     }
+    if task_id is not None:
+        policy_data.update(policy_data_from_task(task_id))
     vol = check_volume_policy(policy_data, strict=False, default='DEFAULT')
     build['volume_id'] = vol['id']
     build['volume_name'] = vol['name']
@@ -5933,7 +5937,7 @@
         import_rpm_file(fn, binfo, rpminfo)
         add_rpm_sig(rpminfo['id'], koji.rip_rpm_sighdr(fn))
     if logs:
-        for key, files in six.iteritems(logs):
+        for key, files in logs.items():
             if not key:
                 key = None
             for relpath in files:
@@ -6226,7 +6230,7 @@
         if metadata is None:
             # default to looking for uploaded file
             metadata = 'metadata.json'
-        if not isinstance(metadata, six.string_types):
+        if not isinstance(metadata, str):
             raise koji.GenericError("Invalid metadata value: %r" % metadata)
         if metadata.endswith('.json'):
             # handle uploaded metadata
@@ -6337,7 +6341,7 @@
             datetime.datetime.fromtimestamp(float(metadata['build']['end_time'])).isoformat(' ')
         owner = metadata['build'].get('owner', None)
         if owner:
-            if not isinstance(owner, six.string_types):
+            if not isinstance(owner, str):
                 raise koji.GenericError("Invalid owner format (expected username): %s" % owner)
             buildinfo['owner'] = get_user(owner, strict=True)['id']
         self.buildinfo = buildinfo
@@ -6546,7 +6550,7 @@
 
         type_mismatches = 0
         for archive in list_archives(filename=comp['filename'], size=comp['filesize']):
-            if archive['checksum_type'] != comp['checksum_type']:
+            if archive['checksum_type'] != koji.CHECKSUM_TYPES[comp['checksum_type']]:
                 type_mismatches += 1
                 continue
             if archive['checksum'] == comp['checksum']:
@@ -6606,22 +6610,18 @@
                     (filesize, fileinfo['filename'], fileinfo['filesize']))
 
             # checksum
-            if fileinfo['checksum_type'] != 'md5':
-                # XXX
-                # until we change the way we handle checksums, we have to limit this to md5
-                raise koji.GenericError("Unsupported checksum type: %(checksum_type)s" % fileinfo)
             with open(path, 'rb') as fp:
-                m = hashlib.md5()
+                chksum = get_verify_class(fileinfo['checksum_type'])()
                 while True:
                     contents = fp.read(8192)
                     if not contents:
                         break
-                    m.update(contents)
-                if fileinfo['checksum'] != m.hexdigest():
+                    chksum.update(contents)
+                if fileinfo['checksum'] != chksum.hexdigest():
                     raise koji.GenericError("File checksum mismatch for %s: %s != %s" %
                                             (fileinfo['filename'], fileinfo['checksum'],
-                                             m.hexdigest()))
-            fileinfo['hub.checked_md5'] = True
+                                             chksum.hexdigest()))
+            fileinfo['hub.checked_hash'] = True
 
             if fileinfo['buildroot_id'] not in self.br_prep:
                 raise koji.GenericError("Missing buildroot metadata for id %(buildroot_id)r" %
@@ -6754,14 +6754,14 @@
 
     # sanity check rpminfo
     dtypes = (
-        ('name', six.string_types),
-        ('version', six.string_types),
-        ('release', six.string_types),
+        ('name', str),
+        ('version', str),
+        ('release', str),
         ('epoch', (int, type(None))),
-        ('arch', six.string_types),
+        ('arch', str),
         ('payloadhash', str),
         ('size', int),
-        ('buildtime', six.integer_types))
+        ('buildtime', int))
     for field, allowed in dtypes:
         if field not in rpminfo:
             raise koji.GenericError("%s field missing: %r" % (field, rpminfo))
@@ -7183,9 +7183,7 @@
         archiveinfo['filename'] = filename
         archiveinfo['size'] = fileinfo['filesize']
         archiveinfo['checksum'] = fileinfo['checksum']
-        if fileinfo['checksum_type'] != 'md5':
-            # XXX
-            # until we change the way we handle checksums, we have to limit this to md5
+        if fileinfo['checksum_type'] not in ('md5', 'sha256'):
             raise koji.GenericError("Unsupported checksum type: %(checksum_type)s" % fileinfo)
         archiveinfo['checksum_type'] = koji.CHECKSUM_TYPES[fileinfo['checksum_type']]
         archiveinfo['metadata_only'] = True
@@ -7194,28 +7192,27 @@
         archiveinfo['filename'] = filename
         archiveinfo['size'] = os.path.getsize(filepath)
         # trust values computed on hub (CG_Importer.prep_outputs)
-        if not fileinfo or not fileinfo.get('hub.checked_md5'):
+        if not fileinfo or not fileinfo.get('hub.checked_hash'):
             with open(filepath, 'rb') as archivefp:
-                m = hashlib.md5()
+                chksum = get_verify_class('sha256')()
                 while True:
                     contents = archivefp.read(8192)
                     if not contents:
                         break
-                    m.update(contents)
-            archiveinfo['checksum'] = m.hexdigest()
+                    chksum.update(contents)
+            archiveinfo['checksum'] = chksum.hexdigest()
+            archiveinfo['checksum_type'] = koji.CHECKSUM_TYPES['sha256']
         else:
             archiveinfo['checksum'] = fileinfo['checksum']
-        archiveinfo['checksum_type'] = koji.CHECKSUM_TYPES['md5']
+            archiveinfo['checksum_type'] = koji.CHECKSUM_TYPES[fileinfo['checksum_type']]
         if fileinfo:
             # check against metadata
             if archiveinfo['size'] != fileinfo['filesize']:
                 raise koji.GenericError("File size mismatch for %s: %s != %s" %
                                         (filename, archiveinfo['size'], fileinfo['filesize']))
-            if fileinfo['checksum_type'] != 'md5':
-                # XXX
-                # until we change the way we handle checksums, we have to limit this to md5
-                raise koji.GenericError("Unsupported checksum type: %(checksum_type)s" % fileinfo)
-            if archiveinfo['checksum'] != fileinfo['checksum']:
+            if (archiveinfo['checksum'] != fileinfo['checksum'] or
+                    archiveinfo['checksum_type'] != koji.CHECKSUM_TYPES[
+                        fileinfo['checksum_type']]):
                 raise koji.GenericError("File checksum mismatch for %s: %s != %s" %
                                         (filename, archiveinfo['checksum'], fileinfo['checksum']))
     archivetype = get_archive_type(filename, strict=True)
@@ -7337,7 +7334,7 @@
             continue
         if not os.path.isfile('%s/%s' % (mavendir, mavenfile)):
             continue
-        for ext, sum_constr in (('.md5', hashlib.md5), ('.sha1', hashlib.sha1)):
+        for ext, sum_constr in (('.md5', md5_constructor), ('.sha1', hashlib.sha1)):
             sumfile = mavenfile + ext
             if sumfile not in mavenfiles:
                 sum = sum_constr()
@@ -7387,7 +7384,7 @@
         # we use the sigkey='' to represent unsigned in the db (so that uniqueness works)
     else:
         sigkey = koji.get_sigpacket_key_id(sigkey)
-    sighash = hashlib.md5(sighdr).hexdigest()
+    sighash = md5_constructor(sighdr).hexdigest()
     rpm_id = rinfo['id']
     # - db entry
     q = """SELECT sighash FROM rpmsigs WHERE rpm_id=%(rpm_id)i AND sigkey=%(sigkey)s"""
@@ -7781,7 +7778,7 @@
                 fields['creator.id = %(editor)i'] = '_created_by'
                 fields['revoker.id = %(editor)i'] = '_revoked_by'
             elif arg == 'after':
-                if not isinstance(value, six.string_types):
+                if not isinstance(value, str):
                     value = datetime.datetime.fromtimestamp(value).isoformat(' ')
                 data['after'] = value
                 clauses.append('ev1.time > %(after)s OR ev2.time > %(after)s')
@@ -7797,7 +7794,7 @@
                 fields[c_test] = '_created_after_event'
                 fields[r_test] = '_revoked_after_event'
             elif arg == 'before':
-                if not isinstance(value, six.string_types):
+                if not isinstance(value, str):
                     value = datetime.datetime.fromtimestamp(value).isoformat(' ')
                 data['before'] = value
                 clauses.append('ev1.time < %(before)s OR ev2.time < %(before)s')
@@ -8351,9 +8348,9 @@
         #   using all package owners from all tags would be way overkill.
 
     if not recipients:
-        return None
+        return []
 
-    # apply the out outs
+    # apply the opt-outs
     user_ids = list(set([r['user_id'] for r in recipients]))
     if user_ids:
         clauses = ['user_id IN %(user_ids)s']
@@ -8425,7 +8422,7 @@
     web_url = context.opts.get('KojiWebURL', 'http://localhost/koji')
 
     recipients = get_notification_recipients(build, dest_tag, build['state'])
-    if len(recipients) > 0:
+    if recipients:
         make_task('buildNotification', [recipients, build, target, web_url])
 
 
@@ -9161,28 +9158,30 @@
         c = context.cnx.cursor()
         c.execute(query, values)
         c.close()
-        query = "FETCH %i FROM %s" % (chunksize, cname)
-        while True:
-            if as_list:
-                if self.transform is None:
-                    buf = _fetchMulti(query, {})
+        try:
+            query = "FETCH %i FROM %s" % (chunksize, cname)
+            while True:
+                if as_list:
+                    if self.transform is None:
+                        buf = _fetchMulti(query, {})
+                    else:
+                        # if we're transforming, generate the dicts so the transform can modify
+                        buf = _multiRow(query, self.values, fields)
+                        buf = [self.transform(row) for row in buf]
+                        # and then convert back to lists
+                        buf = [[row[f] for f in fields] for row in buf]
                 else:
-                    # if we're transforming, generate the dicts so the transform can modify
-                    buf = _multiRow(query, self.values, fields)
-                    buf = [self.transform(row) for row in buf]
-                    # and then convert back to lists
-                    buf = [[row[f] for f in fields] for row in buf]
-            else:
-                buf = _multiRow(query, {}, fields)
-                if self.transform is not None:
-                    buf = [self.transform(row) for row in buf]
-            if not buf:
-                break
-            for row in buf:
-                yield row
-        c = context.cnx.cursor()
-        c.execute("CLOSE %s" % cname)
-        c.close()
+                    buf = _multiRow(query, {}, fields)
+                    if self.transform is not None:
+                        buf = [self.transform(row) for row in buf]
+                if not buf:
+                    break
+                for row in buf:
+                    yield row
+        finally:
+            c = context.cnx.cursor()
+            c.execute("CLOSE %s" % cname)
+            c.close()
 
     def executeOne(self, strict=False):
         results = self.execute()
@@ -9262,7 +9261,7 @@
         if not pkginfo:
             # for some operations (e.g. adding a new package), the package
             # entry may not exist yet
-            if isinstance(data['package'], six.string_types):
+            if isinstance(data['package'], str):
                 return {'id': None, 'name': data['package']}
             else:
                 raise koji.GenericError("Invalid package: %s" % data['package'])
@@ -9332,13 +9331,19 @@
 
 
 def policy_get_build_tags(data):
-    # pull cg info out
-    # note that br_id will be None if a component had no buildroot
     if 'build_tag' in data:
         return [get_tag(data['build_tag'], strict=True)['name']]
     elif 'build_tags' in data:
         return [get_tag(t, strict=True)['name'] for t in data['build_tags']]
-    # otherise look at buildroots
+
+    # see if we have a target
+    target = data.get('target')
+    if target:
+        target = get_build_target(target, strict=False)
+        if target:
+            return [target['build_tag_name']]
+
+    # otherwise look at buildroots
     tags = set()
     for br_id in policy_get_brs(data):
         if br_id is None:
@@ -9645,7 +9650,7 @@
             return False
         groups = koji.auth.get_user_groups(user['id'])
         args = self.str.split()[1:]
-        for group_id, group in six.iteritems(groups):
+        for group_id, group in groups.items():
             for pattern in args:
                 if fnmatch.fnmatch(group, pattern):
                     return True
@@ -9810,6 +9815,78 @@
     raise koji.ActionNotAllowed(err_str)
 
 
+def policy_data_from_task(task_id):
+    """Calculate policy data from task id
+
+        :param int task_id: the task id
+
+        :returns: dict with policy data
+        """
+    task = Task(task_id)
+    taskinfo = task.getInfo(strict=True, request=True)
+    return policy_data_from_task_args(taskinfo['method'], taskinfo['request'])
+
+
+def policy_data_from_task_args(method, arglist):
+    """Calculate policy data from task arguments
+
+        :param str method: task method
+        :param list arglist: raw task params
+
+        :returns: dict with policy data
+        """
+    params = {}
+    policy_data = {}
+    try:
+        params = koji.tasks.parse_task_params(method, arglist)
+    except TypeError:
+        logger.warning("%s is not a standard koji task", method)
+    except koji.ParameterError:
+        logger.warning("Cannot parse parameters: %s of %s task", arglist, method)
+    except Exception:
+        logger.warning("Unexcepted error occurs when parsing parameters: %s of %s task",
+                       arglist, method, exc_info=True)
+    if not params:
+        return {}
+
+    if method == 'indirectionimage':
+        # this handler buries all its arguments in a single 'opts' parameter
+        opts = params.get('opts') or {}
+        params = dict(**opts)
+        params['opts'] = opts
+    # parameters that indicate source for build
+    for k in ('src', 'spec_url', 'url'):
+        if method == 'newRepo':
+            # newRepo has a 'src' parameter that means something else
+            break
+        if k in params:
+            policy_data['source'] = params.get(k)
+            break
+    # parameters that indicate build target
+    target = None
+    hastarget = False
+    for k in ('target', 'build_target', 'target_info'):
+        if k in params:
+            target = params.get(k)
+            hastarget = True
+            break
+    if hastarget:
+        if isinstance(target, dict):
+            if 'name' not in target:
+                logger.warning("Bad build target parameter: %r", target)
+                target = None
+            else:
+                target = target.get('name')
+        if target is None:
+            policy_data['target'] = None
+        else:
+            policy_data['target'] = get_build_target(target, strict=True)['name']
+    t_opts = params.get('opts', {})
+    policy_data['scratch'] = t_opts.get('scratch', False)
+
+    return policy_data
+
+
 def assert_policy(name, data, default='deny', force=False):
     """Enforce the named policy
 
@@ -9846,7 +9923,7 @@
                 'rpmdiff output was:\n%s' % (os.path.basename(first_rpm), d.textdiff()))
 
 
-def importImageInternal(task_id, build_id, imgdata):
+def importImageInternal(task_id, build_info, imgdata):
     """
     Import image info and the listing into the database, and move an image
     to the final resting place. The filesize may be reported as a string if it
@@ -9869,7 +9946,6 @@
     koji.plugin.run_callbacks('preImport', type='image', image=imgdata)
 
     # import the build output
-    build_info = get_build(build_id, strict=True)
     workpath = koji.pathinfo.task(imgdata['task_id'])
     imgdata['relpath'] = koji.pathinfo.taskrelpath(imgdata['task_id'])
     archives = []
@@ -10294,20 +10370,23 @@
         context.session.assertPerm('admin')
         return make_task(*args, **opts)
 
-    def uploadFile(self, path, name, size, md5sum, offset, data, volume=None):
+    def uploadFile(self, path, name, size, md5sum, offset, data, volume=None, checksum=None):
         """upload file to the hub
 
-        Files can be uploaded in chunks, if so the md5 and size describe the
+        Files can be uploaded in chunks, if so the hash and size describe the
         chunk rather than the whole file.
 
         :param str path: the relative path to upload to
         :param str name: the name of the file
         :param int size: size of contents (bytes)
-        :param str md5: md5sum (hex digest) of contents
+        :param checksum: MD5 hex digest (see md5sum) or a tuple (hash_type, digest) of contents
+        :type checksum: str or tuple
         :param str data: base64 encoded file contents
         :param int offset: The offset indicates where the chunk belongs.
                            The special offset -1 is used to indicate the final
                            chunk.
+        :param str md5sum: legacy param name of checksum. md5sum name is misleading,
+                           but it is here for backwards compatibility
 
         :returns: True
         """
@@ -10317,14 +10396,16 @@
         # we will accept offset and size as strings to work around xmlrpc limits
         offset = koji.decode_int(offset)
         size = koji.decode_int(size)
-        if isinstance(md5sum, six.string_types):
+        if checksum is None and md5sum is not None:
+            checksum = md5sum
+        if isinstance(checksum, str):
             # this case is for backwards compatibility
             verify = "md5"
-            digest = md5sum
-        elif md5sum is None:
+            digest = checksum
+        elif checksum is None:
             verify = None
         else:
-            verify, digest = md5sum
+            verify, digest = checksum
         sum_cls = get_verify_class(verify)
         if offset != -1:
             if size is not None:
@@ -10422,14 +10503,13 @@
             data['size'] = st.st_size
             data['mtime'] = st.st_mtime
             if verify:
-                sum_cls = get_verify_class(verify)
+                chksum = get_verify_class(verify)()
                 if tail is not None:
                     if tail < 0:
                         raise koji.GenericError("invalid tail value: %r" % tail)
                     offset = max(st.st_size - tail, 0)
                     os.lseek(fd, offset, 0)
                 length = 0
-                chksum = sum_cls()
                 chunk = os.read(fd, 8192)
                 while chunk:
                     length += len(chunk)
@@ -10696,7 +10776,7 @@
         context.session.assertPerm('admin')
         add_external_rpm(rpminfo, external_repo, strict=strict)
 
-    def tagBuildBypass(self, tag, build, force=False, notify=True):
+    def tagBuildBypass(self, tag, build, force=False, notify=False):
         """Tag a build without running post checks
 
         This is a short circuit function for imports.
@@ -10800,7 +10880,7 @@
             tag_notification(False, None, tag, build, user_id, False, "%s: %s" % (exctype, value))
             raise
 
-    def untagBuildBypass(self, tag, build, strict=True, force=False, notify=True):
+    def untagBuildBypass(self, tag, build, strict=True, force=False, notify=False):
         """Untag a build without any checks
 
         Admin and tag permission only. Intended for syncs/imports.
@@ -10945,7 +11025,7 @@
             srpm_path = joinpath(koji.pathinfo.build(build_info), koji.pathinfo.rpm(srpm_info))
         elif taskID:
             if not filepath:
-                raise koji.GenericError('filepath must be spcified with taskID')
+                raise koji.GenericError('filepath must be specified with taskID')
             if filepath.startswith('/') or '../' in filepath:
                 raise koji.GenericError('invalid filepath: %s' % filepath)
             srpm_path = joinpath(koji.pathinfo.work(),
@@ -10963,9 +11043,9 @@
         if before:
             if isinstance(before, datetime.datetime):
                 before = calendar.timegm(before.utctimetuple())
-            elif isinstance(before, six.string_types):
+            elif isinstance(before, str):
                 before = koji.util.parseTime(before)
-            elif isinstance(before, six.integer_types):
+            elif isinstance(before, int):
                 pass
             else:
                 raise koji.GenericError('invalid type for before: %s' % type(before))
@@ -10973,9 +11053,9 @@
         if after:
             if isinstance(after, datetime.datetime):
                 after = calendar.timegm(after.utctimetuple())
-            elif isinstance(after, six.string_types):
+            elif isinstance(after, str):
                 after = koji.util.parseTime(after)
-            elif isinstance(after, six.integer_types):
+            elif isinstance(after, int):
                 pass
             else:
                 raise koji.GenericError('invalid type for after: %s' % type(after))
@@ -11279,14 +11359,14 @@
 
     def getLatestBuilds(self, tag, event=None, package=None, type=None):
         """List latest builds for tag (inheritance enabled)"""
-        if not isinstance(tag, six.integer_types):
+        if not isinstance(tag, int):
             # lookup tag id
             tag = get_tag_id(tag, strict=True)
         return readTaggedBuilds(tag, event, inherit=True, latest=True, package=package, type=type)
 
     def getLatestRPMS(self, tag, package=None, arch=None, event=None, rpmsigs=False, type=None):
         """List latest RPMS for tag (inheritance enabled)"""
-        if not isinstance(tag, six.integer_types):
+        if not isinstance(tag, int):
             # lookup tag id
             tag = get_tag_id(tag, strict=True)
         return readTaggedRPMS(tag, package=package, arch=arch, event=event, inherit=True,
@@ -11361,7 +11441,7 @@
         :param list data: Inheritance rules to set for this child tag. This is
                           a list of rules (dicts) for parent tags and
                           priorities. If any rule dict in the list has a
-                          special "remove link": True key and value, Koji will
+                          special "delete link": True key and value, Koji will
                           remove this inheritance rule instead of adding it.
         :param bool clear: Wipe out all existing inheritance rules and only
                            apply the ones you submit here. If unspecified,
@@ -11387,7 +11467,7 @@
             stops = {}
         if jumps is None:
             jumps = {}
-        if not isinstance(tag, six.integer_types):
+        if not isinstance(tag, int):
             # lookup tag id
             tag = get_tag_id(tag, strict=True)
         for mapping in [stops, jumps]:
@@ -11414,7 +11494,7 @@
         - buildroot_id
 
         If no build has the given ID, or the build generated no RPMs, an empty list is returned."""
-        if not isinstance(build, six.integer_types):
+        if not isinstance(build, int):
             # lookup build id
             build = self.findBuildID(build, strict=True)
         return self.listRPMs(buildID=build)
@@ -11774,7 +11854,16 @@
         update.execute()
 
     def createUser(self, username, status=None, krb_principal=None):
-        """Add a user to the database"""
+        """Add a user to the database
+
+        :param str username: The username for this Koji user.
+        :param int status: This must be one of the values of the
+                           koji.USER_STATUS enum. If unspecified,
+                           the default is koji.USER_STATUS['NORMAL'].
+        :param str krb_principal: a custom Kerberos principal, or None.
+        :raises: GenericError if the user or Kerberos principal already
+                 exists.
+        """
         context.session.assertPerm('admin')
         if get_user(username):
             raise koji.GenericError('user already exists: %s' % username)
@@ -11891,7 +11980,7 @@
 
         :returns: dict with repo data (id, state, create_event, time, dist)
         """
-        if isinstance(tag, six.integer_types):
+        if isinstance(tag, int):
             id = tag
         else:
             id = get_tag_id(tag, strict=True)
@@ -12204,8 +12293,8 @@
                             # handle older base64 encoded data
                             val = base64.b64decode(val)
                         # note: loads accepts either bytes or string
-                        data, method = six.moves.xmlrpc_client.loads(val)
-                    except six.moves.xmlrpc_client.Fault as fault:
+                        data, method = xmlrpc.client.loads(val)
+                    except xmlrpc.client.Fault as fault:
                         data = fault
                     task[f] = data
             yield task
@@ -12520,7 +12609,7 @@
             xmlrpc DateTime value"""
         context.session.assertPerm('admin')
         buildinfo = get_build(build, strict=True)
-        if isinstance(ts, six.moves.xmlrpc_client.DateTime):
+        if isinstance(ts, xmlrpc.client.DateTime):
             # not recommended
             # the xmlrpclib.DateTime class is almost useless
             try:
@@ -12612,7 +12701,11 @@
             method = getattr(self, methodName)
         except AttributeError:
             raise koji.GenericError("method %s doesn't exist" % methodName)
-        results = method(*args, **kw)
+        try:
+            results = method(*args, **kw)
+        except Exception as ex:
+            raise koji.GenericError("method %s raised an exception (%s)" % (methodName, str(ex)))
+
         if results is None:
             return 0, None
         elif isinstance(results, list):
@@ -13463,6 +13556,7 @@
         return task.open(host.id)
 
     def getTask(self):
+        logging.warn("Call host.getTask is deprecated and will be removed in 1.23")
         host = Host()
         host.verify()
         return host.getTask()
@@ -13580,7 +13674,7 @@
             dest = "%s/%s" % (dir, os.path.basename(fn))
             move_and_symlink(fn, dest)
         if logs:
-            for key, files in six.iteritems(logs):
+            for key, files in logs.items():
                 if key:
                     logdir = "%s/logs/%s" % (dir, key)
                 else:
@@ -13723,13 +13817,14 @@
             'import': True,
             'import_type': 'maven',
         }
+        policy_data.update(policy_data_from_task(task_id))
         vol = check_volume_policy(policy_data, strict=False, default='DEFAULT')
         if vol['id'] != build_info['volume_id']:
             build_info['volume_id'] = vol['id']
             build_info['volume_name'] = vol['name']
             vol_update = True
 
-        self.importImage(task_id, build_id, results)
+        self.importImage(task_id, build_info, results)
         ensure_volume_symlink(build_info)
 
         st_old = build_info['state']
@@ -13804,6 +13899,7 @@
             'import': True,
             'import_type': 'maven',
         }
+        policy_data.update(policy_data_from_task(task_id))
         vol = check_volume_policy(policy_data, strict=False, default='DEFAULT')
         if vol['id'] != build_info['volume_id']:
             build_info['volume_id'] = vol['id']
@@ -13814,7 +13910,7 @@
         maven_task_id = maven_results['task_id']
         maven_buildroot_id = maven_results['buildroot_id']
         maven_task_dir = koji.pathinfo.task(maven_task_id)
-        for relpath, files in six.iteritems(maven_results['files']):
+        for relpath, files in maven_results['files'].items():
             dir_maven_info = maven_info
             poms = [f for f in files if f.endswith('.pom')]
             if len(poms) == 0:
@@ -13931,6 +14027,8 @@
         data['owner'] = task.getOwner()
         data['state'] = koji.BUILD_STATES['BUILDING']
         data['completion_time'] = None
+        if data.get('release') is None:
+            data['release'] = get_next_release(build_info)
         build_id = new_build(data)
         data['id'] = build_id
         new_image_build(data)
@@ -13978,6 +14076,7 @@
             'import': True,
             'import_type': 'win',
         }
+        policy_data.update(policy_data_from_task(task_id))
         vol = check_volume_policy(policy_data, strict=False, default='DEFAULT')
         if vol['id'] != build_info['volume_id']:
             build_info['volume_id'] = vol['id']
@@ -13986,7 +14085,7 @@
 
         task_dir = koji.pathinfo.task(results['task_id'])
         # import the build output
-        for relpath, metadata in six.iteritems(results['output']):
+        for relpath, metadata in results['output'].items():
             archivetype = get_archive_type(relpath)
             if not archivetype:
                 # Unknown archive type, fail the build
@@ -14112,7 +14211,7 @@
             _untag_build(fromtag, build, user_id=user_id, force=force, strict=True)
         _tag_build(tag, build, user_id=user_id, force=force)
 
-    def importImage(self, task_id, build_id, results):
+    def importImage(self, task_id, build_info, results):
         """
         Import a built image, populating the database with metadata and
         moving the image to its final location.
@@ -14121,11 +14220,11 @@
             if 'task_id' not in sub_results:
                 logger.warning('Task %s failed, no image available' % task_id)
                 continue
-            importImageInternal(task_id, build_id, sub_results)
+            importImageInternal(task_id, build_info, sub_results)
             if 'rpmresults' in sub_results:
                 rpm_results = sub_results['rpmresults']
                 _import_wrapper(rpm_results['task_id'],
-                                get_build(build_id, strict=True), rpm_results)
+                                get_build(build_info['id'], strict=True), rpm_results)
 
     def tagNotification(self, is_successful, tag_id, from_id, build_id, user_id,
                         ignore_success=False, failure_msg=''):
@@ -14243,9 +14342,9 @@
             extra_deps = []
         task_deps = {}
         for dep in extra_deps:
-            if isinstance(dep, six.integer_types):
+            if isinstance(dep, int):
                 task_output = list_task_output(dep, stat=True)
-                for filepath, filestats in six.iteritems(task_output):
+                for filepath, filestats in task_output.items():
                     if os.path.splitext(filepath)[1] in ['.log', '.md5', '.sha1']:
                         continue
                     tokens = filepath.split('/')
@@ -14389,7 +14488,7 @@
         repodir = koji.pathinfo.repo(repo_id, rinfo['tag_name'])
         workdir = koji.pathinfo.work()
         if not rinfo['dist']:
-            for arch, (uploadpath, files) in six.iteritems(data):
+            for arch, (uploadpath, files) in data.items():
                 archdir = "%s/%s" % (repodir, koji.canonArch(arch))
                 if not os.path.isdir(archdir):
                     raise koji.GenericError("Repo arch directory missing: %s" % archdir)
@@ -14590,9 +14689,11 @@
 
 def get_verify_class(verify):
     if verify == 'md5':
-        return hashlib.md5
+        return md5_constructor
     elif verify == 'adler32':
         return koji.util.adler32_constructor
+    elif verify == 'sha256':
+        return hashlib.sha256
     elif verify:
         raise koji.GenericError("Unsupported verify type: %s" % verify)
     else:
@@ -14620,9 +14721,8 @@
             raise koji.GenericError("destination not a file: %s" % fn)
         if offset == 0 and not overwrite:
             raise koji.GenericError("upload path exists: %s" % fn)
-    sum_cls = get_verify_class(verify)
+    chksum = get_verify_class(verify)()
     size = 0
-    chksum = sum_cls()
     inf = environ['wsgi.input']
     fd = os.open(fn, os.O_RDWR | os.O_CREAT, 0o666)
     try:
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/kojixmlrpc.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/kojixmlrpc.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/hub/kojixmlrpc.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/hub/kojixmlrpc.py	2020-09-07 15:44:50.000000000 +0800
@@ -18,8 +18,6 @@
 # Authors:
 #       Mike McLean <mikem@redhat.com>
 
-from __future__ import absolute_import, division
-
 import datetime
 import inspect
 import logging
@@ -31,9 +29,6 @@
 import time
 import traceback
 
-import six
-from six.moves import range
-
 import koji
 import koji.auth
 import koji.db
@@ -52,10 +47,7 @@
     def dump_datetime(self, value, write):
         # For backwards compatibility, we return datetime objects as strings
         value = value.isoformat(' ')
-        if six.PY2:
-            self.dump_string(value, write)
-        else:
-            self.dump_unicode(value, write)
+        self.dump_unicode(value, write)
     dispatch[datetime.datetime] = dump_datetime
 
 
@@ -104,7 +96,7 @@
 
         Handlers are functions marked with one of the decorators defined in koji.plugin
         """
-        for v in six.itervalues(vars(plugin)):
+        for v in vars(plugin).values():
             if isinstance(v, type):
                 # skip classes
                 continue
@@ -230,6 +222,29 @@
         parser.close()
         return unmarshaller.close(), unmarshaller.getmethodname()
 
+    def _log_exception(self):
+        e_class, e = sys.exc_info()[:2]
+        faultCode = getattr(e_class, 'faultCode', 1)
+        tb_type = context.opts.get('KojiTraceback', None)
+        tb_str = ''.join(traceback.format_exception(*sys.exc_info()))
+        if issubclass(e_class, koji.GenericError):
+            if context.opts.get('KojiDebug'):
+                if tb_type == "extended":
+                    faultString = koji.format_exc_plus()
+                else:
+                    faultString = tb_str
+            else:
+                faultString = str(e)
+        else:
+            if tb_type == "normal":
+                faultString = tb_str
+            elif tb_type == "extended":
+                faultString = koji.format_exc_plus()
+            else:
+                faultString = "%s: %s" % (e_class, e)
+        self.logger.warning(tb_str)
+        return faultCode, faultString
+
     def _wrap_handler(self, handler, environ):
         """Catch exceptions and encode response of handler"""
 
@@ -245,26 +260,7 @@
         except Exception:
             self.traceback = True
             # report exception back to server
-            e_class, e = sys.exc_info()[:2]
-            faultCode = getattr(e_class, 'faultCode', 1)
-            tb_type = context.opts.get('KojiTraceback', None)
-            tb_str = ''.join(traceback.format_exception(*sys.exc_info()))
-            if issubclass(e_class, koji.GenericError):
-                if context.opts.get('KojiDebug'):
-                    if tb_type == "extended":
-                        faultString = koji.format_exc_plus()
-                    else:
-                        faultString = tb_str
-                else:
-                    faultString = str(e)
-            else:
-                if tb_type == "normal":
-                    faultString = tb_str
-                elif tb_type == "extended":
-                    faultString = koji.format_exc_plus()
-                else:
-                    faultString = "%s: %s" % (e_class, e)
-            self.logger.warning(tb_str)
+            faultCode, faultString = self._log_exception()
             response = dumps(Fault(faultCode, faultString), marshaller=Marshaller)
 
         return response
@@ -352,6 +348,7 @@
                 results.append({'faultCode': faultCode,
                                 'faultString': faultString,
                                 'traceback': trace})
+                self._log_exception()
             else:
                 results.append([result])
 
@@ -375,9 +372,7 @@
         faultString = "server is offline"
     else:
         faultString = msg
-    response = dumps(Fault(faultCode, faultString))
-    if six.PY3:
-        response = response.encode()
+    response = dumps(Fault(faultCode, faultString)).encode()
     headers = [
         ('Content-Length', str(len(response))),
         ('Content-Type', "text/xml"),
@@ -492,7 +487,7 @@
         opts['policy'] = dict(config.items('policy'))
     else:
         opts['policy'] = {}
-    for pname, text in six.iteritems(_default_policies):
+    for pname, text in _default_policies.items():
         opts['policy'].setdefault(pname, text)
     # use configured KojiDir
     if opts.get('KojiDir') is not None:
@@ -530,6 +525,7 @@
             ''',
     'package_list': '''
             has_perm admin :: allow
+            has_perm tag :: allow
             all :: deny
             ''',
     'channel': '''
@@ -562,14 +558,14 @@
             continue
         alltests.append(koji.policy.findSimpleTests(vars(plugin)))
     policy = {}
-    for pname, text in six.iteritems(opts['policy']):
+    for pname, text in opts['policy'].items():
         # filter/merge tests
         merged = {}
         for tests in alltests:
             # tests can be limited to certain policies by setting a class variable
-            for name, test in six.iteritems(tests):
+            for name, test in tests.items():
                 if hasattr(test, 'policy'):
-                    if isinstance(test.policy, six.string_types):
+                    if isinstance(test.policy, str):
                         if pname != test.policy:
                             continue
                     elif pname not in test.policy:
@@ -724,8 +720,7 @@
         start_response('405 Method Not Allowed', headers)
         response = "Method Not Allowed\n" \
                    "This is an XML-RPC server. Only POST requests are accepted."
-        if six.PY3:
-            response = response.encode()
+        response = response.encode()
         headers = [
             ('Content-Length', str(len(response))),
             ('Content-Type', "text/plain"),
@@ -755,8 +750,7 @@
                 response = h._wrap_handler(h.handle_upload, environ)
             else:
                 response = h._wrap_handler(h.handle_rpc, environ)
-            if six.PY3:
-                response = response.encode()
+            response = response.encode()
             headers = [
                 ('Content-Length', str(len(response))),
                 ('Content-Type', "text/xml"),
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/auth.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/auth.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/auth.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/auth.py	2020-09-07 15:44:50.000000000 +0800
@@ -21,7 +21,6 @@
 
 from __future__ import absolute_import
 
-import base64
 import random
 import re
 import socket
@@ -34,11 +33,6 @@
 from .context import context
 from .util import to_list
 
-try:
-    import krbV
-except ImportError:
-    krbV = None
-
 # 1 - load session if provided
 #       - check uri for session id
 #       - load session info from db
@@ -300,82 +294,6 @@
         context.cnx.commit()
         return sinfo
 
-    def krbLogin(self, krb_req, proxyuser=None):
-        """Authenticate the user using the base64-encoded
-        AP_REQ message in krb_req.  If proxyuser is not None,
-        log in that user instead of the user associated with the
-        Kerberos principal.  The principal must be an authorized
-        "proxy_principal" in the server config."""
-        if self.logged_in:
-            raise koji.AuthError("Already logged in")
-
-        if krbV is None:
-            # python3 is not supported
-            raise koji.AuthError("krbV module not installed")
-
-        if not (context.opts.get('AuthPrincipal') and context.opts.get('AuthKeytab')):
-            raise koji.AuthError('not configured for Kerberos authentication')
-
-        ctx = krbV.default_context()
-        srvprinc = krbV.Principal(name=context.opts.get('AuthPrincipal'), context=ctx)
-        srvkt = krbV.Keytab(name=context.opts.get('AuthKeytab'), context=ctx)
-
-        ac = krbV.AuthContext(context=ctx)
-        ac.flags = krbV.KRB5_AUTH_CONTEXT_DO_SEQUENCE | krbV.KRB5_AUTH_CONTEXT_DO_TIME
-        conninfo = self.getConnInfo()
-        ac.addrs = conninfo
-
-        # decode and read the authentication request
-        req = base64.b64decode(krb_req)
-        ac, opts, sprinc, ccreds = ctx.rd_req(req, server=srvprinc, keytab=srvkt,
-                                              auth_context=ac,
-                                              options=krbV.AP_OPTS_MUTUAL_REQUIRED)
-        cprinc = ccreds[2]
-
-        # Successfully authenticated via Kerberos, now log in
-        if proxyuser:
-            proxyprincs = [princ.strip()
-                           for princ in context.opts.get('ProxyPrincipals', '').split(',')]
-            if cprinc.name in proxyprincs:
-                login_principal = proxyuser
-            else:
-                raise koji.AuthError(
-                    'Kerberos principal %s is not authorized to log in other users' % cprinc.name)
-        else:
-            login_principal = cprinc.name
-
-        if '@' in login_principal:
-            user_id = self.getUserIdFromKerberos(login_principal)
-        else:
-            # backward compatible
-            # it's only possible when proxyuser is username, but we shouldn't
-            # allow this.
-            user_id = self.getUserId(login_principal)
-
-        if not user_id:
-            # Only do autocreate if we also couldn't find by username AND the proxyuser
-            # looks like a krb5 principal
-            if context.opts.get('LoginCreatesUser') and '@' in login_principal:
-                user_id = self.createUserFromKerberos(login_principal)
-            else:
-                raise koji.AuthError('Unknown Kerberos principal: %s' % login_principal)
-
-        self.checkLoginAllowed(user_id)
-
-        hostip = self.get_remote_ip()
-
-        sinfo = self.createSession(user_id, hostip, koji.AUTHTYPE_KERB)
-
-        # encode the reply
-        rep = ctx.mk_rep(auth_context=ac)
-        rep_enc = base64.encodestring(rep)
-
-        # encrypt and encode the login info
-        sinfo_priv = ac.mk_priv('%(session-id)s %(session-key)s' % sinfo)
-        sinfo_enc = base64.encodestring(sinfo_priv)
-
-        return (rep_enc, sinfo_enc, conninfo)
-
     def getConnInfo(self):
         """Return a tuple containing connection information
         in the following format:
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/daemon.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/daemon.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/daemon.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/daemon.py	2020-09-07 15:44:50.000000000 +0800
@@ -45,7 +45,8 @@
     base64encode,
     dslice,
     parseStatus,
-    to_list
+    to_list,
+    joinpath,
 )
 
 
@@ -68,12 +69,12 @@
             break
 
         data = base64encode(contents)
-        digest = hashlib.md5(contents).hexdigest()
+        digest = hashlib.sha256(contents).hexdigest()
         del contents
 
         tries = 0
         while True:
-            if session.uploadFile(path, fname, size, digest, offset, data):
+            if session.uploadFile(path, fname, size, ("sha256", digest), offset, data):
                 break
 
             if tries <= retries:
@@ -728,6 +729,9 @@
                             continue
                     else:
                         age = min(age, time.time() - st.st_mtime)
+                topdir_bootstrap = "%s-bootstrap" % topdir
+                if not os.path.exists(topdir_bootstrap):
+                    topdir_bootstrap = None
                 # note: https://bugzilla.redhat.com/bugzilla/show_bug.cgi?id=192153)
                 # If rpmlib is installing in this chroot, removing it entirely
                 # can lead to a world of hurt.
@@ -736,28 +740,40 @@
                 if age > 3600 * 24:
                     # dir untouched for a day
                     self.logger.info("Removing buildroot: %s" % desc)
-                    if topdir and safe_rmtree(topdir, unmount=True, strict=False) != 0:
+                    if ((topdir and safe_rmtree(topdir, unmount=True, strict=False) != 0) or
+                        (topdir_bootstrap and
+                            safe_rmtree(topdir_bootstrap, unmount=True, strict=False) != 0)):
                         continue
                     # also remove the config
                     try:
                         os.unlink(data['cfg'])
                     except OSError as e:
                         self.logger.warning("%s: can't remove config: %s" % (desc, e))
-                elif age > 120:
-                    if rootdir:
+                elif age > 120 and rootdir:
+                    for d in (topdir, topdir_bootstrap):
+                        if not d:
+                            continue
+                        if d == topdir_bootstrap:
+                            desc2 = "%s [bootstrap]" % desc
+                        else:
+                            desc2 = desc
+                        rootdir = joinpath(d, 'root')
                         try:
                             flist = os.listdir(rootdir)
                         except OSError as e:
-                            self.logger.warning("%s: can't list rootdir: %s" % (desc, e))
+                            self.logger.warning("%s: can't list rootdir: %s" % (desc2, e))
                             continue
                         if flist:
-                            self.logger.info("%s: clearing rootdir" % desc)
+                            self.logger.info("%s: clearing rootdir" % desc2)
                         for fn in flist:
                             safe_rmtree("%s/%s" % (rootdir, fn), unmount=True, strict=False)
-                        resultdir = "%s/result" % topdir
-                        if os.path.isdir(resultdir):
-                            self.logger.info("%s: clearing resultdir" % desc)
-                            safe_rmtree(resultdir, unmount=True, strict=False)
+                        # bootstrap's resultdir is 'results', so we try the best to remove both
+                        # 'result(s)' dirs
+                        for r in ('result', 'results'):
+                            resultdir = "%s/%s" % (d, r)
+                            if os.path.isdir(resultdir):
+                                self.logger.info("%s: clearing resultdir: %s" % (desc2, resultdir))
+                                safe_rmtree(resultdir, unmount=True, strict=False)
                 else:
                     self.logger.debug("Recent buildroot: %s: %i seconds" % (desc, age))
         self.logger.debug("Local buildroots: %d" % len(local_br))
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/__init__.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/__init__.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/__init__.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/__init__.py	2020-09-07 15:44:50.000000000 +0800
@@ -50,26 +50,19 @@
 import xml.sax.handler
 from fnmatch import fnmatch
 
+import dateutil.parser
 import requests
 import six
 import six.moves.configparser
 import six.moves.http_client
 import six.moves.urllib
+from requests.adapters import HTTPAdapter
+from requests.packages.urllib3.util.retry import Retry
 from six.moves import range, zip
 
 from koji.xmlrpcplus import Fault, dumps, getparser, loads, xmlrpc_client
 from . import util
 
-krbV = None
-try:
-    import krbV
-except ImportError:  # pragma: no cover
-    pass
-dns_resolver = None
-try:
-    import dns.resolver as dns_resolver
-except ImportError:  # pragma: no cover
-    pass
 SSL_Error = None
 try:
     from OpenSSL.SSL import Error as SSL_Error
@@ -80,9 +73,12 @@
     # we ignore it here
     pass
 try:
-    import requests_kerberos
+    import requests_gssapi as reqgssapi
 except ImportError:  # pragma: no cover
-    requests_kerberos = None
+    try:
+        import requests_kerberos as reqgssapi
+    except ImportError:  # pragma: no cover
+        reqgssapi = None
 try:
     import rpm
 except ImportError:
@@ -1579,11 +1575,16 @@
         'use_host_resolv': opts.get('use_host_resolv', False),
         # Don't let a build last more than 24 hours
         'rpmbuild_timeout': opts.get('rpmbuild_timeout', 86400),
-        # warn if yum is used instead of dnf
-        'dnf_warning': True,
+        # turn off warning for yum being used in place of dnf
+        'dnf_warning': False,
     }
     if opts.get('package_manager'):
         config_opts['package_manager'] = opts['package_manager']
+    if opts.get('bootstrap_image'):
+        config_opts['use_bootstrap_image'] = True
+        config_opts['bootstrap_image'] = opts['bootstrap_image']
+    if 'use_bootstrap' in opts:
+        config_opts['use_bootstrap'] = bool(opts['use_bootstrap'])
 
     # bind_opts are used to mount parts (or all of) /dev if needed.
     # See kojid::LiveCDTask for a look at this option in action.
@@ -1634,6 +1635,8 @@
         yc_parts.append("        %s\n" % url)
     if opts.get('module_hotfixes'):
         yc_parts.append("module_hotfixes=1\n")
+    if opts.get('yum_best'):
+        yc_parts.append("best=%s\n" % int(opts['yum_best']))
     config_opts['yum.conf'] = ''.join(yc_parts)
 
     plugin_conf = {
@@ -1641,6 +1644,8 @@
         'yum_cache_enable': False,
         'root_cache_enable': False
     }
+    # Append config_opts['plugin_conf'] to enable Mock package signing
+    plugin_conf.update(opts.get('plugin_conf', {}))
 
     macros = {
         '%_rpmfilename': '%%{NAME}-%%{VERSION}-%%{RELEASE}.%%{ARCH}.rpm',
@@ -1682,7 +1687,14 @@
     parts.append("\n")
     for key in sorted(plugin_conf):
         value = plugin_conf[key]
-        parts.append("config_opts['plugin_conf'][%r] = %r\n" % (key, value))
+        # allow two-level dicts
+        if isinstance(value, dict):
+            parts.append("config_opts['plugin_conf'][%r] = {}\n" % key)
+            for key2 in sorted(value):
+                value2 = value[key2]
+                parts.append("config_opts['plugin_conf'][%r][%r] = %r\n" % (key, key2, value2))
+        else:
+            parts.append("config_opts['plugin_conf'][%r] = %r\n" % (key, value))
     parts.append("\n")
 
     if bind_opts:
@@ -1697,6 +1709,13 @@
         value = macros[key]
         parts.append("config_opts['macros'][%r] = %r\n" % (key, value))
     parts.append("\n")
+    envvars = opts.get('tag_envvars', {})
+    for key in sorted(envvars):
+        value = envvars[key]
+        parts.append("config_opts['environment'][%r] = %r\n" % (key, value))
+    if len(envvars):
+        parts.append("\n")
+
     for key in sorted(files):
         value = files[key]
         parts.append("config_opts['files'][%r] = %r\n" % (key, value))
@@ -1741,6 +1760,50 @@
     return rv
 
 
+def request_with_retry(retries=3, backoff_factor=0.3,
+                       status_forcelist=(500, 502, 504, 408, 429), session=None):
+    # stolen from https://www.peterbe.com/plog/best-practice-with-retries-with-requests
+    session = session or requests.Session()
+    retry = Retry(total=retries, read=retries, connect=retries,
+                  backoff_factor=backoff_factor,
+                  status_forcelist=status_forcelist)
+    adapter = HTTPAdapter(max_retries=retry)
+    session.mount('http://', adapter)
+    session.mount('https://', adapter)
+    return session
+
+
+def downloadFile(url, path=None, fo=None):
+    """download remote file.
+
+    :param str url: URL to download from
+    :param str path: relative path where to save the file
+    :param FileObject fo: if specified path will not be used (only for filetype
+                          detection)
+    """
+
+    if not fo:
+        fo = open(path, "w+b")
+
+    resp = request_with_retry().get(url, stream=True)
+    try:
+        for chunk in resp.iter_content(chunk_size=8192):
+            fo.write(chunk)
+    finally:
+        resp.close()
+    if resp.headers.get('Content-Length') and fo.tell() != int(resp.headers['Content-Length']):
+        raise GenericError("Downloaded file %s doesn't match expected size (%s vs %s)" %
+                           (url, fo.tell(), resp.headers['Content-Length']))
+    fo.seek(0)
+    if path and path.endswith('.rpm'):
+        # if it is an rpm run basic checks (assume that anything ending with the suffix,
+        # but not being rpm is suspicious anyway)
+        try:
+            check_rpm_file(fo)
+        except Exception as ex:
+            raise GenericError("Downloaded rpm %s is corrupted:\n%s" % (url, str(ex)))
+
+
 def openRemoteFile(relpath, topurl=None, topdir=None, tempdir=None):
     """Open a file on the main server (read-only)
 
@@ -1749,13 +1812,7 @@
     if topurl:
         url = "%s/%s" % (topurl, relpath)
         fo = tempfile.TemporaryFile(dir=tempdir)
-        resp = requests.get(url, stream=True)
-        try:
-            for chunk in resp.iter_content(chunk_size=8192):
-                fo.write(chunk)
-        finally:
-            resp.close()
-        fo.seek(0)
+        downloadFile(url, path=relpath, fo=fo)
     elif topdir:
         fn = "%s/%s" % (topdir, relpath)
         fo = open(fn)
@@ -1783,13 +1840,15 @@
     """Check that the open file appears to be an rpm"""
     # TODO: trap exception and raise something with more infomation
     ts = rpm.TransactionSet()
+    # for basic validity we can ignore sigs as there needn't be public keys installed
+    ts.setVSFlags(rpm._RPMVSF_NOSIGNATURES)
     try:
         hdr = ts.hdrFromFdno(fo.fileno())
     except rpm.error as ex:
         raise GenericError("rpm's header can't be extracted: %s (rpm error: %s)" %
                            (fo.name, ', '.join(ex.args)))
     try:
-        rpm.TransactionSet().hdrCheck(hdr.unload())
+        ts.hdrCheck(hdr.unload())
     except rpm.error as ex:
         raise GenericError("rpm's header can't be checked: %s (rpm error: %s)" %
                            (fo.name, ', '.join(ex.args)))
@@ -1834,10 +1893,6 @@
         'use_fast_upload': False,
         'upload_blocksize': 1048576,
         'poll_interval': 6,
-        'krbservice': 'host',
-        'krb_rdns': True,
-        'krb_canon_host': False,
-        'krb_server_realm': None,
         'principal': None,
         'keytab': None,
         'cert': None,
@@ -1884,9 +1939,8 @@
             # options *can* be set via the config file. Such options should
             # not have a default value set in the option parser.
             if name in result:
-                if name in ('anon_retry', 'offline_retry',
-                            'use_fast_upload', 'krb_rdns', 'debug',
-                            'debug_xmlrpc', 'krb_canon_host'):
+                if name in ('anon_retry', 'offline_retry', 'use_fast_upload',
+                            'debug', 'debug_xmlrpc'):
                     result[name] = config.getboolean(profile_name, name)
                 elif name in ('max_retries', 'retry_interval',
                               'offline_retry_interval', 'poll_interval',
@@ -1920,6 +1974,9 @@
         else:
             result[name] = os.path.expanduser(result[name])
 
+    if result.get('ca'):
+        util.deprecated("ca option in config file is deprecated and will be removed in 1.24")
+
     return result
 
 
@@ -2178,7 +2235,8 @@
     if ('Permission denied' in errstr or  # certificate not readable
             'certificate revoked' in errstr or
             'certificate expired' in errstr or
-            'certificate verify failed' in errstr):
+            'certificate verify failed' in errstr or
+            "doesn't match" in errstr):
         return True
 
     return False
@@ -2302,7 +2360,6 @@
     s_opts = (
         'user',
         'password',
-        'krbservice',
         'debug_xmlrpc',
         'debug',
         'max_retries',
@@ -2314,9 +2371,6 @@
         'auth_timeout',
         'use_fast_upload',
         'upload_blocksize',
-        'krb_rdns',
-        'krb_canon_host',
-        'krb_server_realm',
         'no_ssl_verify',
         'serverca',
     )
@@ -2405,124 +2459,14 @@
         return type(self)(self.baseurl, self.opts, sinfo)
 
     def krb_login(self, principal=None, keytab=None, ccache=None, proxyuser=None, ctx=None):
-        """Log in using Kerberos.  If principal is not None and keytab is
-        not None, then get credentials for the given principal from the given keytab.
-        If both are None, authenticate using existing local credentials (as obtained
-        from kinit).  ccache is the absolute path to use for the credential cache. If
-        not specified, the default ccache will be used.  If proxyuser is specified,
-        log in the given user instead of the user associated with the Kerberos
-        principal.  The principal must be in the "ProxyPrincipals" list on
-        the server side.  ctx is the Kerberos context to use, and should be unique
-        per thread.  If ctx is not specified, the default context is used."""
-
-        util.deprecated("Please use gssapi_login instead, krb_login will be removed in koji 1.22")
-        try:
-            # Silently try GSSAPI first
-            if self.gssapi_login(principal, keytab, ccache, proxyuser=proxyuser):
-                return True
-        except Exception as e:
-            if krbV:
-                e_str = ''.join(traceback.format_exception_only(type(e), e))
-                self.logger.debug('gssapi auth failed: %s', e_str)
-                pass
-            else:
-                raise
-
-        if not krbV:
-            raise PythonImportError(
-                "Please install python-krbV to use kerberos."
-            )
-
-        if not ctx:
-            ctx = krbV.default_context()
-
-        if ccache is not None:
-            ccache = krbV.CCache(name=ccache, context=ctx)
-        else:
-            ccache = ctx.default_ccache()
-
-        if principal is not None:
-            if keytab is not None:
-                cprinc = krbV.Principal(name=principal, context=ctx)
-                keytab = krbV.Keytab(name=keytab, context=ctx)
-                ccache.init(cprinc)
-                ccache.init_creds_keytab(principal=cprinc, keytab=keytab)
-            else:
-                raise AuthError('cannot specify a principal without a keytab')
-        else:
-            # We're trying to log ourself in.  Connect using existing credentials.
-            cprinc = ccache.principal()
-
-        self.logger.debug('Authenticating as: %s', cprinc.name)
-        sprinc = krbV.Principal(name=self._serverPrincipal(cprinc), context=ctx)
-
-        ac = krbV.AuthContext(context=ctx)
-        ac.flags = krbV.KRB5_AUTH_CONTEXT_DO_SEQUENCE | krbV.KRB5_AUTH_CONTEXT_DO_TIME
-        ac.rcache = ctx.default_rcache()
-
-        # create and encode the authentication request
-        (ac, req) = ctx.mk_req(server=sprinc, client=cprinc,
-                               auth_context=ac, ccache=ccache,
-                               options=krbV.AP_OPTS_MUTUAL_REQUIRED)
-        req_enc = base64.encodestring(req)
-
-        # ask the server to authenticate us
-        (rep_enc, sinfo_enc, addrinfo) = self.callMethod('krbLogin', req_enc, proxyuser)
-        # Set the addrinfo we received from the server
-        # (necessary before calling rd_priv())
-        # addrinfo is in (serveraddr, serverport, clientaddr, clientport)
-        # format, so swap the pairs because clientaddr is now the local addr
-        ac.addrs = tuple((addrinfo[2], addrinfo[3], addrinfo[0], addrinfo[1]))
-
-        # decode and read the reply from the server
-        rep = base64.b64decode(rep_enc)
-        ctx.rd_rep(rep, auth_context=ac)
-
-        # decode and decrypt the login info
-        sinfo_priv = base64.b64decode(sinfo_enc)
-        sinfo_str = ac.rd_priv(sinfo_priv)
-        sinfo = dict(zip(['session-id', 'session-key'], sinfo_str.split()))
-
-        if not sinfo:
-            self.logger.warning('No session info received')
-            return False
-        self.setSession(sinfo)
-
-        self.krb_principal = cprinc.name
-        self.authtype = AUTHTYPE_KERB
-        return True
-
-    def _serverPrincipal(self, cprinc):
-        """Get the Kerberos principal of the server we're connecting
-        to, based on baseurl."""
-
-        host = six.moves.urllib.parse.urlparse(self.baseurl).hostname
-        servername = self._fix_krb_host(host)
-        realm = self.opts.get('krb_server_realm')
-        if not realm:
-            realm = cprinc.realm
-        service = self.opts.get('krbservice', 'host')
-
-        ret = '%s/%s@%s' % (service, servername, realm)
-        self.logger.debug('Using server principal: %s', ret)
-        return ret
-
-    def _fix_krb_host(self, host):
-        if self.opts.get('krb_canon_host', False):
-            if dns_resolver is None:
-                self.logger.warning('python-dns missing -- cannot resolve hostname')
-            else:
-                answer = dns_resolver.query(host, 'A')
-                return answer.canonical_name.to_text(omit_final_dot=True)
-        if self.opts.get('krb_rdns', True):
-            return socket.getfqdn(host)
-        # else
-        return host
+        util.deprecated("krb_login is deprecated, use gssapi_login instead")
+        return self.gssapi_login(principal=principal, keytab=keytab,
+                                 ccache=ccache, proxyuser=proxyuser)
 
     def gssapi_login(self, principal=None, keytab=None, ccache=None, proxyuser=None):
-        if not requests_kerberos:
+        if not reqgssapi:
             raise PythonImportError(
-                "Please install python-requests-kerberos to use GSSAPI."
+                "Please install python-requests-gssapi to use GSSAPI."
             )
         # force https
         old_baseurl = self.baseurl
@@ -2549,14 +2493,14 @@
                 old_env['KRB5CCNAME'] = os.environ.get('KRB5CCNAME')
                 os.environ['KRB5CCNAME'] = ccache
             if principal:
-                if re.match(r'0[.][1-8]\b', requests_kerberos.__version__):
+                if re.match(r'0[.][1-8]\b', reqgssapi.__version__):
                     raise PythonImportError(
-                        'python-requests-kerberos >= 0.9.0 required for '
+                        'python-requests-gssapi >= 0.9.0 required for '
                         'keytab auth'
                     )
                 else:
                     kwargs['principal'] = principal
-            self.opts['auth'] = requests_kerberos.HTTPKerberosAuth(**kwargs)
+            self.opts['auth'] = reqgssapi.HTTPKerberosAuth(**kwargs)
             try:
                 # Depending on the server configuration, we might not be able to
                 # connect without client certificate, which means that the conn
@@ -3041,24 +2985,24 @@
         fo = open(localfile, "rb")  # specify bufsize?
         totalsize = os.path.getsize(localfile)
         ofs = 0
-        md5sum = hashlib.md5()
+        sha256sum = hashlib.sha256sum()
         debug = self.opts.get('debug', False)
         if callback:
             callback(0, totalsize, 0, 0, 0)
         while True:
             lap = time.time()
             contents = fo.read(blocksize)
-            md5sum.update(contents)
+            sha256sum.update(contents)
             size = len(contents)
             data = util.base64encode(contents)
             if size == 0:
                 # end of file, use offset = -1 to finalize upload
                 offset = -1
-                digest = md5sum.hexdigest()
+                digest = sha256sum.hexdigest()
                 sz = ofs
             else:
                 offset = ofs
-                digest = hashlib.md5(contents).hexdigest()
+                digest = hashlib.sha256(contents).hexdigest()
                 sz = size
             del contents
             tries = 0
@@ -3066,7 +3010,8 @@
                 if debug:
                     self.logger.debug("uploadFile(%r,%r,%r,%r,%r,...)" %
                                       (path, name, sz, digest, offset))
-                if self.callMethod('uploadFile', path, name, sz, digest, offset, data, **volopts):
+                if self.callMethod('uploadFile', path, name, sz, ("sha256", digest),
+                                   offset, data, **volopts):
                     break
                 if tries <= retries:
                     tries += 1
@@ -3312,10 +3257,12 @@
 
 def formatTime(value):
     """Format a timestamp so it looks nicer"""
-    if not value:
+    if not value and not isinstance(value, (int, float)):
         return ''
     if isinstance(value, xmlrpc_client.DateTime):
         value = datetime.datetime.strptime(value.value, "%Y%m%dT%H:%M:%S")
+    elif isinstance(value, (int, float)):
+        value = datetime.datetime.fromtimestamp(value)
     if isinstance(value, datetime.datetime):
         return value.strftime('%Y-%m-%d %H:%M:%S')
     else:
@@ -3331,12 +3278,22 @@
     """Format a timestamp to a more human-reable format, i.e.:
     Sat, 07 Sep 2002 00:00:01 GMT
     """
-    if not value:
+    if not value and not isinstance(value, (int, float)):
         return ''
-    else:
-        # Assume the string value passed in is the local time
-        localtime = time.mktime(time.strptime(formatTime(value), '%Y-%m-%d %H:%M:%S'))
-        return time.strftime('%a, %d %b %Y %H:%M:%S %Z', time.localtime(localtime))
+    if isinstance(value, six.string_types):
+        t = dateutil.parser.parse(value)
+    elif isinstance(value, xmlrpc_client.DateTime):
+        t = dateutil.parser.parse(value.value)
+    elif isinstance(value, (int, float)):
+        t = datetime.datetime.fromtimestamp(value)
+    else:
+        t = value
+    # return date in local timezone, py 2.6 has tzone as astimezone required parameter
+    # would work simply as t.astimezone() for py 2.7+
+    if t.tzinfo is None:
+        t = t.replace(tzinfo=dateutil.tz.gettz())
+    t = t.astimezone(dateutil.tz.gettz())
+    return datetime.datetime.strftime(t, '%a, %d %b %Y %H:%M:%S %Z')
 
 
 def buildLabel(buildInfo, showEpoch=False):
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/tasks.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/tasks.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/tasks.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/tasks.py	2020-09-07 15:44:50.000000000 +0800
@@ -28,7 +28,6 @@
 import signal
 import time
 
-import requests
 import six.moves.xmlrpc_client
 from six.moves import range
 
@@ -495,15 +494,9 @@
                 return fn
             self.logger.debug("Downloading %s", relpath)
             url = "%s/%s" % (self.options.topurl, relpath)
-            resp = requests.get(url, stream=True)
-            try:
-                if not os.path.exists(os.path.dirname(fn)):
-                    os.makedirs(os.path.dirname(fn))
-                with open(fn, 'wb') as fdst:
-                    for chunk in resp.iter_content(chunk_size=8192):
-                        fdst.write(chunk)
-            finally:
-                resp.close()
+            if not os.path.exists(os.path.dirname(fn)):
+                os.makedirs(os.path.dirname(fn))
+            koji.downloadFile(url, path=fn)
         else:
             fn = "%s/%s" % (self.options.topdir, relpath)
         return fn
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/util.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/util.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji/util.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji/util.py	2020-09-07 15:44:50.000000000 +0800
@@ -45,6 +45,18 @@
 from koji.xmlrpcplus import DateTime
 
 
+# BEGIN kojikamid dup #
+
+def md5_constructor(*args, **kwargs):
+    if hasattr(hashlib._hashlib, 'get_fips_mode') and hashlib._hashlib.get_fips_mode():
+        # do not care about FIPS we need md5 for signatures and older hashes
+        # It is still used for *some* security
+        kwargs['usedforsecurity'] = False
+    return hashlib.md5(*args, **kwargs)
+
+# END kojikamid dup #
+
+
 # imported from kojiweb and kojihub
 def deprecated(message):
     """Print deprecation warning"""
@@ -123,18 +135,18 @@
     return '%s:%02i' % (mins, secs)
 
 
-def printList(l):
+def printList(lst):
     """Print the contents of the list comma-separated"""
-    if len(l) == 0:
+    if len(lst) == 0:
         return ''
-    elif len(l) == 1:
-        return l[0]
-    elif len(l) == 2:
-        return ' and '.join(l)
+    elif len(lst) == 1:
+        return lst[0]
+    elif len(lst) == 2:
+        return ' and '.join(lst)
     else:
-        ret = ', '.join(l[:-1])
+        ret = ', '.join(lst[:-1])
         ret += ', and '
-        ret += l[-1]
+        ret += lst[-1]
         return ret
 
 
@@ -583,7 +595,7 @@
         f.seek(o)
 
         # compute md5 of rest of file
-        md5 = hashlib.md5()
+        md5 = md5_constructor()
         while True:
             d = f.read(1024**2)
             if not d:
@@ -838,7 +850,7 @@
     return builds
 
 
-def to_list(l):
+def to_list(lst):
     """
     Helper function for py2/py3 compatibility used e.g. in
     list(dict.keys())
@@ -847,7 +859,7 @@
     used, so it is always an iterator.
     """
 
-    if isinstance(l, list):
-        return l
+    if isinstance(lst, list):
+        return lst
     else:
-        return list(l)
+        return list(lst)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji.spec /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji.spec
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/koji.spec	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/koji.spec	2020-09-07 15:44:50.000000000 +0800
@@ -81,7 +81,7 @@
 %define release %{baserelease}
 %endif
 Name: koji
-Version: 1.21.1
+Version: 1.22.1
 Release: %{release}%{?dist}
 License: LGPLv2 and GPLv2+
 # the included arch lib from yum's rpmUtils is GPLv2+
@@ -125,11 +125,7 @@
 %endif
 Requires: pyOpenSSL
 Requires: python-requests
-%if 0%{?fedora} || 0%{?rhel} >= 7
 Requires: python-requests-kerberos
-%else
-Requires: python-krbV >= 1.0.13
-%endif
 Requires: python-dateutil
 Requires: python-six
 
@@ -149,7 +145,11 @@
 %endif
 Requires: python%{python3_pkgversion}-pyOpenSSL
 Requires: python%{python3_pkgversion}-requests
+%if 0%{?fedora} >= 32
+Requires: python%{python3_pkgversion}-requests-gssapi
+%else
 Requires: python%{python3_pkgversion}-requests-kerberos
+%endif
 Requires: python%{python3_pkgversion}-dateutil
 Requires: python%{python3_pkgversion}-six
 
@@ -183,6 +183,7 @@
 Plugins to the koji command-line interface
 %endif
 
+%if 0%{py3_support} > 1
 %package hub
 Summary: Koji XMLRPC interface
 Group: Applications/Internet
@@ -197,27 +198,6 @@
 %description hub
 koji-hub is the XMLRPC interface to the koji database
 
-%if 0%{py2_support} > 1
-%package -n python2-%{name}-hub
-Summary: Koji XMLRPC interface
-Group: Applications/Internet
-License: LGPLv2 and GPLv2
-# rpmdiff lib (from rpmlint) is GPLv2 (only)
-Requires: httpd
-Requires: mod_wsgi
-%if 0%{?fedora} || 0%{?rhel} >= 7
-Requires: mod_auth_gssapi
-%endif
-Requires: python-psycopg2
-Requires: python2-%{name} = %{version}-%{release}
-# py2 xor py3
-Provides: %{name}-hub-code = %{version}-%{release}
-
-%description -n python2-%{name}-hub
-koji-hub is the XMLRPC interface to the koji database
-%endif
-
-%if 0%{py3_support} > 1
 %package -n python%{python3_pkgversion}-%{name}-hub
 Summary: Koji XMLRPC interface
 Group: Applications/Internet
@@ -235,7 +215,6 @@
 
 %description -n python%{python3_pkgversion}-%{name}-hub
 koji-hub is the XMLRPC interface to the koji database
-%endif
 
 %package hub-plugins
 Summary: Koji hub plugins
@@ -249,27 +228,6 @@
 %description hub-plugins
 Plugins to the koji XMLRPC interface
 
-%if 0%{py2_support} > 1
-%package -n python2-%{name}-hub-plugins
-Summary: Koji hub plugins
-Group: Applications/Internet
-License: LGPLv2
-Requires: python2-%{name}-hub = %{version}-%{release}
-%if 0%{?rhel} < 8
-Requires: python-qpid-proton
-%else
-Requires: python2-qpid-proton
-%endif
-Requires: cpio
-Provides: %{name}-hub-plugins-code = %{version}-%{release}
-Obsoletes: python2-%{name}-sidetag-plugin-hub < %{version}-%{release}
-Provides: python2-%{name}-sidetag-plugin-hub = %{version}-%{release}
-
-%description -n python2-%{name}-hub-plugins
-Plugins to the koji XMLRPC interface
-%endif
-
-%if 0%{py3_support} > 1
 %package -n python%{python3_pkgversion}-%{name}-hub-plugins
 Summary: Koji hub plugins
 Group: Applications/Internet
@@ -384,6 +342,7 @@
 %description utils
 Utilities for the Koji system
 
+%if 0%{py3_support} > 1
 %package web
 Summary: Koji Web UI
 Group: Applications/Internet
@@ -397,30 +356,6 @@
 %description web
 koji-web is a web UI to the Koji system.
 
-%if 0%{py2_support} > 1
-%package -n python2-%{name}-web
-Summary: Koji Web UI
-Group: Applications/Internet
-License: LGPLv2
-%{?python_provide:%python_provide python2-%{name}-web}
-Requires: httpd
-Requires: mod_wsgi
-%if 0%{?fedora} || 0%{?rhel} >= 7
-Requires: mod_auth_gssapi
-%else
-Requires: mod_auth_kerb
-Requires: python-krbV >= 1.0.13
-%endif
-Requires: python-psycopg2
-Requires: python-cheetah
-Requires: python2-%{name} = %{version}-%{release}
-Provides: %{name}-web-code = %{version}-%{release}
-
-%description -n python2-%{name}-web
-koji-web is a web UI to the Koji system.
-%endif
-
-%if 0%{py3_support} > 1
 %package -n python%{python3_pkgversion}-%{name}-web
 Summary: Koji Web UI
 Group: Applications/Internet
@@ -439,7 +374,7 @@
 %endif
 
 %prep
-%setup -q
+%autosetup -p1
 
 %build
 
@@ -470,7 +405,8 @@
 make DESTDIR=$RPM_BUILD_ROOT PYTHON=%{__python3} %{?install_opt} install
 # alter python interpreter in koji CLI
 scripts='%{_bindir}/koji %{_sbindir}/kojid %{_sbindir}/kojira %{_sbindir}/koji-shadow
-         %{_sbindir}/koji-gc %{_sbindir}/kojivmd %{_sbindir}/koji-sweep-db'
+         %{_sbindir}/koji-gc %{_sbindir}/kojivmd %{_sbindir}/koji-sweep-db
+         %{_sbindir}/koji-sidetag-cleanup'
 for fn in $scripts ; do
     sed -i 's|#!/usr/bin/python2|#!/usr/bin/python3|' $RPM_BUILD_ROOT$fn
 done
@@ -507,6 +443,24 @@
 %endif
 %endif
 
+# in case, we're building only py2, delete all py3 content
+%if 0%{py3_support} < 1 && 0%{py2_support} > 0
+   rm -rf %{buildroot}%{_datadir}/koji-web
+   rm -rf %{buildroot}%{_datadir}/koji-hub
+   rm -rf %{buildroot}%{_prefix}/lib/koji-hub-plugins
+   rm -f %{buildroot}/etc/httpd/conf.d/kojihub.conf
+   rm -f %{buildroot}/etc/httpd/conf.d/kojiweb.conf
+   rm -f %{buildroot}/etc/koji-hub/hub.conf
+   rm -f %{buildroot}/etc/koji-hub/plugins/protonmsg.conf
+   rm -f %{buildroot}/etc/koji-hub/plugins/rpm2maven.conf
+   rm -f %{buildroot}/etc/koji-hub/plugins/save_failed_tree.conf
+   rm -f %{buildroot}/etc/koji-hub/plugins/sidetag.conf
+   rm -f %{buildroot}/etc/kojiweb/web.conf
+   rm -f %{buildroot}%{_prefix}/lib/systemd/system/koji-sweep-db.service
+   rm -f %{buildroot}%{_prefix}/lib/systemd/system/koji-sweep-db.timer
+   rm -f %{buildroot}%{_prefix}/sbin/koji-sweep-db
+%endif
+
 %clean
 rm -rf $RPM_BUILD_ROOT
 
@@ -544,10 +498,11 @@
 #%%config(noreplace) %%{_sysconfdir}/koji/plugins/*.conf
 %endif
 
+%if 0%{py3_support} > 1
 %files hub
-%config(noreplace) /etc/httpd/conf.d/kojihub.conf
+%config(noreplace) %attr(0640, root, apache) /etc/httpd/conf.d/kojihub.conf
 %dir /etc/koji-hub
-%config(noreplace) /etc/koji-hub/hub.conf
+%config(noreplace) %attr(0640, root, apache) /etc/koji-hub/hub.conf
 %dir /etc/koji-hub/hub.conf.d
 %{_sbindir}/koji-sweep-db
 %if %{use_systemd}
@@ -555,27 +510,14 @@
 %{_unitdir}/koji-sweep-db.timer
 %endif
 
-%if 0%{py2_support} > 1
-%files -n python2-%{name}-hub
-%{_datadir}/koji-hub/*.py*
-%endif
-
-%if 0%{py3_support} > 1
 %files -n python%{python3_pkgversion}-%{name}-hub
 %{_datadir}/koji-hub/*.py
 %{_datadir}/koji-hub/__pycache__
-%endif
 
 %files hub-plugins
 %dir /etc/koji-hub/plugins
 %config(noreplace) /etc/koji-hub/plugins/*.conf
 
-%if 0%{py2_support} > 1
-%files -n python2-%{name}-hub-plugins
-%{_prefix}/lib/koji-hub-plugins/*.py*
-%endif
-
-%if 0%{py3_support} > 1
 %files -n python%{python3_pkgversion}-%{name}-hub-plugins
 %{_prefix}/lib/koji-hub-plugins/*.py
 %{_prefix}/lib/koji-hub-plugins/__pycache__
@@ -593,10 +535,9 @@
 %files utils
 %{_sbindir}/kojira
 %if %{use_systemd}
+%{_unitdir}/koji-gc.service
+%{_unitdir}/koji-gc.timer
 %{_unitdir}/kojira.service
-%else
-%{_initrddir}/kojira
-%config(noreplace) /etc/sysconfig/kojira
 %endif
 %dir /etc/kojira
 %config(noreplace) /etc/kojira/kojira.conf
@@ -609,26 +550,23 @@
 %config(noreplace) /etc/koji-shadow/koji-shadow.conf
 %{_sbindir}/koji-sidetag-cleanup
 
+%if 0%{py3_support} > 1
 %files web
 %dir /etc/kojiweb
 %config(noreplace) /etc/kojiweb/web.conf
 %config(noreplace) /etc/httpd/conf.d/kojiweb.conf
 %dir /etc/kojiweb/web.conf.d
 
-%if 0%{py2_support} > 1
-%files -n python2-%{name}-web
-%{_datadir}/koji-web
-%endif
-
-%if 0%{py3_support} > 1
 %files -n python%{python3_pkgversion}-%{name}-web
 %{_datadir}/koji-web
 %endif
 
 %files builder
 %{_sbindir}/kojid
+%if 0%{py2_support} > 1
 %dir %{_libexecdir}/kojid
 %{_libexecdir}/kojid/mergerepos
+%endif
 %if %{use_systemd}
 %{_unitdir}/kojid.service
 %else
@@ -724,6 +662,142 @@
 %endif
 
 %changelog
+* Tue Jul 28 2020 Mike McLean <mikem at redhat.com> - 1.22.0-1
+- PR#2404: release bump and changelog
+- PR#2393: release notes - 1.22
+- PR#2397: kojira: remove unused delete_batch_size
+- PR#2401: kojira: drop reference to krb_login
+- PR#2280: Use requests_gssapi instead of requests_kerberos
+- PR#2244: remove deprecated krbV support
+- PR#2340: kojira: threaded repo deletion
+- PR#2337: align option naming with mock
+- PR#2363: sphinx formatting fixes for hub policy doc
+- PR#2377: hub: document listBType return value when query matches no entries
+- PR#2123: Pass buildroot to preSCMCheckout and postSCMCheckout where applicable.
+- PR#2257:  BuildSRPMFromSCMTask: Support auto-selecting a matching specfile name
+- PR#2387: cli: list-tags: fall back to old behavior on ParameterError
+- PR#2353: turn off dnf_warning in mock.cfg
+- PR#2385: doc: exporting repositories
+- PR#2372: TaskManager: clean both result and results dirs
+- PR#2376: kojid: use mergerepo_c for all merge modes
+- PR#2359: hub: importImage doesn't honor volume
+- PR#2364: cli clone-tag - get srctag info with event
+- PR#2347: cli: fix image-build-indirection --wait
+- PR#2366: upgrade-sql: fix backward compatibility
+- PR#2369: hub: make sure checksum_type is int for DB
+- PR#2306: Provide task-based data to volume policy
+- PR#2346: cli: --wait for download-task
+- PR#2342: fix simple_error_message encoding
+- PR#2358: web: remove "GssapiLocalName off" setting
+- PR#2354: fix error message
+- PR#2351: hub: remove "GssapiLocalName off" setting
+- PR#2350: doc: improve hub selinux instructions
+- PR#2352: doc: update test suite dependency list for py3
+- PR#2348: fix option order
+- PR#2339: kojira: drop kojira.sysconfig
+- PR#2320: hub: allow glob matching for listTags
+- PR#2344: runroot: basic docs
+- PR#2345: builder: document plugin callbacks
+- PR#2327: koji-gc: fix py3 compare behaviour for dicts
+- PR#2338: hub: fix typo
+- PR#2334: hub: fix index so it gets used by planner
+- PR#2137: more debug info for un/tracked tasks in kojira
+- PR#2161: doc: update documentation for SSLCACertificateFile
+- PR#2162: hub: remove "GssapiSSLonly Off" option
+- PR#2287: doc: rewrite PostgreSQL authorization instructions
+- PR#2290: vm: clone mac address via xml
+- PR#2317: md5: try the best to use sha256 instead of md5 and ignore FIPS in other parts
+- PR#2263: improve race condition for getNextRelease / images
+- PR#2085: hide local --debug options
+- PR#2301: avoid redundant clauses and joins in query_buildroots()
+- PR#2237: db: use timestamps with timezone
+- PR#2329: docs: align "Hub" text in diagram
+- PR#2330: clean_old option was duplicated on clean_empty
+- PR#2331: hub: document listChannels arguments
+- PR#2318: make mock depsolver policy configurable
+- PR#1932: per-tag settings for mock's sign plugin
+- PR#2328: koji-gc: fix flake8
+- PR#2218: Drop py2 support for hub/web
+- PR#2316: kojira: replace deprecated Thread.isAlive()
+- PR#2309: hub: simplify recipients condition in build_notification()
+- PR#2326: sidetag: parenthesis typo
+- PR#2322: Side tags: allow admin ops and misc fixes
+- PR#2323: kojira: Fix logic detecting directories
+- PR#2276: document merge modes
+- PR#2310: hub: fix "opt-outs" comment in get_notification_recipients()
+- PR#2256: Don't break on deleted tag
+- PR#2154: kojira: swap first_seen with latest mtime for repo
+- PR#2275: hub: default policy allow packagelist changes with 'tag' permission
+- PR#2255: cli: output extra['rpm.macro.*'] to mock-config
+- PR#2253: koji-gc: set smtp_host to localhost by default
+- PR#2308: hub: return empty list in get_notification_recipients()
+- PR#2293: disable notifications by default in [un]tagBuildBypass calls
+- PR#2303: hub: query_buildroots fix query behaviour
+- PR#2299: hub: query_buildroots have to return ASAP
+- PR#2166: mock's boostrap + image support
+- PR#2295: Koji 1.21.1 release notes
+- PR#2278: koji-gc: fix cc/bcc e-mail handling
+- PR#2212: kojid: remove bootstrap dir
+- PR#2254:  openRemoteFile retries and checks downloaded content
+- PR#2225: hub: log tracebacks for multicalls
+- PR#2279: koji-gc: fix query order
+- PR#2064: Support tag specific environment variables
+- PR#2153: koji-gc: various typos in maven path
+- PR#2193: www: repoinfo page
+- PR#2268: don't decode signature headers
+- PR#2214: cli: drop unneeded activate_session
+- PR#2266: Correctly identify "hostname doesn't match" errors
+- PR#2228: cli: flush stdout during watch-logs
+- PR#2264: replace deprecated function with logging
+- PR#2262: Pass bootloader append option to livemedia builds
+- PR#2195: koji-gc: allow specifying CC and BCC address for email notifications
+- PR#2141: kojiweb: update for mod_auth_gssapi configuration
+- PR#2238: hub: deprecate host.getTask call
+- PR#2224: cli: fix variable name
+- PR#2245: cli: extend docs for --before/--after options
+- PR#2246: deprecated warning for cli option --ca as well
+- PR#2248: doc: links to copr builds
+- PR#2223: cli: fix un/lock-tag permission handling
+- PR#2241: hub: API docs
+- PR#2242: hub: additional API docs
+- PR#2199: koji-gc: add systemd unit files
+- PR#2157: kojira: use cached getTag for external repos
+- PR#2226: cli: deprecate --ca
+- PR#2197: Use %autosetup (fixes #2196)
+- PR#2235: doc: update postgresql-setup command for el8 and Fedora
+- PR#2236: fix additional flake8 problems
+- PR#2233: fix flake8 errors
+- PR#2151: koji-gc: support request_kerberos
+- PR#2211: koji-gc: test existence of trashcan tag
+- PR#2132: listSideTags returns also user info
+- PR#2187: koji-sweep-db: use "Type=oneshot" for systemd
+- PR#2213: Correct docstring about deleting inheritance rules
+- PR#2209: koji-utils: only requires /usr/bin/python2 on rhel<=7
+- PR#2205: doc: fix koji-sweep-db filename typo
+- PR#2206: doc: indent SQL query for user ID discovery
+- PR#2207: cli: improve grant-permission --new --help message
+- PR#2203: hub: admin can't force tag now
+- PR#2194: remove obsoleted note
+- PR#2158: hub: document addExternalRepoToTag arguments
+- PR#2172: hub: document createUser arguments
+- PR#2180: cli: fix "list-history --help" text for "--cg"
+- PR#2044: Unify error messages in CLI
+- fix flake8
+- PR#2024: queue log file for kojira
+- PR#2136: replace logging.warn with warning
+- PR#2038: Don't use listTagged(tag, *) for untag-build
+- PR#2103: fix list-signed --tag memory issues
+- PR#2150: translate exceptions to GenericError
+- PR#2176: hub: document editUser method
+- PR#2175: kojira: remove duplicate Kerberos configuration boilerplate
+- Merge #2173 `hub: document getTagExternalRepos`
+- PR#2177: doc: "koji build" requires a target
+- PR#2178: docs: Fix sidetag enablement typo
+- PR#2174: hub: document removeExternalRepoFromTag arguments
+- hub: document getTagExternalRepos
+- fix docs
+- missing file from 1.21 docs
+
 * Wed Jun 03 2020 Tomas Kopecek <tkopecek at redhat.com> - 1.21.1-1
  - PR#2279: koji-gc: fix query order
  - PR#2038: Don't use listTagged(tag, *) for untag-build
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/Makefile /home/koji22/rpmbuild/BUILD/koji-1.22.1/Makefile
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/Makefile	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/Makefile	2020-09-07 15:44:50.000000000 +0800
@@ -80,8 +80,9 @@
 
 test2:
 	coverage2 erase
-	PYTHONPATH=hub/.:plugins/hub/.:plugins/builder/.:plugins/cli/.:cli/.:www/lib coverage2 run \
-	    --source . -m nose
+	PYTHONPATH=.:plugins/builder/.:plugins/cli/.:cli/.:www/lib coverage2 run \
+	    --source . -m nose tests/test_builder tests/test_cli tests/test_lib \
+	    tests/test_plugins/test*builder.py tests/test_plugins/test*cli.py
 	coverage2 report
 	coverage2 html
 	@echo Full coverage report at file://${CURDIR}/htmlcov/py2/index.html
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/echo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/echo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/echo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/echo.py	2020-09-07 15:44:50.000000000 +0800
@@ -5,8 +5,6 @@
 # Authors:
 #     Mike Bonnet <mikeb@redhat.com>
 
-from __future__ import absolute_import
-
 import logging
 
 from koji.plugin import callback, callbacks, ignore_error
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/protonmsg.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/protonmsg.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/protonmsg.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/protonmsg.py	2020-09-07 15:44:50.000000000 +0800
@@ -5,8 +5,6 @@
 # Authors:
 #     Mike Bonnet <mikeb@redhat.com>
 
-from __future__ import absolute_import
-
 import json
 import logging
 import random
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/rpm2maven.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/rpm2maven.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/rpm2maven.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/rpm2maven.py	2020-09-07 15:44:50.000000000 +0800
@@ -5,8 +5,6 @@
 # Authors:
 #     Mike Bonnet <mikeb@redhat.com>
 
-from __future__ import absolute_import
-
 import fnmatch
 import os
 import subprocess
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/runroot_hub.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/runroot_hub.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/runroot_hub.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/runroot_hub.py	2020-09-07 15:44:50.000000000 +0800
@@ -3,8 +3,6 @@
 # plugin has a config file.  This hub plugin has no config file.
 
 
-from __future__ import absolute_import
-
 import random
 import sys
 
@@ -13,7 +11,7 @@
 from koji.plugin import export
 # XXX - have to import kojihub for make_task
 sys.path.insert(0, '/usr/share/koji-hub/')
-import kojihub  # noqa: F402
+import kojihub  # noqa: E402
 
 __all__ = ('runroot',)
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/save_failed_tree.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/save_failed_tree.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/save_failed_tree.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/save_failed_tree.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,10 @@
-from __future__ import absolute_import
-
 import sys
 
 import koji
 from koji.context import context
 from koji.plugin import export
 sys.path.insert(0, '/usr/share/koji-hub/')
-import kojihub  # noqa: F402
+import kojihub  # noqa: E402
 
 __all__ = ('saveFailedTree',)
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/sidetag_hub.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/sidetag_hub.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/plugins/hub/sidetag_hub.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/plugins/hub/sidetag_hub.py	2020-09-07 15:44:50.000000000 +0800
@@ -8,7 +8,7 @@
 from koji.context import context
 from koji.plugin import callback, export
 sys.path.insert(0, "/usr/share/koji-hub/")
-from kojihub import (  # noqa: F402
+from kojihub import (  # noqa: E402
     QueryProcessor,
     _create_build_target,
     _create_tag,
@@ -34,14 +34,19 @@
     if not result and raise_error:
         raise koji.GenericError("Not a sidetag: %(name)s" % taginfo)
 
+    return result
+
 
 def is_sidetag_owner(taginfo, user, raise_error=False):
     """Check, that given user is owner of the sidetag"""
     result = (taginfo['extra'].get('sidetag') and
-              taginfo['extra'].get('sidetag_user_id') == user['id'])
+              (taginfo['extra'].get('sidetag_user_id') == user['id'] or
+               context.session.hasPerm('admin')))
     if not result and raise_error:
         raise koji.ActionNotAllowed("This is not your sidetag")
 
+    return result
+
 
 # Policy tests
 class SidetagTest(koji.policy.MatchTest):
@@ -163,6 +168,8 @@
     :param queryOpts: additional query options
                       {countOnly, order, offset, limit}
     :type queryOpts: dict
+
+    :returns: list of dicts: id, name, user_id, user_name
     """
     # te1.sidetag
     # te2.user_id
@@ -176,17 +183,20 @@
     else:
         basetag_id = None
 
-    joins = ["LEFT JOIN tag_extra AS te1 ON tag.id = te1.tag_id"]
-    clauses = ["te1.active IS TRUE", "te1.key = 'sidetag'", "te1.value = 'true'"]
+    joins = [
+        "LEFT JOIN tag_extra AS te1 ON tag.id = te1.tag_id",
+        "LEFT JOIN tag_extra AS te2 ON tag.id = te2.tag_id",
+        "LEFT JOIN users ON CAST(te2.value AS INTEGER) = users.id",
+    ]
+    clauses = [
+        "te1.active IS TRUE",
+        "te1.key = 'sidetag'",
+        "te1.value = 'true'",
+        "te2.active IS TRUE",
+        "te2.key = 'sidetag_user_id'"
+    ]
     if user_id:
-        joins.append("LEFT JOIN tag_extra AS te2 ON tag.id = te2.tag_id")
-        clauses.extend(
-            [
-                "te2.active IS TRUE",
-                "te2.key = 'sidetag_user_id'",
-                "te2.value = %(user_id)s",
-            ]
-        )
+        clauses.append("te2.value = %(user_id)s")
     if basetag_id:
         joins.append("LEFT JOIN tag_inheritance ON tag.id = tag_inheritance.tag_id")
         clauses.extend(
@@ -199,8 +209,8 @@
     query = QueryProcessor(
         tables=["tag"],
         clauses=clauses,
-        columns=["tag.id", "tag.name"],
-        aliases=["id", "name"],
+        columns=["tag.id", "tag.name", "te2.value", "users.name"],
+        aliases=["id", "name", "user_id", "user_name"],
         joins=joins,
         values={"basetag_id": basetag_id, "user_id": user_id},
         opts=queryOpts,
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/setup.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/setup.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/setup.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/setup.py	2020-09-07 15:44:50.000000000 +0800
@@ -14,16 +14,12 @@
     requires = [
         'python-dateutil',
         'requests',
-        'requests-kerberos',
+        'requests-gssapi',
         'six',
         # 'libcomps',
         # 'rpm-py-installer', # it is optional feature
         # 'rpm',
     ]
-    if sys.version_info[0] < 3:
-        # optional auth library for older hubs
-        # hubs >= 1.12 are using requests' default GSSAPI
-        requires.append('python-krbV')
     # since pyOpenSSL-18.0.0, py26 support is dropped
     # see https://pagure.io/koji/issue/1060
     if sys.version_info[0] == 2 and sys.version_info[1] < 7:
@@ -36,7 +32,7 @@
 
 setup(
     name="koji",
-    version="1.21.1",
+    version="1.22.1",
     description=("Koji is a system for building and tracking RPMS. The base"
                  " package contains shared libraries and the command-line"
                  " interface."),
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_builder/data/calls/build_notif_1/message.txt /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_builder/data/calls/build_notif_1/message.txt
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_builder/data/calls/build_notif_1/message.txt	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_builder/data/calls/build_notif_1/message.txt	2020-09-07 15:44:50.000000000 +0800
@@ -11,8 +11,8 @@
 Status: complete
 Built by: user
 ID: 612609
-Started: Wed, 18 Feb 2015 14:50:37 EST
-Finished: Wed, 18 Feb 2015 14:57:37 EST
+Started: Wed, 18 Feb 2015 09:50:37 EST
+Finished: Wed, 18 Feb 2015 09:57:37 EST
 Changelog:
 * Wed Feb 18 2015 Happy Koji User <user@example.com> - 1:0.3.0-0.2.M1
 - Unbundle ASM
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_builder/test_build_notification.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_builder/test_build_notification.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_builder/test_build_notification.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_builder/test_build_notification.py	2020-09-07 15:44:50.000000000 +0800
@@ -59,6 +59,7 @@
 class TestBuildNotification(unittest.TestCase):
 
     def setUp(self):
+        self.maxDiff = None
         self.original_timezone = os.environ.get('TZ')
         os.environ['TZ'] = 'US/Eastern'
         time.tzset()
@@ -111,5 +112,5 @@
             msg_expect = fp.read()
         if six.PY2:
             msg_expect = msg_expect.decode()
-        self.assertEqual(message, msg_expect)
+        self.assertMultiLineEqual(message.decode(), msg_expect.decode())
         locale.resetlocale()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_activate_session.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_activate_session.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_activate_session.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_activate_session.py	2020-09-07 15:44:50.000000000 +0800
@@ -17,8 +17,6 @@
         self.warn = mock.patch('koji_cli.lib.warn').start()
         self.error = mock.patch('koji_cli.lib.error').start()
         # self.ensure_connection = mock.patch('koji_cli.lib.warn.ensure_connection').start()
-        self.has_krb_creds = mock.patch('koji_cli.lib.has_krb_creds').start()
-        self.has_krb_creds.return_value = False
 
     def tearDown(self):
         mock.patch.stopall()
@@ -33,7 +31,6 @@
         activate_session(session, options)
         session.login.assert_not_called()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_not_called()
 
     def test_activate_session_ssl(self):
@@ -48,7 +45,6 @@
         session.ssl_login.assert_called_once_with(certfile, None, 'SERVERCA',
                     proxyuser=None)
         session.login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_not_called()
 
     def test_activate_session_ssl_implicit(self):
@@ -64,7 +60,6 @@
         session.ssl_login.assert_called_once_with(certfile, None, 'SERVERCA',
                     proxyuser=None)
         session.login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_not_called()
 
     def test_activate_session_pw(self):
@@ -74,7 +69,6 @@
         activate_session(session, options)
         session.login.assert_called_once_with()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_not_called()
 
     def test_activate_session_pw_implicit(self):
@@ -85,7 +79,6 @@
         activate_session(session, options)
         session.login.assert_called_once_with()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_not_called()
 
     def test_activate_session_krb(self):
@@ -96,7 +89,6 @@
         activate_session(session, options)
         session.login.assert_not_called()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_called_once_with(proxyuser=None)
 
     def test_activate_session_krb_implicit(self):
@@ -104,11 +96,9 @@
         session.logged_in = True
         options = {'authtype': None, 'debug': False, 'cert': '',
                 'keytab': None, 'principal': None}
-        self.has_krb_creds.return_value = True
         activate_session(session, options)
         session.login.assert_not_called()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_called_once_with(proxyuser=None)
 
     def test_activate_session_krb_keytab(self):
@@ -119,7 +109,6 @@
         activate_session(session, options)
         session.login.assert_not_called()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
         session.gssapi_login.assert_called_once_with(principal='PRINCIPAL',
                     keytab='KEYTAB', proxyuser=None)
 
@@ -127,10 +116,8 @@
         session = mock.MagicMock()
         session.logged_in = False
         options = {'authtype': None, 'debug': False, 'cert': ''}
-        self.has_krb_creds.return_value = False
         activate_session(session, options)
         session.login.assert_not_called()
         session.ssl_login.assert_not_called()
-        session.krb_login.assert_not_called()
-        session.gssapi_login.assert_not_called()
+        session.gssapi_login.assert_called_once()
         self.error.assert_called_once()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_group.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_group.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_group.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_group.py	2020-09-07 15:44:50.000000000 +0800
@@ -51,9 +51,9 @@
         session.groupListAdd.assert_called_once_with(tag, group)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_add_group_dupl(self, activate_session_mock, stdout):
+    def test_handle_add_group_dupl(self, activate_session_mock, stderr):
         tag = 'tag'
         group = 'group'
         arguments = [tag, group]
@@ -67,8 +67,10 @@
             {'name': 'group', 'group_id': 'groupId'}]
 
         # Run it and check immediate output
-        rv = handle_add_group(options, session, arguments)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_group(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Group group already exists for tag tag\n'
         self.assertMultiLineEqual(actual, expected)
 
@@ -78,7 +80,6 @@
         session.getTag.assert_called_once_with(tag)
         session.getTagGroups.assert_called_once_with(tag, inherit=False)
         session.groupListAdd.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -139,9 +140,9 @@
         session.getTagGroups.assert_not_called()
         session.groupListAdd.assert_not_called()
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_add_group_no_tag(self, activate_session_mock, stdout):
+    def test_handle_add_group_no_tag(self, activate_session_mock, stderr):
         tag = 'tag'
         group = 'group'
         arguments = [tag, group]
@@ -153,8 +154,10 @@
         session.getTag.return_value = None
 
         # Run it and check immediate output
-        rv = handle_add_group(options, session, arguments)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_group(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Unknown tag: tag\n'
         self.assertMultiLineEqual(actual, expected)
 
@@ -164,7 +167,6 @@
         session.getTag.assert_called_once_with(tag)
         session.getTagGroups.assert_not_called()
         session.groupListAdd.assert_not_called()
-        self.assertEqual(rv, 1)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -3,15 +3,12 @@
 import os
 import six
 import sys
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
 
 import koji
 from koji_cli.commands import handle_add_host
+from . import utils
 
-class TestAddHost(unittest.TestCase):
+class TestAddHost(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -90,8 +87,9 @@
         # Run it and check immediate output
         # args: host, arch1, arch2, --krb-principal=krb
         # expected: failed, host already exists
-        with self.assertRaises(SystemExit):
+        with self.assertRaises(SystemExit) as ex:
             handle_add_host(options, session, arguments)
+        self.assertExitCode(ex, 1)
         actual = stderr.getvalue()
         expected = 'host is already in the database\n'
         self.assertMultiLineEqual(actual, expected)
@@ -112,8 +110,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_add_host(options, session, arguments)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -129,14 +128,10 @@
         activate_session_mock.assert_not_called()
         session.hasHost.assert_not_called()
         session.addHost.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_add_host_failed(self, activate_session_mock, stdout):
+    def test_handle_add_host_failed(self, activate_session_mock, stderr):
         host = 'host'
         arches = ['arch1', 'arch2']
         krb_principal = '--krb-principal=krb'
@@ -153,16 +148,12 @@
         # Run it and check immediate output
         # args: host, arch1, arch2, --krb-principal=krb
         # expected: failed
-        with self.assertRaises(koji.GenericError):
+        with self.assertRaises(koji.GenericError) as ex:
             handle_add_host(options, session, arguments)
-        actual = stdout.getvalue()
+        actual = stderr.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_called_once_with(session, options)
         session.getHost.assert_called_once_with(host)
         session.addHost.assert_called_once_with(host, arches, **kwargs)
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_host_to_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_host_to_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_host_to_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_host_to_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -10,8 +10,9 @@
     import unittest
 
 from koji_cli.commands import handle_add_host_to_channel
+from . import utils
 
-class TestAddHostToChannel(unittest.TestCase):
+class TestAddHostToChannel(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -104,10 +105,10 @@
             host, channel, **kwargs)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_add_host_to_channel_no_channel(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         host = 'host'
         channel = 'channel'
         channel_info = None
@@ -121,8 +122,10 @@
         # Run it and check immediate output
         # args: host, channel
         # expected: failed, channel not found
-        rv = handle_add_host_to_channel(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_host_to_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such channel: channel\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -130,12 +133,11 @@
         session.getChannel.assert_called_once_with(channel)
         session.getHost.assert_not_called()
         session.addHostToChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_add_host_to_channel_no_host(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         host = 'host'
         host_info = None
         channel = 'channel'
@@ -151,8 +153,10 @@
         # Run it and check immediate output
         # args: host, channel
         # expected: success
-        rv = handle_add_host_to_channel(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_host_to_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such host: host\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -160,7 +164,6 @@
         session.getChannel.assert_called_once_with(channel)
         session.getHost.assert_called_once_with(host)
         session.addHostToChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -177,8 +180,9 @@
         # Run it and check immediate output
         # args: _empty_
         # expected: failed, help msg shows
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_add_host_to_channel(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -196,10 +200,6 @@
         session.getChannel.assert_not_called()
         session.listChannels.assert_not_called()
         session.addHostToChannel.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_pkg.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_pkg.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_pkg.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_pkg.py	2020-09-07 15:44:50.000000000 +0800
@@ -12,9 +12,10 @@
 from mock import call
 
 from koji_cli.commands import handle_add_pkg
+from . import utils
 
 
-class TestAddPkg(unittest.TestCase):
+class TestAddPkg(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -108,10 +109,10 @@
                           call.multiCall(strict=True)])
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_add_pkg_owner_no_exists(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         tag = 'tag'
         packages = ['package1', 'package2', 'package3']
         owner = 'owner'
@@ -131,15 +132,16 @@
         # args: --owner, --extra-arches='arch1,arch2 arch3, arch4',
         #       tag, package1, package2, package3
         # expected: failed: owner does not exist
-        rv = handle_add_pkg(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'User owner does not exist\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_not_called()
         self.assertEqual(session.mock_calls,
                          [call.getUser(owner)])
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -165,8 +167,9 @@
         # args: --owner, --extra-arches='arch1,arch2 arch3, arch4',
         #       tag, package1, package2, package3
         # expected: failed: tag does not exist
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_add_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
         actual = stdout.getvalue()
         expected = 'No such tag: tag\n'
         self.assertMultiLineEqual(actual, expected)
@@ -175,10 +178,6 @@
         self.assertEqual(session.mock_calls,
                          [call.getUser(owner),
                           call.getTag(tag)])
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -197,8 +196,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_add_pkg(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -216,10 +216,6 @@
         session.getTag.assert_not_called()
         session.listPackages.assert_not_called()
         session.packageListAdd.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -234,8 +230,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_add_pkg(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -253,10 +250,6 @@
         session.getTag.assert_not_called()
         session.listPackages.assert_not_called()
         session.packageListAdd.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_volume.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_volume.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_add_volume.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_add_volume.py	2020-09-07 15:44:50.000000000 +0800
@@ -22,12 +22,14 @@
 %s: error: {message}
 """ % (self.progname, self.progname)
 
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_add_volume(
             self,
             activate_session_mock,
-            stdout):
+            stdout,
+            stderr):
         """Test handle_add_volume function"""
         session = mock.MagicMock()
         options = mock.MagicMock()
@@ -49,8 +51,10 @@
         # Case 2. volume already exists
         expected = "Volume %s already exists" % vol_name + "\n"
         session.getVolume.return_value = vol_info
-        self.assertEqual(1, handle_add_volume(options, session, [vol_name]))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            handle_add_volume(options, session, [vol_name])
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
         session.getVolume.assert_called_with(vol_name)
         activate_session_mock.assert_not_called()
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_block_group.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_block_group.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_block_group.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_block_group.py	2020-09-07 15:44:50.000000000 +0800
@@ -18,9 +18,9 @@
 %s: error: {message}
 """ % (self.progname, self.progname)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_block_group_nonexistent_tag(self, activate_session_mock, stdout):
+    def test_handle_block_group_nonexistent_tag(self, activate_session_mock, stderr):
         tag = 'nonexistent-tag'
         group = 'group'
         arguments = [tag, group]
@@ -32,8 +32,10 @@
         session.getTag.return_value = None
 
         # Run it and check immediate output
-        rv = handle_block_group(options, session, arguments)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_block_group(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Unknown tag: %s\n' % tag
         self.assertMultiLineEqual(actual, expected)
 
@@ -43,11 +45,10 @@
         session.getTag.assert_called_once_with(tag)
         session.getTagGroups.assert_not_called()
         session.groupListBlock.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_block_group_nonexistent_group(self, activate_session_mock, stdout):
+    def test_handle_block_group_nonexistent_group(self, activate_session_mock, stderr):
         tag = 'tag'
         group = 'group'
         arguments = [tag, group]
@@ -60,8 +61,10 @@
         session.getTagGroups.return_value = []
 
         # Run it and check immediate output
-        rv = handle_block_group(options, session, arguments)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_block_group(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = "Group %s doesn't exist within tag %s\n" % (group, tag)
         self.assertMultiLineEqual(actual, expected)
 
@@ -71,7 +74,6 @@
         session.getTag.assert_called_once_with(tag)
         session.getTagGroups.assert_called_once_with(tag, inherit=False)
         session.groupListBlock.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_block_pkg.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_block_pkg.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_block_pkg.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_block_pkg.py	2020-09-07 15:44:50.000000000 +0800
@@ -3,17 +3,14 @@
 import os
 import six
 import sys
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
 
 from mock import call
 
 from koji_cli.commands import handle_block_pkg
+from . import utils
 
 
-class TestBlockPkg(unittest.TestCase):
+class TestBlockPkg(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -48,7 +45,7 @@
         session.packageListBlock.assert_called_once_with(
             tag, package, force=True)
         session.multiCall.assert_called_once_with(strict=True)
-        self.assertNotEqual(rv, 1)
+        self.assertFalse(rv)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -88,9 +85,9 @@
                 call.multiCall(strict=True)])
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_block_pkg_no_package(self, activate_session_mock, stdout):
+    def test_handle_block_pkg_no_package(self, activate_session_mock, stderr):
         tag = 'tag'
         dsttag = {'name': tag, 'id': 1}
         packages = ['package1', 'package2', 'package3']
@@ -108,8 +105,10 @@
         # Run it and check immediate output
         # args: tag, package1, package2, package3
         # expected: failed: can not find package2 under tag
-        rv = handle_block_pkg(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_block_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Package package2 doesn\'t exist in tag tag\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -119,12 +118,11 @@
             tagID=dsttag['id'], inherited=True)
         session.packageListBlock.assert_not_called()
         session.multiCall.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_block_pkg_tag_no_exists(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         tag = 'tag'
         dsttag = None
         packages = ['package1', 'package2', 'package3']
@@ -138,8 +136,10 @@
         # Run it and check immediate output
         # args: tag, package1, package2, package3
         # expected: failed: tag does not exist
-        rv = handle_block_pkg(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_block_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such tag: tag\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -147,7 +147,6 @@
         session.getTag.assert_called_once_with(tag)
         session.listPackages.assert_not_called()
         session.packageListBlock.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -163,8 +162,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_block_pkg(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -181,11 +181,3 @@
         session.getTag.assert_not_called()
         session.listPackages.assert_not_called()
         session.packageListBlock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -152,8 +152,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -171,10 +172,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -194,8 +191,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 0)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = """Usage: %s build [options] <target> <srpm path or scm url>
@@ -242,10 +240,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 0)
-        else:
-            self.assertEqual(cm.exception.code, 0)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -268,8 +262,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -287,10 +282,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -361,8 +352,9 @@
         # Run it and check immediate output
         # args: target, http://scm
         # expected: failed, target not found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = self.format_error_message( "Unknown build target: target")
         self.assertMultiLineEqual(actual, expected)
@@ -376,10 +368,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -408,8 +396,9 @@
         # Run it and check immediate output
         # args: target, http://scm
         # expected: failed, dest_tag not found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = self.format_error_message("Unknown destination tag: dest_tag_name")
         self.assertMultiLineEqual(actual, expected)
@@ -423,10 +412,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -455,8 +440,9 @@
         # Run it and check immediate output
         # args: target, http://scm
         # expected: failed, dest_tag is locked
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = self.format_error_message("Destination tag dest_tag_name is locked")
         self.assertMultiLineEqual(actual, expected)
@@ -470,10 +456,6 @@
         self.session.build.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -838,7 +820,3 @@
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
         self.assertIsNone(rv)
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_call.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_call.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_call.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_call.py	2020-09-07 15:44:50.000000000 +0800
@@ -122,15 +122,12 @@
 
         for mod, msg in module.items():
             with mock.patch('koji_cli.commands.%s' % mod, new=None):
-                with self.assertRaises(SystemExit) as cm:
+                with self.assertRaises(SystemExit) as ex:
                     handle_call(options, session, arguments)
+                self.assertExitCode(ex, 2)
             expected = self.format_error_message(msg)
             self.assert_console_message(stderr, expected)
             activate_session_mock.assert_not_called()
-            if isinstance(cm.exception, int):
-                self.assertEqual(cm.exception, 2)
-            else:
-                self.assertEqual(cm.exception.code, 2)
 
     def test_handle_call_help(self):
         """Test handle_call help message"""
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_chain_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_chain_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_chain_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_chain_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -10,8 +10,9 @@
     import unittest
 
 from koji_cli.commands import handle_chain_build
+from . import utils
 
-class TestChainBuild(unittest.TestCase):
+class TestChainBuild(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -100,8 +101,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_chain_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -122,10 +124,6 @@
         self.session.chainBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -143,8 +141,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_chain_build(self.options, self.session, args)
+        self.assertExitCode(ex, 0)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = """Usage: %s chain-build [options] <target> <URL> [<URL> [:] <URL> [:] <URL> ...]
@@ -169,10 +168,6 @@
         self.session.chainBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 0)
-        else:
-            self.assertEqual(cm.exception.code, 0)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -203,8 +198,9 @@
         # Run it and check immediate output
         # args: target http://scm1 : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
         # expected: failed, target not found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_chain_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s chain-build [options] <target> <URL> [<URL> [:] <URL> [:] <URL> ...]
 (Specify the --help global option for a list of other help options)
@@ -221,10 +217,6 @@
         self.session.chainBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -265,8 +257,9 @@
         # Run it and check immediate output
         # args: target http://scm1 : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
         # expected: failed, dest_tag is locked
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_chain_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s chain-build [options] <target> <URL> [<URL> [:] <URL> [:] <URL> ...]
 (Specify the --help global option for a list of other help options)
@@ -283,17 +276,13 @@
         self.session.chainBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     @mock.patch('koji_cli.commands._running_in_bg', return_value=False)
     @mock.patch('koji_cli.commands.watch_tasks', return_value=0)
     def test_handle_build_dest_tag_not_inherited_by_build_tag(
-            self, watch_tasks_mock, running_in_bg_mock, activate_session_mock, stdout):
+            self, watch_tasks_mock, running_in_bg_mock, activate_session_mock, stderr):
         target = 'target'
         dest_tag = 'dest_tag'
         dest_tag_id = 2
@@ -324,8 +313,10 @@
         # Run it and check immediate output
         # args: target, target http://scm1 : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
         # expected: failed, dest_tag is not in build_tag's inheritance
-        rv = handle_chain_build(self.options, self.session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_chain_build(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = """Packages in destination tag dest_tag are not inherited by build tag build_tag
 Target target is not usable for a chain-build
 """
@@ -339,7 +330,6 @@
         self.session.chainBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('koji_cli.commands.activate_session')
     @mock.patch('koji_cli.commands._running_in_bg', return_value=False)
@@ -375,12 +365,14 @@
         self.session.getBuildTarget.return_value = target_info
         self.session.getTag.return_value = dest_tag_info
         self.session.getFullInheritance.return_value = tag_tree
-        with mock.patch('sys.stdout', new_callable=six.StringIO) as stdout:
+        with mock.patch('sys.stderr', new_callable=six.StringIO) as stderr:
             # Run it and check immediate output
             # args: target badnvr : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
             # expected: failed, src is neither scm nor good n-v-r
-            rv = handle_chain_build(self.options, self.session, args)
-            actual = stdout.getvalue()
+            with self.assertRaises(SystemExit) as ex:
+                handle_chain_build(self.options, self.session, args)
+            self.assertExitCode(ex, 1)
+            actual = stderr.getvalue()
             expected = '"badnvr" is not a SCM URL or package N-V-R\n'
             self.assertMultiLineEqual(actual, expected)
             # Finally, assert that things were called as we expected.
@@ -394,9 +386,8 @@
             running_in_bg_mock.assert_not_called()
             self.session.logout.assert_not_called()
             watch_tasks_mock.assert_not_called()
-            self.assertEqual(rv, 1)
 
-        with mock.patch('sys.stdout', new_callable=six.StringIO) as stdout:
+        with mock.patch('sys.stderr', new_callable=six.StringIO) as stderr:
             source_args = [
                 'path/n-v-r',
                 ':',
@@ -409,12 +400,14 @@
             args = [target] + source_args
             # args: target path/n-v-r : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
             # expected: failed
-            handle_chain_build(self.options, self.session, args)
-            actual = stdout.getvalue()
+            with self.assertRaises(SystemExit) as ex:
+                handle_chain_build(self.options, self.session, args)
+            self.assertExitCode(ex, 1)
+            actual = stderr.getvalue()
             expected = '"path/n-v-r" is not a SCM URL or package N-V-R\n'
             self.assertMultiLineEqual(actual, expected)
 
-        with mock.patch('sys.stdout', new_callable=six.StringIO) as stdout:
+        with mock.patch('sys.stderr', new_callable=six.StringIO) as stderr:
             source_args = [
                 'badn-vr',
                 ':',
@@ -427,12 +420,14 @@
             args = [target] + source_args
             # args: target badn-vr : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
             # expected: failed
-            handle_chain_build(self.options, self.session, args)
-            actual = stdout.getvalue()
+            with self.assertRaises(SystemExit) as ex:
+                handle_chain_build(self.options, self.session, args)
+            self.assertExitCode(ex, 1)
+            actual = stderr.getvalue()
             expected = '"badn-vr" is not a SCM URL or package N-V-R\n'
             self.assertMultiLineEqual(actual, expected)
 
-        with mock.patch('sys.stdout', new_callable=six.StringIO) as stdout:
+        with mock.patch('sys.stderr', new_callable=six.StringIO) as stderr:
             source_args = [
                 'badn-v-r.rpm',
                 ':',
@@ -445,8 +440,10 @@
             args = [target] + source_args
             # args: target badn-v-r.rpm : http://scm2 http://scm3 n-v-r-1 : n-v-r-2 n-v-r-3
             # expected: failed
-            handle_chain_build(self.options, self.session, args)
-            actual = stdout.getvalue()
+            with self.assertRaises(SystemExit) as ex:
+                handle_chain_build(self.options, self.session, args)
+            self.assertExitCode(ex, 1)
+            actual = stderr.getvalue()
             expected = '"badn-v-r.rpm" is not a SCM URL or package N-V-R\n'
             self.assertMultiLineEqual(actual, expected)
 
@@ -458,8 +455,9 @@
 
             # args: target http://scm
             # expected: failed, only one src found
-            with self.assertRaises(SystemExit) as cm:
+            with self.assertRaises(SystemExit) as ex:
                 handle_chain_build(self.options, self.session, args)
+            self.assertExitCode(ex, 2)
             actual = stderr.getvalue()
             expected = """Usage: %s chain-build [options] <target> <URL> [<URL> [:] <URL> [:] <URL> ...]
 (Specify the --help global option for a list of other help options)
@@ -468,10 +466,6 @@
 If there are no dependencies, use the build command instead
 """ % (progname, progname)
             self.assertMultiLineEqual(actual, expected)
-            if isinstance(cm.exception, int):
-                self.assertEqual(cm.exception, 2)
-            else:
-                self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_clone_tag.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_clone_tag.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_clone_tag.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_clone_tag.py	2020-09-07 15:44:50.000000000 +0800
@@ -211,7 +211,7 @@
         handle_clone_tag(self.options, self.session, args)
         self.activate_session.assert_called_once()
         self.session.assert_has_calls([call.hasPerm('admin'),
-                                       call.getTag('src-tag'),
+                                       call.getTag('src-tag', event=None),
                                        call.getTag('dst-tag'),
                                        call.createTag('dst-tag',
                                                       arches='arch1 arch2',
@@ -485,7 +485,7 @@
         handle_clone_tag(self.options, self.session, args)
         self.activate_session.assert_called_once()
         self.session.assert_has_calls([call.hasPerm('admin'),
-                                       call.getTag('src-tag'),
+                                       call.getTag('src-tag', event=None),
                                        call.getTag('dst-tag'),
                                        call.listPackages(event=None,
                                                          inherited=True,
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_disable_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_disable_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_disable_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_disable_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -24,12 +24,14 @@
 """ % (self.progname, self.progname)
 
 
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_disable_host(
             self,
             activate_session_mock,
-            stdout):
+            stdout,
+            stderr):
         """Test %s function""" % handle_disable_host.__name__
         arguments = []
         options = mock.MagicMock()
@@ -59,7 +61,9 @@
         session.multiCall.return_value = [[None], [None]]
 
         arguments = ['host1', 'host2']
-        self.assertEqual(1, handle_disable_host(options, session, arguments))
+        with self.assertRaises(SystemExit) as ex:
+            handle_disable_host(options, session, arguments)
+        self.assertExitCode(ex, 1)
         activate_session_mock.assert_called_once()
         session.getHost.assert_has_calls([call('host1'), call('host2')])
         session.multiCall.assert_called_once()
@@ -68,8 +72,8 @@
         expect = ''
         for host in arguments:
             expect += "Host %s does not exist\n" % host
-        expect += "No changes made. Please correct the command line.\n"
         self.assert_console_message(stdout, expect)
+        self.assert_console_message(stderr, "No changes made. Please correct the command line.\n")
 
         # reset session mocks
         activate_session_mock.reset_mock()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_download_task.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_download_task.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_download_task.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_download_task.py	2020-09-07 15:44:50.000000000 +0800
@@ -4,17 +4,14 @@
 import os
 import six
 import sys
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
 
 from koji_cli.commands import anon_handle_download_task
+from . import utils
 
 progname = os.path.basename(sys.argv[0]) or 'koji'
 
 
-class TestDownloadTask(unittest.TestCase):
+class TestDownloadTask(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -50,7 +47,7 @@
         self.list_task_output_all_volumes = mock.patch('koji_cli.commands.list_task_output_all_volumes').start()
         self.ensuredir = mock.patch('koji.ensuredir').start()
         self.download_file = mock.patch('koji_cli.commands.download_file').start()
-        self.activate_session = mock.patch('koji_cli.commands.activate_session').start()
+        self.ensure_connection = mock.patch('koji_cli.commands.ensure_connection').start()
         self.stdout = mock.patch('sys.stdout', new_callable=six.StringIO).start()
         self.stderr = mock.patch('sys.stderr', new_callable=six.StringIO).start()
 
@@ -83,7 +80,7 @@
         expected = ''
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
         self.list_task_output_all_volumes.assert_called_once_with(self.session, task_id)
@@ -98,8 +95,9 @@
         # Run it and check immediate output
         # args: task_id
         # expected: error
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -107,14 +105,9 @@
         expected = 'No such task: #123333\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session,
-                                                      self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     def test_handle_download_task_parent(self):
         task_id = 123333
@@ -154,7 +147,7 @@
         expected = ''
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_called_once_with(task_id)
         self.assertEqual(self.list_task_output_all_volumes.mock_calls, [
@@ -195,7 +188,7 @@
         expected = ''
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
         self.list_task_output_all_volumes.assert_called_once_with(self.session, task_id)
@@ -220,8 +213,9 @@
         # Run it and check immediate output
         # args: task_id --arch=s390,ppc
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -229,15 +223,11 @@
         expected = 'No files for download found.\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
         self.list_task_output_all_volumes.assert_called_once_with(self.session, task_id)
         self.download_file.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     def test_handle_download_parent_not_finished(self):
         task_id = 123333
@@ -256,8 +246,9 @@
         # Run it and check immediate output
         # args: task_id
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -265,15 +256,11 @@
         expected = 'Task 123333 has not finished yet.\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
         self.list_task_output_all_volumes.assert_called_once_with(self.session, task_id)
         self.download_file.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     def test_handle_download_child_not_finished(self):
         task_id = 123333
@@ -290,8 +277,9 @@
         # Run it and check immediate output
         # args: task_id
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -299,15 +287,11 @@
         expected = 'Child task 22222 has not finished yet.\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_called_once_with(task_id)
         self.list_task_output_all_volumes.assert_called_once_with(self.session, 22222)
         self.download_file.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     def test_handle_download_invalid_file_name(self):
         task_id = 123333
@@ -320,8 +304,9 @@
         # Run it and check immediate output
         # args: task_id
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 1)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -329,23 +314,20 @@
         expected = 'Invalid file name: somerpm..src.rpm\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
-        self.activate_session.assert_called_once_with(self.session, self.options)
+        self.ensure_connection.assert_called_once_with(self.session)
         self.session.getTaskInfo.assert_called_once_with(task_id)
         self.session.getTaskChildren.assert_not_called()
         self.list_task_output_all_volumes.assert_called_once_with(self.session, task_id)
         self.download_file.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 1)
-        else:
-            self.assertEqual(cm.exception.code, 1)
 
     def test_handle_download_help(self):
         args = ['--help']
         # Run it and check immediate output
         # args: --help
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 0)
         actual = self.stdout.getvalue()
         expected = """Usage: %s download-task <task_id>
 (Specify the --help global option for a list of other help options)
@@ -357,24 +339,22 @@
   --logs        Also download build logs
   --topurl=URL  URL under which Koji files are accessible
   --noprogress  Do not display progress meter
+  --wait        Wait for running tasks to finish
   -q, --quiet   Suppress output
 """ % progname
         self.assertMultiLineEqual(actual, expected)
         actual = self.stderr.getvalue()
         expected = ''
         self.assertEqual(actual, expected)
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 0)
-        else:
-            self.assertEqual(cm.exception.code, 0)
 
     def test_handle_download_no_task_id(self):
         args = []
         # Run it and check immediate output
         # no args
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -385,18 +365,15 @@
 %s: error: Please specify a task ID
 """ % (progname, progname)
         self.assertEqual(actual, expected)
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     def test_handle_download_multi_task_id(self):
         args = ["123", "456"]
         # Run it and check immediate output
         # args: 123 456
         # expected: failure
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             anon_handle_download_task(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = self.stdout.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
@@ -407,11 +384,3 @@
 %s: error: Only one task ID may be specified
 """ % (progname, progname)
         self.assertEqual(actual, expected)
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -11,8 +11,9 @@
 from mock import call
 
 from koji_cli.commands import handle_edit_host
+from . import utils
 
-class TestEditHost(unittest.TestCase):
+class TestEditHost(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -157,8 +158,9 @@
         # Run it and check immediate output
         # args: _empty_
         # expected: failed - should specify host
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_edit_host(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -175,14 +177,10 @@
         session.getHost.assert_not_called()
         session.editHost.assert_not_called()
         session.multiCall.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_edit_host_no_host(self, activate_session_mock, stdout):
+    def test_handle_edit_host_no_host(self, activate_session_mock, stderr):
         host = 'host'
         host_info = None
         arches = 'arch1 arch2'
@@ -204,8 +202,10 @@
         # args: host, --arches='arch1 arch2', --capacity=0.22,
         # --description=description, --comment=comment
         # expected: failed -- getHost() == None
-        rv = handle_edit_host(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_edit_host(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = """Host host does not exist
 No changes made, please correct the command line
 """
@@ -215,7 +215,6 @@
         session.getHost.assert_called_once_with(host)
         session.editHost.assert_not_called()
         self.assertEqual(session.multiCall.call_count, 1)
-        self.assertEqual(rv, 1)
 
 if __name__ == '__main__':
     unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_tag.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_tag.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_tag.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_tag.py	2020-09-07 15:44:50.000000000 +0800
@@ -3,17 +3,14 @@
 import os
 import six
 import sys
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
 
 from koji_cli.commands import handle_edit_tag
+from . import utils
 
 progname = os.path.basename(sys.argv[0]) or 'koji'
 
 
-class TestEditTag(unittest.TestCase):
+class TestEditTag(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -78,7 +75,7 @@
         args.append('--unlock')
         args.append('--no-maven-support')
         args.append('--no-include-all')
-        opts = {'perm_id': None,
+        opts = {'perm': None,
                 'locked': not locked,
                 'maven_support': not maven_support,
                 'maven_include_all': not maven_include_all}
@@ -107,8 +104,9 @@
         # Run it and check immediate output
         # args: --help
         # expected: failed, help info shows
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_edit_tag(options, session, args)
+        self.assertExitCode(ex, 0)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = """Usage: %s edit-tag [options] <name>
@@ -139,10 +137,6 @@
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_not_called()
         session.editTag2.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 0)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -157,8 +151,9 @@
         # Run it and check immediate output
         # args: --help
         # expected: failed, help info shows
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_edit_tag(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -172,11 +167,3 @@
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_not_called()
         session.editTag2.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
-
-
-if __name__ == '__main__':
-    unittest.main()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_user.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_user.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_edit_user.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_edit_user.py	2020-09-07 15:44:50.000000000 +0800
@@ -10,11 +10,12 @@
 
 
 from koji_cli.commands import handle_edit_user
+from . import utils
 
 progname = os.path.basename(sys.argv[0]) or 'koji'
 
 
-class TestEditUser(unittest.TestCase):
+class TestEditUser(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -101,8 +102,9 @@
         # Run it and check immediate output
         # args: --help
         # expected: failed, help info shows
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_edit_user(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -116,11 +118,6 @@
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_not_called()
         session.editUser.assert_not_called()
-        if isinstance(cm.exception, int):
-            # RHEL6
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_enable_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_enable_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_enable_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_enable_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -23,12 +23,14 @@
 %s: error: {message}
 """ % (self.progname, self.progname)
 
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_enable_host(
             self,
             activate_session_mock,
-            stdout):
+            stdout,
+            stderr):
         """Test %s function""" % handle_enable_host.__name__
         arguments = []
         options = mock.MagicMock()
@@ -58,7 +60,9 @@
         session.multiCall.return_value = [[None], [None]]
 
         arguments = ['host1', 'host2']
-        self.assertEqual(1, handle_enable_host(options, session, arguments))
+        with self.assertRaises(SystemExit) as ex:
+            handle_enable_host(options, session, arguments)
+        self.assertExitCode(ex, 1)
         activate_session_mock.assert_called_once()
         session.getHost.assert_has_calls([call('host1'), call('host2')])
         session.multiCall.assert_called_once()
@@ -67,8 +71,9 @@
         expect = ''
         for host in arguments:
             expect += "Host %s does not exist\n" % host
-        expect += "No changes made. Please correct the command line.\n"
+        stderr_exp = "No changes made. Please correct the command line.\n"
         self.assert_console_message(stdout, expect)
+        self.assert_console_message(stderr, stderr_exp)
 
         # reset session mocks
         activate_session_mock.reset_mock()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_grant_permission.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_grant_permission.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_grant_permission.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_grant_permission.py	2020-09-07 15:44:50.000000000 +0800
@@ -77,7 +77,7 @@
 
 Options:
   -h, --help  show this help message and exit
-  --new       Create a new permission
+  --new       Create this permission if the permission does not exist
 """ % self.progname)
 
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_image_build_indirection.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_image_build_indirection.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_image_build_indirection.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_image_build_indirection.py	2020-09-07 15:44:50.000000000 +0800
@@ -28,7 +28,7 @@
     "indirection_template_url": "git://git.github.org/git/",
     "results_loc": "results",
     "scratch": None,
-    "wait": None,
+    "wait": False,
     "noprogress": None,
     "skip_tag": False,
 }
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_import_comps.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_import_comps.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_import_comps.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_import_comps.py	2020-09-07 15:44:50.000000000 +0800
@@ -23,8 +23,9 @@
 import koji_cli.commands
 from koji_cli.commands import handle_import_comps, _import_comps,\
                               _import_comps_alt
+from . import utils
 
-class TestImportComps(unittest.TestCase):
+class TestImportComps(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -109,7 +110,7 @@
             session, filename, tag, local_options)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.libcomps', new=None)
     @mock.patch('koji_cli.commands.yumcomps', new=None, create=True)
     @mock.patch('koji_cli.commands.activate_session')
@@ -120,7 +121,7 @@
             mock_import_comps_alt,
             mock_import_comps,
             mock_activate_session,
-            stdout):
+            stderr):
         filename = './data/comps-example.xml'
         tag = 'tag'
         tag_info = {'name': tag, 'id': 1}
@@ -134,8 +135,10 @@
         # Run it and check immediate output
         # args: --force, ./data/comps-example.xml, tag
         # expected: failed, no comps available
-        rv = handle_import_comps(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_import_comps(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'comps module not available\n'
         self.assertMultiLineEqual(actual, expected)
 
@@ -144,9 +147,8 @@
         session.getTag.assert_called_once_with(tag)
         mock_import_comps.assert_not_called()
         mock_import_comps_alt.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     @mock.patch('koji_cli.commands._import_comps')
     @mock.patch('koji_cli.commands._import_comps_alt')
@@ -155,7 +157,7 @@
             mock_import_comps_alt,
             mock_import_comps,
             mock_activate_session,
-            stdout):
+            stderr):
         filename = './data/comps-example.xml'
         tag = 'tag'
         tag_info = None
@@ -169,8 +171,10 @@
         # Run it and check immediate output
         # args: ./data/comps-example.xml, tag
         # expected: failed: tag does not exist
-        rv = handle_import_comps(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_import_comps(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such tag: tag\n'
         self.assertMultiLineEqual(actual, expected)
 
@@ -179,7 +183,6 @@
         session.getTag.assert_called_once_with(tag)
         mock_import_comps.assert_not_called()
         mock_import_comps_alt.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -200,8 +203,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
-            rv = handle_import_comps(options, session, args)
+        with self.assertRaises(SystemExit) as ex:
+            handle_import_comps(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -218,10 +222,6 @@
         session.getTag.assert_not_called()
         session.getTagGroups.assert_not_called()
         session.groupListAdd.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     def test_import_comps_libcomps(self, stdout):
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_api.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_api.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_api.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_api.py	2020-09-07 15:44:50.000000000 +0800
@@ -23,10 +23,10 @@
 """ % (self.progname, self.progname)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
-    @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_anon_handle_list_api(
             self,
-            activate_session_mock,
+            ensure_connection_mock,
             stdout):
         """Test anon_handle_list_api function"""
         session = mock.MagicMock()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_channels.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_channels.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_channels.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_channels.py	2020-09-07 15:44:50.000000000 +0800
@@ -19,8 +19,8 @@
         self.args = []
 
     @mock.patch('sys.stdout', new_callable=StringIO)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_channels(self, activate_session_mock, stdout):
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_channels(self, ensure_connection_mock, stdout):
         self.session.listChannels.return_value = [
             {'id': 1, 'name': 'default'},
             {'id': 2, 'name': 'test'},
@@ -47,4 +47,4 @@
 test                 2      2      1      1      6     28%
 """
         self.assertMultiLineEqual(actual, expected)
-        activate_session_mock.assert_called_once_with(self.session, self.options)
+        ensure_connection_mock.assert_called_once_with(self.session)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_groups.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_groups.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_groups.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_groups.py	2020-09-07 15:44:50.000000000 +0800
@@ -34,8 +34,10 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_anon_handle_list_groups_argument_error(
             self,
+            ensure_connection_mock,
             activate_session_mock,
             stdout):
         """Test anon_handle_list_groups function"""
@@ -71,7 +73,8 @@
         expected = "Querying at event %(id)i (%(timestr)s)" % event + "\n"
         self.__list_groups('build', ['--ts', '1234567'], expected)
 
-    def __list_groups(self, query_group, options, expected):
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def __list_groups(self, query_group, options, expected, ensure_connection_mock):
         _list_tags = [
             {
                 'maven_support': False,
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_notifications.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_notifications.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_notifications.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_notifications.py	2020-09-07 15:44:50.000000000 +0800
@@ -45,15 +45,15 @@
 
         self.maxDiff=None
         self.assertMultiLineEqual(actual, expected)
-        activate_session_mock.assert_called_once_with(self.session, self.options)
+        activate_session_mock.assert_called_once()
         self.session.getTag.assert_has_calls([mock.call(1), mock.call(1)])
         self.session.getPackage.assert_has_calls([mock.call(11), mock.call(11)])
         self.session.getUser.assert_not_called()
         self.session.getBuildNotifications.assert_called_once_with(None)
 
     @mock.patch('sys.stdout', new_callable=StringIO)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_notifications_user(self, activate_session_mock, stdout):
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_notifications_user(self, ensure_connection_mock, stdout):
         self.session.getBuildNotifications.return_value = [
             {'id': 1, 'tag_id': 1, 'package_id': 11, 'email': 'email@test.com', 'success_only': True},
             {'id': 2, 'tag_id': None, 'package_id': 11, 'email': 'email@test.com', 'success_only': False},
@@ -94,7 +94,7 @@
 
         self.maxDiff=None
         self.assertMultiLineEqual(actual, expected)
-        activate_session_mock.assert_called_once_with(self.session, self.options)
+        ensure_connection_mock.assert_called_once_with(self.session)
         self.session.getTag.assert_has_calls([mock.call(1), mock.call(1)])
         self.session.getPackage.assert_has_calls([mock.call(11), mock.call(11)])
         self.session.getUser.assert_called_once_with('random_name')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_permissions.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_permissions.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_permissions.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_permissions.py	2020-09-07 15:44:50.000000000 +0800
@@ -22,12 +22,14 @@
 %s: error: {message}
 """ % (self.progname, self.progname)
 
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_list_permissions(
             self,
             activate_session_mock,
-            stdout):
+            stdout,
+            stderr):
         """Test handle_list_permissions function"""
         session = mock.MagicMock()
         options = mock.MagicMock()
@@ -54,8 +56,10 @@
         # case 2. user does not exists
         expected = "User %s does not exist" % user + "\n"
         session.getUser.return_value = None
-        self.assertEqual(1, handle_list_permissions(options, session, ['--user', user]))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            handle_list_permissions(options, session, ['--user', user])
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         # case 3. List user permission
         perms = [p['name'] for p in all_perms[::1]]
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_tagged.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_tagged.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_list_tagged.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_list_tagged.py	2020-09-07 15:44:50.000000000 +0800
@@ -64,14 +64,13 @@
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value={'id': 1000,
                                                          'ts': 1000000.11})
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_builds(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_builds(self, ensure_connection_mock,
                                 event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest', '--inherit', '--event=1000']
 
         anon_handle_list_tagged(self.options, self.session, args)
-        activate_session_mock.assert_called_once_with(self.session,
-                                                      self.options)
+        ensure_connection_mock.assert_called_once_with(self.session)
         self.session.getTag.assert_called_once_with('tag', event=1000)
         self.session.listTagged.assert_called_once_with('tag',
                                                         event=1000,
@@ -87,8 +86,8 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_builds_paths(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_builds_paths(self, ensure_connection_mock,
                                       event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest', '--inherit', '--paths']
 
@@ -100,15 +99,14 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_rpms(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_rpms(self, ensure_connection_mock,
                               event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest-n=3', '--rpms', '--sigs',
                 '--arch=x86_64', '--arch=noarch']
 
         anon_handle_list_tagged(self.options, self.session, args)
-        activate_session_mock.assert_called_once_with(self.session,
-                                                      self.options)
+        ensure_connection_mock.assert_called_once_with(self.session)
         self.session.getTag.assert_called_once_with('tag', event=None)
         self.session.listTaggedRPMS.assert_called_once_with('tag',
                                                             package='pkg',
@@ -124,8 +122,8 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_rpms_paths(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_rpms_paths(self, ensure_connection_mock,
                                     event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest-n=3', '--rpms',
                 '--arch=x86_64', '--paths']
@@ -137,8 +135,8 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_sigs_paths(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_sigs_paths(self, ensure_connection_mock,
                                     event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest-n=3', '--rpms', '--sigs',
                 '--arch=x86_64', '--paths']
@@ -148,8 +146,8 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_type(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_type(self, ensure_connection_mock,
                               event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest-n=3', '--type=maven']
         self.session.listTagged.return_value = [{'id': 1,
@@ -163,8 +161,7 @@
                                                  'maven_artifact_id': 'artifact'}]
 
         anon_handle_list_tagged(self.options, self.session, args)
-        activate_session_mock.assert_called_once_with(self.session,
-                                                      self.options)
+        ensure_connection_mock.assert_called_once_with(self.session)
         self.session.getTag.assert_called_once_with('tag', event=None)
         self.session.listTagged.assert_called_once_with('tag',
                                                         package='pkg',
@@ -179,8 +176,8 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.util.eventFromOpts', return_value=None)
-    @mock.patch('koji_cli.commands.activate_session')
-    def test_list_tagged_type_paths(self, activate_session_mock,
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_list_tagged_type_paths(self, ensure_connection_mock,
                               event_from_opts_mock, stdout):
         args = ['tag', 'pkg', '--latest-n=3', '--type=maven', '--paths']
         self.session.listTagged.return_value = [{'id': 1,
@@ -199,9 +196,10 @@
                                     '----------------------------------------  --------------------  --------------------  --------------------  ----------------\n'
                                     '/mnt/koji/packages/packagename/version/1.el6/maven  tag                   group                 artifact              owner\n')
 
+    @mock.patch('koji_cli.commands.ensure_connection')
     @mock.patch('koji.util.eventFromOpts', return_value={'id': 1000,
                                                          'ts': 1000000.11})
-    def test_list_tagged_args(self, event_from_opts_mock):
+    def test_list_tagged_args(self, event_from_opts_mock, ensure_connection_mock):
         # Case 1, no argument
         expected = self.format_error_message(
             "A tag name must be specified")
@@ -233,7 +231,8 @@
             self.options,
             self.session,
             ['tag', 'pkg1'],
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
     def test_handle_list_tagged_help(self):
         self.assert_help(
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_maven_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_maven_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_maven_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_maven_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -11,6 +11,7 @@
     import unittest
 
 from koji_cli.commands import handle_maven_build
+from . import utils
 
 EMPTY_BUILD_OPTS = {
     'specfile': None,
@@ -32,7 +33,7 @@
     'inis': []}
 
 
-class TestMavenBuild(unittest.TestCase):
+class TestMavenBuild(utils.CliTestCase):
     # Show long diffs in error output...
     maxDiff = None
 
@@ -103,8 +104,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -125,10 +127,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -146,8 +144,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -168,10 +167,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -189,8 +184,9 @@
         progname = os.path.basename(sys.argv[0]) or 'koji'
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 0)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = """Usage: %s maven-build [options] <target> <URL>
@@ -239,10 +235,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 0)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -265,8 +257,9 @@
         # Run it and check immediate output
         # args: target http://scm
         # expected: failed, target not found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -283,10 +276,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -313,8 +302,9 @@
         # Run it and check immediate output
         # args: target http://scm
         # expected: failed, dest_tag not found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -331,10 +321,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -361,8 +347,9 @@
         # Run it and check immediate output
         # args: target http://scm
         # expected: failed, dest_tag is locked
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -379,10 +366,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
@@ -473,8 +456,9 @@
         # Run it and check immediate output
         # args: --ini=config1.ini --ini=config2.ini --section=section target
         # expected: failed, no type == 'maven' found
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -488,10 +472,6 @@
             build_opts.inis, scratch=scratch, section=section)
         maven_opts_mock.assert_not_called()
         self.session.mavenBuild.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
         stdout.seek(0)
         stdout.truncate()
@@ -504,8 +484,9 @@
         # Run it and check immediate output
         # args: --ini=config1.ini --ini=config2.ini --section=section target
         # expected: failed, ValueError raised when parsing .ini files
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -519,10 +500,6 @@
             build_opts.inis, scratch=scratch, section=section)
         maven_opts_mock.assert_not_called()
         self.session.mavenBuild.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -554,8 +531,9 @@
         # Run it and check immediate output
         # args: target badscm
         # expected: failed, scm is invalid
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_maven_build(self.options, self.session, args)
+        self.assertExitCode(ex, 2)
         actual = stderr.getvalue()
         expected = """Usage: %s maven-build [options] <target> <URL>
        %s maven-build --ini=CONFIG... [options] <target>
@@ -574,10 +552,6 @@
         self.session.mavenBuild.assert_not_called()
         self.session.logout.assert_not_called()
         watch_tasks_mock.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_mock_config.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_mock_config.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_mock_config.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_mock_config.py	2020-09-07 15:44:50.000000000 +0800
@@ -61,9 +61,9 @@
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.genMockConfig')
-    @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_handle_mock_config_buildroot_option(
-            self, activate_session_mock, gen_config_mock, stdout, stderr):
+            self, ensure_connection_mock, gen_config_mock, stdout, stderr):
         """Test anon_handle_mock_config buildroot options"""
         arguments = []
         options = mock.MagicMock()
@@ -89,14 +89,16 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
         arguments = self.common_args + ['--buildroot', '1',
                                         '--name', self.progname]
         opts = self.common_opts.copy()
         opts.update({
             'repoid': buildroot_info['repo_id'],
-            'tag_name': buildroot_info['tag_name']
+            'tag_name': buildroot_info['tag_name'],
+            'tag_macros': {},
         })
         anon_handle_mock_config(options, session, arguments)
         self.assert_console_message(
@@ -117,9 +119,9 @@
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.genMockConfig')
-    @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_handle_mock_config_task_option(
-            self, activate_session_mock, gen_config_mock, stdout, stderr):
+            self, ensure_connection_mock, gen_config_mock, stdout, stderr):
         """Test  anon_handle_mock_config task options"""
         arguments = []
         task_id = 1001
@@ -138,12 +140,15 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
         arguments = ['--task', str(task_id)]
         expected = "No buildroots for task %s (or no such task)\n" % str(task_id)
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         multi_broots = [
             {'id': 1101, 'repo_id': 101, 'tag_name': 'tag_101', 'arch': 'x86_64'},
@@ -158,7 +163,8 @@
         opts = self.common_opts.copy()
         opts.update({
             'repoid': 'latest',
-            'tag_name': multi_broots[0]['tag_name']
+            'tag_name': multi_broots[0]['tag_name'],
+            'tag_macros': {},
         })
         arguments = self.common_args + ['--task', str(task_id),
                                         '--name', self.progname,
@@ -174,9 +180,9 @@
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.genMockConfig')
-    @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_handle_mock_config_tag_option(
-            self, activate_session_mock, gen_config_mock, stdout, stderr):
+            self, ensure_connection_mock, gen_config_mock, stdout, stderr):
         """Test anon_handle_mock_config with tag option"""
         arguments = []
         tag = 'tag'
@@ -191,8 +197,10 @@
 
         arguments = ['--tag', tag['name']]
         expected = "Please specify an arch\n"
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         arguments = ['--tag', tag['name'], '--arch', tag['arch']]
         expected = self.format_error_message("Invalid tag: %s" % tag['name'])
@@ -201,19 +209,32 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
         # return tag info
         session.getTag.return_value = tag
         expected = "Could not get config info for tag: %(name)s\n" % tag
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         # return build config
-        session.getBuildConfig.return_value = {'id': 301, 'extra': {}}
+        session.getBuildConfig.return_value = {
+            'id': 301,
+            'extra': {
+                'rpm.macro.random_macro1': 'random_macro_content1',
+                'rpm.macro.random_macro2': 'random_macro_content2',
+                'mock.package_manager': 'yum',
+                'mock.yum.module_hotfixes': 1,
+            }
+        }
         expected = "Could not get a repo for tag: %(name)s\n" % tag
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         # return repo
         session.getRepo.return_value = {'id': 101}
@@ -230,6 +251,12 @@
         opts.update({
             'repoid': 'latest',
             'tag_name': tag['name'],
+            'tag_macros': {
+                '%random_macro1': 'random_macro_content1',
+                '%random_macro2': 'random_macro_content2',
+            },
+            'package_manager': 'yum',
+            'module_hotfixes': 1,
         })
         anon_handle_mock_config(options, session, arguments)
         self.assert_console_message(
@@ -240,10 +267,10 @@
     @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji.genMockConfig')
-    @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     @mock.patch('koji_cli.commands.open')
     def test_handle_mock_config_target_option(
-            self, openf, activate_session_mock, gen_config_mock, stdout, stderr):
+            self, openf, ensure_connection_mock, gen_config_mock, stdout, stderr):
         """Test anon_handle_mock_config with target option"""
         arguments = []
         arch = "x86_64"
@@ -262,8 +289,10 @@
 
         arguments = ['--target', target['name']]
         expected = "Please specify an arch\n"
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         arguments = ['--target', target['name'],
                      '--arch', arch]
@@ -274,12 +303,15 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
         session.getBuildTarget.return_value = target
         expected = "Could not get a repo for tag: %s\n" % target['build_tag_name']
-        self.assertEqual(1, anon_handle_mock_config(options, session, arguments))
-        self.assert_console_message(stdout, expected)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_mock_config(options, session, arguments)
+        self.assertExitCode(ex, 1)
+        self.assert_console_message(stderr, expected)
 
         arguments = self.common_args + ['--target', target['name'],
                                         '--arch', arch,
@@ -287,7 +319,8 @@
         opts = self.common_opts.copy()
         opts.update({
             'repoid': 101,
-            'tag_name': target['build_tag_name']
+            'tag_name': target['build_tag_name'],
+            'tag_macros': {},
         })
         session.getRepo.return_value = {'id': 101}
         gen_config_mock.return_value = self.mock_output
@@ -309,7 +342,8 @@
             self.progname, arch, **opts)
 
     @mock.patch('sys.stderr', new_callable=six.StringIO)
-    def test_handle_mock_config_errors(self, stderr):
+    @mock.patch('koji_cli.commands.ensure_connection')
+    def test_handle_mock_config_errors(self, ensure_connection_mock, stderr):
         """Test anon_handle_mock_config general error messages"""
         arguments = []
         options = mock.MagicMock()
@@ -326,7 +360,8 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
         # name is specified twice case
         arguments = [self.progname, '--name', 'name']
@@ -337,7 +372,8 @@
             options,
             session,
             arguments,
-            stderr=expected)
+            stderr=expected,
+            activate_session=None)
 
     def test_handle_mock_config_help(self):
         """Test anon_handle_mock_config help message full output"""
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -9,9 +9,10 @@
     import unittest
 
 from koji_cli.commands import handle_remove_channel
+from . import utils
 
 
-class TestRemoveChannel(unittest.TestCase):
+class TestRemoveChannel(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -67,10 +68,10 @@
         session.removeChannel.assert_called_once_with(channel, force=True)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_remove_channel_no_channel(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         channel = 'channel'
         channel_info = None
         args = [channel]
@@ -83,15 +84,16 @@
         # Run it and check immediate output
         # args: channel
         # expected: failed: no such channel
-        rv = handle_remove_channel(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_remove_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such channel: channel\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_called_once_with(session, options)
         session.getChannel.assert_called_once_with(channel)
         session.removeChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -106,8 +108,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_remove_channel(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -123,10 +126,6 @@
         activate_session_mock.assert_not_called()
         session.getChannel.assert_not_called()
         session.removeChannel.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_host_from_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_host_from_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_host_from_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_host_from_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -9,8 +9,9 @@
     import unittest
 
 from koji_cli.commands import handle_remove_host_from_channel
+from . import utils
 
-class TestRemoveHostFromChannel(unittest.TestCase):
+class TestRemoveHostFromChannel(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -45,10 +46,10 @@
         session.removeHostFromChannel.assert_called_once_with(host, channel)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_remove_host_from_channel_no_host(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         host = 'host'
         host_info = None
         channel = 'channel'
@@ -62,8 +63,10 @@
         # Run it and check immediate output
         # args: host, channel
         # expected: failed: no such host
-        rv = handle_remove_host_from_channel(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_remove_host_from_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such host: host\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -71,12 +74,11 @@
         session.getHost.assert_called_once_with(host)
         session.listChannels.assert_not_called()
         session.removeHostFromChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_remove_host_from_channel_not_a_member(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         host = 'host'
         host_info = {'id': 1}
         channel = 'channel'
@@ -92,9 +94,11 @@
         session.listChannels.return_value = channel_infos
         # Run it and check immediate output
         # args: host, channel
-        # expected: success: host isn't belong to channel
-        rv = handle_remove_host_from_channel(options, session, args)
-        actual = stdout.getvalue()
+        # expected: failed: host isn't belong to channel
+        with self.assertRaises(SystemExit) as ex:
+            handle_remove_host_from_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Host host is not a member of channel channel\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -102,7 +106,6 @@
         session.getHost.assert_called_once_with(host)
         session.listChannels.assert_called_once_with(host_info['id'])
         session.removeHostFromChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -119,8 +122,9 @@
         # Run it and check immediate output
         # args: _empty_
         # expected: failed, help msg shows
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_remove_host_from_channel(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -137,10 +141,6 @@
         session.getHost.assert_not_called()
         session.listChannels.assert_not_called()
         session.removeHostFromChannel.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_pkg.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_pkg.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_remove_pkg.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_remove_pkg.py	2020-09-07 15:44:50.000000000 +0800
@@ -10,17 +10,17 @@
 
 from mock import call
 
-
 from koji_cli.commands import handle_remove_pkg
+from . import utils
 
-class TestRemovePkg(unittest.TestCase):
+class TestRemovePkg(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_remove_pkg(self, activate_session_mock, stdout):
+    def test_handle_remove_pkg(self, activate_session_mock, stderr):
         tag = 'tag'
         dsttag = {'name': tag, 'id': 1}
         package = 'package'
@@ -37,8 +37,8 @@
         # Run it and check immediate output
         # args: tag, package
         # expected: success
-        rv = handle_remove_pkg(options, session, args)
-        actual = stdout.getvalue()
+        handle_remove_pkg(options, session, args)
+        actual = stderr.getvalue()
         expected = ''
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -49,7 +49,6 @@
         session.packageListRemove.assert_called_once_with(
             tag, package, **kwargs)
         session.multiCall.assert_called_once_with(strict=True)
-        self.assertNotEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
@@ -129,9 +128,9 @@
                             strict=True)])
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
-    def test_handle_remove_pkg_no_package(self, activate_session_mock, stdout):
+    def test_handle_remove_pkg_no_package(self, activate_session_mock, stderr):
         tag = 'tag'
         dsttag = {'name': tag, 'id': 1}
         packages = ['package1', 'package2', 'package3']
@@ -149,8 +148,10 @@
         # Run it and check immediate output
         # args: tag, package1, package2, package3
         # expected: failed: can not find package2 under tag
-        rv = handle_remove_pkg(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_remove_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'Package package2 is not in tag tag\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -160,12 +161,11 @@
             tagID=dsttag['id'])
         session.packageListRemove.assert_not_called()
         session.multiCall.assert_not_called()
-        self.assertEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_remove_pkg_tag_no_exists(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         tag = 'tag'
         dsttag = None
         packages = ['package1', 'package2', 'package3']
@@ -179,8 +179,10 @@
         # Run it and check immediate output
         # args: tag, package1, package2, package3
         # expected: failed: tag does not exist
-        rv = handle_remove_pkg(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_remove_pkg(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such tag: tag\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
@@ -188,7 +190,6 @@
         session.getTag.assert_called_once_with(tag)
         session.listPackages.assert_not_called()
         session.packageListRemove.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -204,8 +205,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_remove_pkg(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -222,10 +224,6 @@
         session.getTag.assert_not_called()
         session.listPackages.assert_not_called()
         session.packageListRemove.assert_not_called()
-        if isinstance(cm.exception, int):
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_rename_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_rename_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_rename_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_rename_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -9,9 +9,10 @@
     import unittest
 
 from koji_cli.commands import handle_rename_channel
+from . import utils
 
 
-class TestRenameChannel(unittest.TestCase):
+class TestRenameChannel(utils.CliTestCase):
 
     # Show long diffs in error output...
     maxDiff = None
@@ -42,10 +43,10 @@
         session.renameChannel.assert_called_once_with(old_name, new_name)
         self.assertNotEqual(rv, 1)
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
     def test_handle_rename_channel_no_channel(
-            self, activate_session_mock, stdout):
+            self, activate_session_mock, stderr):
         old_name = 'old_name'
         new_name = 'new_name'
         channel_info = None
@@ -59,15 +60,16 @@
         # Run it and check immediate output
         # args: old_name, new_name
         # expected: failed: no such channel
-        rv = handle_rename_channel(options, session, args)
-        actual = stdout.getvalue()
+        with self.assertRaises(SystemExit) as ex:
+            handle_rename_channel(options, session, args)
+        self.assertExitCode(ex, 1)
+        actual = stderr.getvalue()
         expected = 'No such channel: old_name\n'
         self.assertMultiLineEqual(actual, expected)
         # Finally, assert that things were called as we expected.
         activate_session_mock.assert_called_once_with(session, options)
         session.getChannel.assert_called_once_with(old_name)
         session.renameChannel.assert_not_called()
-        self.assertEqual(rv, 1)
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('sys.stderr', new_callable=six.StringIO)
@@ -82,8 +84,9 @@
         session = mock.MagicMock()
 
         # Run it and check immediate output
-        with self.assertRaises(SystemExit) as cm:
+        with self.assertRaises(SystemExit) as ex:
             handle_rename_channel(options, session, args)
+        self.assertExitCode(ex, 2)
         actual_stdout = stdout.getvalue()
         actual_stderr = stderr.getvalue()
         expected_stdout = ''
@@ -99,11 +102,6 @@
         activate_session_mock.assert_not_called()
         session.getChannel.assert_not_called()
         session.renameChannel.assert_not_called()
-        if isinstance(cm.exception, int):
-            # python 2.6.6
-            self.assertEqual(cm.exception, 2)
-        else:
-            self.assertEqual(cm.exception.code, 2)
 
 
 if __name__ == '__main__':
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_restart_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_restart_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_restart_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_restart_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -48,6 +48,7 @@
         watch_tasks_mock.assert_called_with(
             session, [self.task_id], quiet=None, poll_interval=3)
 
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.watch_tasks')
     @mock.patch('koji_cli.commands._running_in_bg')
@@ -57,7 +58,8 @@
             activate_session_mock,
             running_in_bg_mock,
             watch_tasks_mock,
-            stdout):
+            stdout,
+            stderr):
         """Test %s function when there has other restart tasks exist""" % handle_restart_hosts.__name__
         options = mock.MagicMock()
         session = mock.MagicMock()
@@ -99,7 +101,9 @@
         # has other restart tasks are running case
         session.listTasks.return_value = [{'id': 1}, {'id': 2}, {'id': 3}]
 
-        self.assertEqual(1, handle_restart_hosts(options, session, []))
+        with self.assertRaises(SystemExit) as ex:
+            handle_restart_hosts(options, session, [])
+        self.assertExitCode(ex, 1)
         activate_session_mock.assert_called_once()
 
         query_opt = {
@@ -115,7 +119,7 @@
         expect += "Task ids: %r\n" % \
             [t['id'] for t in session.listTasks.return_value]
         expect += "Use --force to run anyway\n"
-        self.assert_console_message(stdout, expect)
+        self.assert_console_message(stderr, expect)
 
     @mock.patch('koji_cli.commands.watch_tasks')
     @mock.patch('koji_cli.commands._running_in_bg')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_set_build_volume.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_set_build_volume.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_set_build_volume.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_set_build_volume.py	2020-09-07 15:44:50.000000000 +0800
@@ -47,19 +47,31 @@
         # Case 2. wrong volume
         session.getVolume.return_value = {}
         expected = "No such volume: %s" % volume + "\n"
-        self.assertEqual(
-            1, handle_set_build_volume(options, session, [volume, build]))
-        self.assert_console_message(stdout, expected)
-        activate_session_mock.assert_not_called()
+        self.assert_system_exit(
+                handle_set_build_volume,
+                options,
+                session,
+                [volume, build],
+                exit_code=1,
+                stdout='',
+                stderr=expected,
+                activate_session=None)
 
         # Case 3. no build found
         session.getVolume.return_value = volinfo
         session.getBuild.return_value = {}
-        expected = "No such build: %s" % build + "\n"
-        expected += "No builds to move" + "\n"
-        self.assertEqual(
-            1, handle_set_build_volume(options, session, [volume, build]))
-        self.assert_console_message(stdout, expected)
+        stdout_exp = "No such build: %s" % build + "\n"
+        stderr_exp = "No builds to move" + "\n"
+        self.assert_system_exit(
+                handle_set_build_volume,
+                options,
+                session,
+                [volume, build],
+                exit_code=1,
+                stdout=stdout_exp,
+                stderr=stderr_exp,
+                activate_session=None)
+
 
         # Case 3. Build already in volume
         session.getBuild.side_effect = [
@@ -74,12 +86,19 @@
             },
         ]
 
-        expected = "Build %s already on volume %s" % \
+        stdout_exp = "Build %s already on volume %s" % \
             (build, volinfo['name']) + "\n"
-        expected += "No builds to move" + "\n"
-        self.assertEqual(
-            1, handle_set_build_volume(options, session, [volume, build]))
-        self.assert_console_message(stdout, expected)
+        stderr_exp = "No builds to move" + "\n"
+        self.assert_system_exit(
+                handle_set_build_volume,
+                options,
+                session,
+                [volume, build],
+                exit_code=1,
+                stdout=stdout_exp,
+                stderr=stderr_exp,
+                activate_session=None)
+
 
         # Case 4. Change build volume
         build = "sed-4.4-1.fc26"
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_taskinfo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_taskinfo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_taskinfo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_taskinfo.py	2020-09-07 15:44:50.000000000 +0800
@@ -218,7 +218,7 @@
         self.__run_parseTask_test('prepRepo', params, expect)
 
     def test_createRepo(self):
-        params = [1, 'x86_64', {'id': 1, 'creation_time': '1970-1-1 0:0:0'},
+        params = [1, 'x86_64', {'id': 1, 'create_ts': 0},
                   [{'external_repo_name': 'fedoraproject.net'},
                    {'external_repo_name': 'centos.org'}]]
         expect = ["Repo ID: %i" % params[0]]
@@ -596,8 +596,10 @@
 
     @mock.patch('sys.stdout', new_callable=six.StringIO)
     @mock.patch('koji_cli.commands.activate_session')
+    @mock.patch('koji_cli.commands.ensure_connection')
     def test_anon_handle_taskinfo(
             self,
+            ensure_connection_mock,
             activate_session_mock,
             stdout):
         """Test anon_handle_taskinfo function"""
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_wait_repo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_wait_repo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/test_wait_repo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/test_wait_repo.py	2020-09-07 15:44:50.000000000 +0800
@@ -61,19 +61,39 @@
 
     @mock.patch('time.time')
     @mock.patch('sys.stdout', new_callable=six.StringIO)
-    def __test_wait_repo(self, args, expected, stdout, time_mock):
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
+    def __test_wait_repo(self, args, expected, stderr, stdout, time_mock, ret_code=0):
         self.options.quiet = False
         time_mock.side_effect = [0, 1, 2, 3]
-        anon_handle_wait_repo(self.options, self.session, args)
-        self.assert_console_message(stdout, expected)
+        if ret_code:
+            with self.assertRaises(SystemExit) as ex:
+                anon_handle_wait_repo(self.options, self.session, args)
+            self.assertExitCode(ex, ret_code)
+            self.assert_console_message(stderr, expected)
+            self.assert_console_message(stdout, '')
+        else:
+            rv = anon_handle_wait_repo(self.options, self.session, args)
+            self.assert_console_message(stdout, expected)
+            self.assert_console_message(stderr, '')
+            self.assertIn(rv, [0, None])
 
     @mock.patch('time.time')
     @mock.patch('sys.stdout', new_callable=six.StringIO)
-    def __test_wait_repo_timeout(self, args, expected, stdout, time_mock):
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
+    def __test_wait_repo_timeout(self, args, expected, stderr, stdout, time_mock, ret_code=0):
         self.options.quiet = False
         time_mock.side_effect = [0, 61, 62]
-        anon_handle_wait_repo(self.options, self.session, args + ['--timeout', '1'])
-        self.assert_console_message(stdout, expected)
+        if ret_code:
+            with self.assertRaises(SystemExit) as ex:
+                anon_handle_wait_repo(self.options, self.session, args + ['--timeout', '1'])
+            self.assertExitCode(ex, ret_code)
+            self.assert_console_message(stderr, expected)
+            self.assert_console_message(stdout, '')
+        else:
+            rv = anon_handle_wait_repo(self.options, self.session, args + ['--timeout', '1'])
+            self.assert_console_message(stdout, expected)
+            self.assert_console_message(stderr, '')
+            self.assertIn(rv, [0, None])
 
     def test_anon_handle_wait_repo(self):
         """Test anon_handle_wait_repo function"""
@@ -102,7 +122,7 @@
         self.session.getRepo.return_value = {}
         self.checkForBuilds.return_value = True
         expected = 'Unsuccessfully waited 1:02 for a new %s repo' % self.tag_name + '\n'
-        self.__test_wait_repo_timeout(arguments, expected)
+        self.__test_wait_repo_timeout(arguments, expected, ret_code=1)
 
     def test_anon_handle_wait_repo_with_build(self):
         """Test anon_handle_wait_repo function with --build options"""
@@ -147,7 +167,7 @@
         self.checkForBuilds.return_value = True
         self.session.getRepo.return_value = {}
         expected = 'Unsuccessfully waited 1:02 for %s to appear in the %s repo' % (pkgs, self.tag_name) + '\n'
-        self.__test_wait_repo_timeout(arguments, expected)
+        self.__test_wait_repo_timeout(arguments, expected, ret_code=1)
 
     def test_anon_handle_wait_repo_errors(self):
         """Test anon_handle_wait_repo function errors and exceptions"""
@@ -172,17 +192,18 @@
                 activate_session=None)
         self.activate_session.assert_not_called()
 
-    @mock.patch('sys.stdout', new_callable=six.StringIO)
-    def test_anon_handle_wait_repo_target_not_found(self, stdout):
+    @mock.patch('sys.stderr', new_callable=six.StringIO)
+    def test_anon_handle_wait_repo_target_not_found(self, stderr):
         """Test anon_handle_wait_repo function on target not found cases"""
 
         # Case 1. both build and dest targets are not found
         self.session.getTag.return_value = self.TAG.copy()
         self.session.getBuildTargets.return_value = []
-        rv = anon_handle_wait_repo(self.options, self.session, [self.tag_name])
-        self.assertEqual(rv, 1)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_wait_repo(self.options, self.session, [self.tag_name])
+        self.assertExitCode(ex, 1)
         expected = "%(name)s is not a build tag for any target" % self.TAG + "\n"
-        self.assert_console_message(stdout, expected)
+        self.assert_console_message(stderr, expected)
 
         # Cas 2. dest is matched, show suggestion
         self.session.getBuildTargets.side_effect = [
@@ -193,11 +214,12 @@
                 {'build_tag_name': 'build-tag-3'},
             ],
         ]
-        rv = anon_handle_wait_repo(self.options, self.session, [self.tag_name])
-        self.assertEqual(rv, 1)
+        with self.assertRaises(SystemExit) as ex:
+            anon_handle_wait_repo(self.options, self.session, [self.tag_name])
+        self.assertExitCode(ex, 1)
         expected = "%(name)s is not a build tag for any target" % self.TAG + "\n"
         expected += "Suggested tags: build-tag-1, build-tag-2, build-tag-3\n"
-        self.assert_console_message(stdout, expected)
+        self.assert_console_message(stderr, expected)
 
     def test_anon_handle_wait_repo_help(self):
         """Test anon_handle_wait_repo help message"""
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/utils.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/utils.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_cli/utils.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_cli/utils.py	2020-09-07 15:44:50.000000000 +0800
@@ -184,17 +184,13 @@
         with session_patch as session:
             with stdout_patch as stdout:
                 with stderr_patch as stderr:
-                    with self.assertRaises(SystemExit) as cm:
+                    with self.assertRaises(SystemExit) as ex:
                         callableObj(*test_args, **test_kwargs)
+                    self.assertExitCode(ex, exit_code)
         session.assert_called_once()
         self.assert_console_message(stdout, **message['stdout'])
         self.assert_console_message(stderr, **message['stderr'])
         assert_function()
-        if isinstance(cm.exception, int):
-            # python 2.6.6
-            self.assertEqual(cm.exception, exit_code)
-        else:
-            self.assertEqual(cm.exception.code, exit_code)
 
     @mock.patch('koji_cli.commands.activate_session')
     def assert_help(self, callableObj, message, activate_session_mock):
@@ -212,6 +208,12 @@
             exit_code=0)
         activate_session_mock.assert_not_called()
 
+    def assertExitCode(self, ex, code):
+        if isinstance(ex.exception, int):
+            self.assertEqual(ex.exception, code)
+        else:
+            self.assertEqual(ex.exception.code, code)
+
 
 def get_builtin_open():
     if six.PY2:
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/data/image/import_1/db.json /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/data/image/import_1/db.json
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/data/image/import_1/db.json	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/data/image/import_1/db.json	2020-09-07 15:44:50.000000000 +0800
@@ -6,9 +6,9 @@
                 "build_id": 137,
                 "archive_id": "ARCHIVE_ID",
                 "type_id": "ARCHIVETYPE",
-                "checksum": "19a674d997af7098a444b60d7b51cee6",
+                "checksum": "ca9dd08a0b9f81b209c3ac768a7d1ca27973cfd920095e2dc3df5159f752039e",
                 "filename": "tdl-x86_64.xml",
-                "checksum_type": 0,
+                "checksum_type": 2,
                 "btype_id": "BTYPEID:image",
                 "buildroot_id": null,
                 "id": 1001,
@@ -30,9 +30,9 @@
                 "build_id": 137,
                 "archive_id": "ARCHIVE_ID",
                 "type_id": "ARCHIVETYPE",
-                "checksum": "a5114a20d790cf17eca1b1115a4546f8",
+                "checksum": "4083a6838c1b6895df27a69373f4c527a9722c045bccc08efe064f105d566c77",
                 "filename": "image.ks",
-                "checksum_type": 0,
+                "checksum_type": 2,
                 "btype_id": "BTYPEID:image",
                 "buildroot_id": null,
                 "id": 1002,
@@ -54,9 +54,9 @@
                 "build_id": 137,
                 "archive_id": "ARCHIVE_ID",
                 "type_id": "ARCHIVETYPE",
-                "checksum": "9828cf75d9d17ac8e79e53ed71c6a71c",
+                "checksum": "963a4396be7072012370db407b9ea3633b09dbe45926bb2ef912a86baac1d7b7",
                 "filename": "image-base.ks",
-                "checksum_type": 0,
+                "checksum_type": 2,
                 "btype_id": "BTYPEID:image",
                 "buildroot_id": null,
                 "id": 1003,
@@ -78,9 +78,9 @@
                 "build_id": 137,
                 "archive_id": "ARCHIVE_ID",
                 "type_id": "ARCHIVETYPE",
-                "checksum": "f601c0f647d7cdd4c92aa511876f8533",
+                "checksum": "9f4dea3a4b64def36be0119fef4d3f6e62eb6e316bf5749acddb134596faf5e9",
                 "filename": "foo-x86_64.xml",
-                "checksum_type": 0,
+                "checksum_type": 2,
                 "btype_id": "BTYPEID:image",
                 "buildroot_id": null,
                 "id": 1004,
@@ -102,9 +102,9 @@
                 "build_id": 137,
                 "archive_id": "ARCHIVE_ID",
                 "type_id": "ARCHIVETYPE",
-                "checksum": "84547200ef5002292ecdd50c62de518e",
+                "checksum": "e3ff2b57824a7ee9201786a624c54057de1b279fbcf6782fe25898d657ebd354",
                 "filename": "my-image-7.4.2-2.x86_64.ova",
-                "checksum_type": 0,
+                "checksum_type": 2,
                 "btype_id": "BTYPEID:image",
                 "buildroot_id": null,
                 "id": 1005,
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_archivetype.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_archivetype.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_archivetype.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_archivetype.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,4 @@
-from __future__ import absolute_import
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import mock
 
 import koji
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_btype.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_btype.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_btype.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_btype.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,4 @@
-from __future__ import absolute_import
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import mock
 
 import koji
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_external_rpm.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_external_rpm.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_external_rpm.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_external_rpm.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_host_to_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_host_to_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_add_host_to_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_add_host_to_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_apply_query_opts.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_apply_query_opts.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_apply_query_opts.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_apply_query_opts.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import copy
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 from nose.tools import eq_
 
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_cg_importer.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_cg_importer.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_cg_importer.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_cg_importer.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,11 +1,7 @@
-from __future__ import absolute_import
 import mock
 import os
 import shutil
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_check_volume_policy.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_check_volume_policy.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_check_volume_policy.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_check_volume_policy.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import koji.policy
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_complete_image_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_complete_image_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_complete_image_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_complete_image_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,3 @@
-from __future__ import absolute_import
 import copy
 import json
 import mock
@@ -6,10 +5,8 @@
 import os.path
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
+
 import koji
 import koji.util
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_complete_maven_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_complete_maven_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_complete_maven_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_complete_maven_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,3 @@
-from __future__ import absolute_import
 import copy
 import json
 import mock
@@ -6,10 +5,8 @@
 import os.path
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
+
 import koji
 import koji.util
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_create_tag.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_create_tag.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_create_tag.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_create_tag.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,7 @@
 # coding: utf-8
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
+
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_delete_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_delete_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_delete_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_delete_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import kojihub
 import time
 from koji import GenericError
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_delete_tag.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_delete_tag.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_delete_tag.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_delete_tag.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_dist_repo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_dist_repo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_dist_repo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_dist_repo.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,4 @@
-from __future__ import absolute_import
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import json
 import mock
 import os
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_tag_external_repo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_tag_external_repo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_tag_external_repo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_tag_external_repo.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,5 @@
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_tag.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_tag.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_tag.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_tag.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,6 @@
 # coding: utf-8
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_user.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_user.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_edit_user.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_edit_user.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,5 @@
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_ensure_volume_symlink.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_ensure_volume_symlink.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_ensure_volume_symlink.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_ensure_volume_symlink.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,13 +1,9 @@
-from __future__ import absolute_import
 import mock
 import os
 import os.path
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_active_repos.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_active_repos.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_active_repos.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_active_repos.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 import koji.db
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_archive_file.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_archive_file.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_archive_file.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_archive_file.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_logs.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_logs.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_logs.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_logs.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,8 @@
-from __future__ import absolute_import
 import mock
 import os
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_notifications.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_notifications.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_notifications.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_notifications.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,8 +1,5 @@
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_type.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_type.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_build_type.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_build_type.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_external_repos.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_external_repos.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_external_repos.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_external_repos.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 import koji
 import kojihub
 from .utils import DBQueryTestCase
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_host.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_host.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_host.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_host.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_next_release.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_next_release.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_next_release.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_next_release.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getPackageID.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getPackageID.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getPackageID.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getPackageID.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,5 +1,3 @@
-from __future__ import absolute_import
-
 import mock
 
 from .utils import DBQueryTestCase
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getRPMDeps.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getRPMDeps.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getRPMDeps.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getRPMDeps.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,6 @@
-from __future__ import absolute_import
 import mock
 import os
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getRPMFile.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getRPMFile.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_getRPMFile.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_getRPMFile.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,13 +1,9 @@
-from __future__ import absolute_import
 
 import os
 
 import mock
 
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_task_children.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_task_children.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_task_children.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_task_children.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_upload_path.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_upload_path.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_upload_path.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_upload_path.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,8 @@
-from __future__ import absolute_import
 import os
 import mock
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 from koji import GenericError
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_user_perms.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_user_perms.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_user_perms.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_user_perms.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_verify_class.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_verify_class.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_get_verify_class.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_get_verify_class.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import hashlib
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 from koji import GenericError
@@ -24,3 +20,7 @@
 
     def test_get_verify_class_is_adler32(self):
         kojihub.get_verify_class('adler32') is adler32_constructor
+
+    def test_get_verify_class_is_sha256(self):
+        kojihub.get_verify_class('sha256') is hashlib.sha256
+
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_group_operations.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_group_operations.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_group_operations.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_group_operations.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 import koji
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_import_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_import_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_import_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_import_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,8 @@
-from __future__ import absolute_import
 import copy
 import mock
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_import_image_internal.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_import_image_internal.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_import_image_internal.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_import_image_internal.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,8 @@
-from __future__ import absolute_import
 import mock
 import os
 import shutil
 import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
@@ -42,11 +38,14 @@
         context.session.host_id = 42
         get_build.return_value = {
             'id': 2,
+            'name': 'name',
+            'version': 'version',
+            'release': 'release',
         }
         get_archive_type.return_value = 4
         work.return_value = self.tempdir
         os.makedirs(self.tempdir + "/tasks/1/1")
-        kojihub.importImageInternal(task_id=1, build_id=2, imgdata=imgdata)
+        kojihub.importImageInternal(task_id=1, build_info=get_build.return_value, imgdata=imgdata)
 
     @mock.patch('kojihub.get_rpm')
     @mock.patch('koji.pathinfo.build')
@@ -80,10 +79,16 @@
             ],
             'rpmlist': [rpm],
         }
+        build_info = {
+            'name': 'name',
+            'version': 'version',
+            'release': 'release',
+            'id': 2
+        }
         cursor = mock.MagicMock()
         context.cnx.cursor.return_value = cursor
         context.session.host_id = 42
-        get_build.return_value = {'id': 2}
+        get_build.return_value = build_info
         get_rpm.return_value = rpm
         get_archive_type.return_value = 4
         work.return_value = self.tempdir
@@ -98,7 +103,7 @@
         with open(workdir + '/foo.log', 'w'):
             pass
 
-        kojihub.importImageInternal(task_id=1, build_id=2, imgdata=imgdata)
+        kojihub.importImageInternal(task_id=1, build_info=build_info, imgdata=imgdata)
 
         # Check that the log symlink made it to where it was supposed to.
         dest = os.readlink(workdir + '/foo.log')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_insert_processor.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_insert_processor.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_insert_processor.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_insert_processor.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_archive_files.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_archive_files.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_archive_files.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_archive_files.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_archives.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_archives.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_archives.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_archives.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,3 @@
-from __future__ import absolute_import
 import mock
 from .utils import DBQueryTestCase
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_btypes.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_btypes.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_btypes.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_btypes.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_channels.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_channels.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_channels.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_channels.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_hosts.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_hosts.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_hosts.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_hosts.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_listing.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_listing.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_listing.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_listing.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_task_output.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_task_output.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_list_task_output.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_list_task_output.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_new_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_new_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_new_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_new_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_new_typed_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_new_typed_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_new_typed_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_new_typed_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_notifications.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_notifications.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_notifications.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_notifications.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_perm_operations.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_perm_operations.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_perm_operations.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_perm_operations.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,11 +1,7 @@
-from __future__ import absolute_import
 
 import mock
 
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_pkglist.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_pkglist.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_pkglist.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_pkglist.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_policy_tests.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_policy_tests.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_policy_tests.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_policy_tests.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_query_processor.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_query_processor.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_query_processor.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_query_processor.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_recycle_build.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_recycle_build.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_recycle_build.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_recycle_build.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,3 @@
-from __future__ import absolute_import
 import mock
 
 import koji
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_remove_host_from_channel.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_remove_host_from_channel.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_remove_host_from_channel.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_remove_host_from_channel.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_repos.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_repos.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_repos.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_repos.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,6 @@
-from __future__ import absolute_import
 import mock
 
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_rpmdiff.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_rpmdiff.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_rpmdiff.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_rpmdiff.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,11 +1,7 @@
-from __future__ import absolute_import
 import copy
 import mock
 import os
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_savepoint.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_savepoint.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_savepoint.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_savepoint.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,6 @@
-from __future__ import absolute_import
 import mock
 
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_set_host_enabled.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_set_host_enabled.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_set_host_enabled.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_set_host_enabled.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_tag_operations.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_tag_operations.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_tag_operations.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_tag_operations.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,12 +1,5 @@
-from __future__ import absolute_import
-import copy
 import mock
-import shutil
-import tempfile
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_task_wait_results.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_task_wait_results.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_task_wait_results.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_task_wait_results.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,6 @@
-from __future__ import absolute_import
 import mock
-import six.moves.xmlrpc_client
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import xmlrpc.client
+import unittest
 
 import koji
 import kojihub
@@ -66,8 +62,8 @@
             task = self.getTask(t)
             task.getResult.return_value = "OK"
             task.isCanceled.return_value = False
-        self.tasks[6].getResult.side_effect = six.moves.xmlrpc_client.Fault(1, "error")
-        with self.assertRaises(six.moves.xmlrpc_client.Fault):
+        self.tasks[6].getResult.side_effect = xmlrpc.client.Fault(1, "error")
+        with self.assertRaises(xmlrpc.client.Fault):
             results = self.host_exports.taskWaitResults(parent, task_ids)
             self.assertEqual(results, [])
         self.tasks[6].getResult.side_effect = koji.GenericError('problem')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_update_processor.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_update_processor.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_update_processor.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_update_processor.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_user_groups.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_user_groups.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_user_groups.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_user_groups.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,5 @@
-from __future__ import absolute_import
 import mock
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import koji
 import kojihub
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_write_maven_repo_metadata.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_write_maven_repo_metadata.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/test_write_maven_repo_metadata.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/test_write_maven_repo_metadata.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,11 +1,7 @@
-from __future__ import absolute_import, with_statement
 import mock
 import os
 import datetime
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 from kojihub import _write_maven_repo_metadata
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/utils.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/utils.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_hub/utils.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_hub/utils.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,10 +1,5 @@
-from __future__ import absolute_import
 import mock
-import six
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 import kojihub
 
@@ -36,7 +31,7 @@
         return query
 
     def assertQueryEqual(self, query, **kwargs):
-        for k, v in six.iteritems(kwargs):
+        for k, v in kwargs.items():
             self.assertEqual(getattr(query, k, None), v)
 
     def assertLastQueryEqual(self, **kwargs):
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/internaldev2.out /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/internaldev2.out
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/internaldev2.out	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/internaldev2.out	2020-09-07 15:44:50.000000000 +0800
@@ -3,7 +3,7 @@
 config_opts['basedir'] = '/var/lib/mock'
 config_opts['chroot_setup_cmd'] = 'groupinstall build'
 config_opts['chroothome'] = '/builddir'
-config_opts['dnf_warning'] = True
+config_opts['dnf_warning'] = False
 config_opts['internal_dev_setup'] = True
 config_opts['root'] = 'ROOTNAME'
 config_opts['rpmbuild_networking'] = False
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/internaldev.out /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/internaldev.out
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/internaldev.out	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/internaldev.out	2020-09-07 15:44:50.000000000 +0800
@@ -3,7 +3,7 @@
 config_opts['basedir'] = '/var/lib/mock'
 config_opts['chroot_setup_cmd'] = 'groupinstall build'
 config_opts['chroothome'] = '/builddir'
-config_opts['dnf_warning'] = True
+config_opts['dnf_warning'] = False
 config_opts['internal_dev_setup'] = False
 config_opts['root'] = 'ROOTNAME'
 config_opts['rpmbuild_networking'] = False
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/simple.out /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/simple.out
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/data/mock/simple.out	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/data/mock/simple.out	2020-09-07 15:44:50.000000000 +0800
@@ -3,7 +3,7 @@
 config_opts['basedir'] = '/var/lib/mock'
 config_opts['chroot_setup_cmd'] = 'groupinstall build'
 config_opts['chroothome'] = '/builddir'
-config_opts['dnf_warning'] = True
+config_opts['dnf_warning'] = False
 config_opts['root'] = 'ROOTNAME'
 config_opts['rpmbuild_networking'] = False
 config_opts['rpmbuild_timeout'] = 86400
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_auth.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_auth.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_auth.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_auth.py	2020-09-07 15:44:50.000000000 +0800
@@ -171,79 +171,6 @@
             s.login('user', 'password')
 
     @mock.patch('koji.auth.context')
-    @mock.patch('koji.auth.socket')
-    @mock.patch('koji.auth.base64')
-    def test_krbLogin(self, base64, socket, context):
-        # TODO
-        s, cntext, cursor = self.get_session()
-        context.cnx = cntext.cnx
-
-        with self.assertRaises(koji.AuthError) as cm:
-            s.krbLogin('krb_req', 'proxyuser')
-        self.assertEqual(cm.exception.args[0], 'Already logged in')
-
-        s.logged_in = False
-        if six.PY3:
-            with self.assertRaises(koji.AuthError) as cm:
-                s.krbLogin('krb_req', 'proxyuser')
-            self.assertEqual(cm.exception.args[0], 'krbV module not installed')
-        else:
-            with mock.patch('koji.auth.krbV', create=True) as krbV:
-                princ = mock.MagicMock()
-                princ.name = 'princ_name'
-                krbV.default_context.return_value \
-                    .rd_req.return_value = (mock.MagicMock(), 2, 3,
-                                            [1, 2, princ])
-                with self.assertRaises(koji.AuthError) as cm:
-                    s.krbLogin('krb_req', 'proxyuser')
-                self.assertEqual(cm.exception.args[0],
-                                 'Kerberos principal princ_name is'
-                                 ' not authorized to log in other users')
-                context.opts = {'ProxyPrincipals': 'anyothers,' + princ.name,
-                                'AuthPrincipal': 'authprinc',
-                                'AuthKeytab': 'authkeytab',
-                                'LoginCreatesUser': False,
-                                'CheckClientIP': False}
-                with self.assertRaises(koji.AuthError) as cm:
-                    s.krbLogin('krb_req', 'proxyuser@realm.com')
-                self.assertEqual(cm.exception.args[0],
-                                 'Unknown Kerberos principal:'
-                                 ' proxyuser@realm.com')
-                # case: create user by kerberos
-                context.opts['LoginCreatesUser'] = True
-                context.cnx.cursor.return_value. \
-                    fetchone.side_effect = [None,
-                                            (1,),
-                                            ('name', 'type',
-                                             koji.USER_STATUS['NORMAL']),
-                                            ('session-id',)]
-                context.cnx.cursor.return_value.fetchall.return_value = None
-                s.krbLogin('krb_req', 'proxyuser@realm.com')
-                self.assertEqual(context.cnx.cursor.return_value.execute.
-                                 call_count, 14)
-                # case: create user by username, proxyuser is username
-                context.cnx.cursor.return_value. \
-                    fetchone.side_effect = [None]
-                context.cnx.cursor.return_value.fetchall.return_value = None
-                with self.assertRaises(koji.AuthError) as cm:
-                    s.krbLogin('krb_req', 'proxyuser')
-                self.assertEqual(cm.exception.args[0],
-                                 'Unknown Kerberos principal: proxyuser')
-                # case: create user by kerberos - set krb princ
-                context.opts['LoginCreatesUser'] = True
-                context.cnx.cursor.return_value. \
-                    fetchone.side_effect = [None,
-                                            (1,),
-                                            ('name', 'type',
-                                             koji.USER_STATUS['NORMAL']),
-                                            ('session-id',)]
-                context.cnx.cursor.return_value.fetchall. \
-                    return_value = [('proxyuser', 'proxyuser@otherrealm.com')]
-                s.krbLogin('krb_req', 'proxyuser@realm.com')
-                self.assertEqual(context.cnx.cursor.return_value.execute.
-                                 call_count, 22)
-
-    @mock.patch('koji.auth.context')
     def test_checkKrbPrincipal(self, context):
         s, cntext, cursor = self.get_session()
         self.assertIsNone(s.checkKrbPrincipal(None))
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_client_session.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_client_session.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_client_session.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_client_session.py	2020-09-07 15:44:50.000000000 +0800
@@ -12,31 +12,6 @@
 
 
 class TestClientSession(unittest.TestCase):
-
-    @mock.patch('socket.getfqdn')
-    def test_server_principal_rdns(self, getfqdn):
-        opts = {'krb_rdns': True}
-        session = koji.ClientSession('http://koji.example.com:30/kojihub', opts)
-        cprinc = mock.MagicMock()
-        cprinc.realm = "REALM"
-        getfqdn.return_value = 'koji02.example.com'
-
-        princ = session._serverPrincipal(cprinc)
-        self.assertEqual(princ, 'host/koji02.example.com@REALM')
-        getfqdn.assert_called_with('koji.example.com')
-
-    @mock.patch('socket.getfqdn')
-    def test_server_principal_no_rdns(self, getfqdn):
-        opts = {'krb_rdns': False}
-        session = koji.ClientSession('http://koji.example.com/kojihub', opts)
-        cprinc = mock.MagicMock()
-        cprinc.realm = "REALM"
-        getfqdn.return_value = 'koji02.example.com'
-
-        princ = session._serverPrincipal(cprinc)
-        self.assertEqual(princ, 'host/koji.example.com@REALM')
-        getfqdn.assert_not_called()
-
     @mock.patch('requests.Session')
     def test_new_session(self, rsession):
         koji.ClientSession('http://koji.example.com/kojihub')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_format_time.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_format_time.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_format_time.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_format_time.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,5 +1,7 @@
 from __future__ import absolute_import
 import datetime
+import os
+import time
 import locale
 try:
     import unittest2 as unittest
@@ -11,6 +13,16 @@
 from koji import formatTime, formatTimeLong
 
 class TestFormatTime(unittest.TestCase):
+    def setUp(self):
+        self._orig_tz = os.environ.get('TZ')
+
+    def tearDown(self):
+        if self._orig_tz:
+            os.environ['TZ'] = self._orig_tz
+        elif 'TZ' in os.environ:
+            del os.environ['TZ']
+        time.tzset()
+
     def test_format_time(self):
         self.assertEqual(formatTime(None), '')
         self.assertEqual(formatTime(''), '')
@@ -33,6 +45,8 @@
     def test_format_time_long(self):
         # force locale to compare 'desired' value
         locale.setlocale(locale.LC_ALL, ('en_US', 'UTF-8'))
+        os.environ['TZ'] = 'GMT'
+        time.tzset()
 
         self.assertEqual(formatTimeLong(None), '')
         self.assertEqual(formatTimeLong(''), '')
@@ -62,4 +76,41 @@
         r = r[:r.rfind(' ')]
         self.assertEqual(r, desired)
 
+        # str + timezone
+        d3 = '2017-10-05 09:52:31+02:00'
+        desired = 'Thu, 05 Oct 2017 07:52:31 GMT'
+        os.environ['TZ'] = 'GMT'
+        time.tzset()
+        r = formatTimeLong(d3)
+        self.assertEqual(r, desired)
+
+        # non-GMT without DST
+        d3 = '2017-06-05 09:52:31+02:00'
+        desired = 'Mon, 05 Jun 2017 09:52:31 CEST'
+        os.environ['TZ'] = 'Europe/Prague'
+        time.tzset()
+        r = formatTimeLong(d3)
+        self.assertEqual(r, desired)
+
+        # non-GMT with DST
+        d3 = '2017-12-05 09:52:31+02:00'
+        desired = 'Tue, 05 Dec 2017 08:52:31 CET'
+        os.environ['TZ'] = 'Europe/Prague'
+        time.tzset()
+        r = formatTimeLong(d3)
+        self.assertEqual(r, desired)
+
+        # timestamps, local timezone
+        d4 = 0
+        desired = 'Thu, 01 Jan 1970 01:00:00 CET'
+        r = formatTimeLong(d4)
+        self.assertEqual(r, desired)
+
+        # timestamps, GMT
+        desired = 'Thu, 01 Jan 1970 00:00:00 GMT'
+        os.environ['TZ'] = 'GMT'
+        time.tzset()
+        r = formatTimeLong(d4)
+        self.assertEqual(r, desired)
+
         locale.resetlocale()
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_grab_session_options.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_grab_session_options.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_grab_session_options.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_grab_session_options.py	2020-09-07 15:44:50.000000000 +0800
@@ -9,7 +9,6 @@
 
 NORMAL_VAL = {'user': 'jdoe',
               'password': 'fakepwd',
-              'krbservice': 'fakekrbservice',
               'debug_xmlrpc': True,
               'debug': False,
               'max_retries': 3,
@@ -20,8 +19,6 @@
               'timeout': 30000,
               'use_fast_upload': False,
               'upload_blocksize': 1024,
-              'krb_rdns': 'fakerdns',
-              'krb_canon_host': 'fakehost',
               'no_ssl_verify': True,
               'serverca': '/fake/serverca.cert',
               }
@@ -30,7 +27,6 @@
 
 NONE_VAL = {'user': None,
             'password': None,
-            'krbservice': None,
             'debug_xmlrpc': None,
             'debug': None,
             'max_retries': None,
@@ -41,8 +37,6 @@
             'timeout': None,
             'use_fast_upload': None,
             'upload_blocksize': None,
-            'krb_rdns': None,
-            'krb_canon_host': None,
             'no_ssl_verify': None,
             'serverca': None,
             }
@@ -53,13 +47,11 @@
              'password': None,
              'anon_retry': 3,
              'timeout': 100,
-             'krb_rdns': 'fakerdns',
              'meaningless': 'wow',
              'nonval': None}
 
 MIXED_REL = {'anon_retry': 3,
              'timeout': 100,
-             'krb_rdns': 'fakerdns',
              }
 
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_gssapi.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_gssapi.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_gssapi.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_gssapi.py	2020-09-07 15:44:50.000000000 +0800
@@ -21,7 +21,7 @@
 
     maxDiff = None
 
-    @mock.patch('koji.requests_kerberos', new=None)
+    @mock.patch('koji.reqgssapi', new=None)
     def test_gssapi_disabled(self):
         with self.assertRaises(ImportError):
             self.session.gssapi_login()
@@ -33,13 +33,13 @@
                                                          retry=False)
         self.assertEqual(old_environ, dict(**os.environ))
 
-    @mock.patch('requests_kerberos.HTTPKerberosAuth')
+    @mock.patch('koji.reqgssapi.HTTPKerberosAuth')
     def test_gssapi_login_keytab(self, HTTPKerberosAuth_mock):
         principal = 'user@EXAMPLE.COM'
         keytab = '/path/to/keytab'
         ccache = '/path/to/cache'
         old_environ = dict(**os.environ)
-        current_version = koji.requests_kerberos.__version__
+        current_version = koji.reqgssapi.__version__
         accepted_versions = ['0.12.0.beta1',
                              '0.12.0dev',
                              '0.12.0a1',
@@ -47,7 +47,7 @@
                              '0.10.0',
                              '0.9.0']
         for accepted_version in accepted_versions:
-            koji.requests_kerberos.__version__ = accepted_version
+            koji.reqgssapi.__version__ = accepted_version
             rv = self.session.gssapi_login(principal, keytab, ccache)
             self.session._callMethod.assert_called_once_with('sslLogin',
                                                              [None],
@@ -55,14 +55,14 @@
             self.assertEqual(old_environ, dict(**os.environ))
             self.assertTrue(rv)
             self.session._callMethod.reset_mock()
-        koji.requests_kerberos.__version__ = current_version
+        koji.reqgssapi.__version__ = current_version
 
-    def test_gssapi_login_keytab_unsupported_requests_kerberos_version(self):
+    def test_gssapi_login_keytab_unsupported_requests_kerberos(self):
         principal = 'user@EXAMPLE.COM'
         keytab = '/path/to/keytab'
         ccache = '/path/to/cache'
         old_environ = dict(**os.environ)
-        current_version = koji.requests_kerberos.__version__
+        current_version = koji.reqgssapi.__version__
         old_versions = ['0.8.0',
                         '0.7.0',
                         '0.6.1',
@@ -72,15 +72,15 @@
                         '0.2',
                         '0.1']
         for old_version in old_versions:
-            koji.requests_kerberos.__version__ = old_version
+            koji.reqgssapi.__version__ = old_version
             with self.assertRaises(koji.PythonImportError) as cm:
                 self.session.gssapi_login(principal, keytab, ccache)
             self.assertEqual(cm.exception.args[0],
-                             'python-requests-kerberos >= 0.9.0 required for '
+                             'python-requests-gssapi >= 0.9.0 required for '
                              'keytab auth')
             self.session._callMethod.assert_not_called()
             self.assertEqual(old_environ, dict(**os.environ))
-        koji.requests_kerberos.__version__ = current_version
+        koji.reqgssapi.__version__ = current_version
 
     def test_gssapi_login_error(self):
         old_environ = dict(**os.environ)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_krbv.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_krbv.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_krbv.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_krbv.py	1970-01-01 08:00:00.000000000 +0800
@@ -1,41 +0,0 @@
-from __future__ import absolute_import
-
-import base64
-# This is python-mock, not the rpm mock tool we know and love
-import mock
-import six
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
-
-import koji
-
-
-class KrbVTestCase(unittest.TestCase):
-    @mock.patch('koji.krbV', new=None)
-    @mock.patch('koji.requests_kerberos', new=None)
-    def test_krbv_disabled(self):
-        """Test that when krbV and gssapi are absent, we behave rationally"""
-        self.assertEquals(koji.krbV, None)
-        session = koji.ClientSession('whatever')
-        with self.assertRaises(ImportError):
-            session.krb_login()
-
-    # this case should work on python3, but skipped still
-    @unittest.skipIf(six.PY3, "skipped on python3 since missing of python-krbV")
-    @mock.patch('koji.krbV', create=True)
-    @mock.patch('requests_kerberos.__version__', new='0.7.0')
-    @mock.patch('koji.ClientSession._serverPrincipal')
-    def test_krbv_old_requests_kerberos(self, _serverPrincipal_mock, krbV_mock):
-        self.assertIsNotNone(koji.krbV)
-        ctx = koji.krbV.default_context.return_value
-        ctx.mk_req = mock.MagicMock()
-        ac = mock.MagicMock()
-        ctx.mk_req.return_value = (ac, six.b('req'))
-        ac.rd_priv = mock.MagicMock(return_value='session-id session-key')
-        session = koji.ClientSession('whatever')
-        session._callMethod = mock.MagicMock(
-            return_value=(base64.encodestring(six.b('a')), base64.encodestring(six.b('b')), [0, 1, 2, 3]))
-        rv = session.krb_login(principal='any@SOMEWHERE.COM', keytab='/path/to/keytab')
-        self.assertTrue(rv)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_utils.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_utils.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_lib/test_utils.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_lib/test_utils.py	2020-09-07 15:44:50.000000000 +0800
@@ -161,6 +161,56 @@
             for m in mocks:
                 m.assert_not_called()
 
+        for m in mocks:
+            m.reset_mock()
+
+        # downloaded size is larger than content-length
+        with requests_mock.Mocker() as m_requests:
+            text = 'random content'
+            m_requests.register_uri('GET', url, text=text,
+                    headers = {'Content-Length': "3"})
+            m_TemporaryFile.return_value.tell.return_value = len(text)
+            with self.assertRaises(koji.GenericError):
+                koji.openRemoteFile(path, topurl=topurl)
+            m_TemporaryFile.assert_called_once()
+            m_TemporaryFile.return_value.tell.assert_called()
+            m_open.assert_not_called()
+
+        for m in mocks:
+            m.reset_mock()
+
+        # downloaded size is shorter than content-length
+        with requests_mock.Mocker() as m_requests:
+            text = 'random content'
+            m_requests.register_uri('GET', url, text=text,
+                    headers = {'Content-Length': "100"})
+            m_TemporaryFile.return_value.tell.return_value = len(text)
+            with self.assertRaises(koji.GenericError):
+                koji.openRemoteFile(path, topurl=topurl)
+            m_TemporaryFile.assert_called_once()
+            m_TemporaryFile.return_value.tell.assert_called()
+            m_open.assert_not_called()
+
+    def test_openRemoteFile_valid_rpm(self):
+        # downloaded file is correct rpm
+        with requests_mock.Mocker() as m_requests:
+            topurl = 'http://example.com/koji'
+            path = 'tests/test_lib/data/rpms/test-src-1-1.fc24.src.rpm'
+            url = os.path.join(topurl, path)
+            m_requests.register_uri('GET', url, body=open(path, 'rb'))
+            #with self.assertRaises(koji.GenericError):
+            koji.openRemoteFile(path, topurl=topurl)
+
+    def test_openRemoteFile_invalid_rpm(self):
+        # downloaded file is correct rpm
+        with requests_mock.Mocker() as m_requests:
+            topurl = 'http://example.com/koji'
+            path = 'file.rpm'
+            url = os.path.join(topurl, path)
+            m_requests.register_uri('GET', url, text='123')
+            with self.assertRaises(koji.GenericError):
+                koji.openRemoteFile(path, topurl=topurl)
+
     def test_joinpath_bad(self):
         bad_joins = [
             ['/foo', '../bar'],
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/loadwebindex.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/loadwebindex.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/loadwebindex.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/loadwebindex.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,3 @@
-from __future__ import absolute_import
 import os
 import imp
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/test_taskinfo.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/test_taskinfo.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/test_taskinfo.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/test_taskinfo.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,16 +1,11 @@
-from __future__ import absolute_import
-from __future__ import print_function
 import mock
-import koji
 import copy
 import datetime
-
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 from mock import call
+
+import koji
 from .loadwebindex import webidx
 
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/test_util.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/test_util.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/tests/test_www/test_util.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/tests/test_www/test_util.py	2020-09-07 15:44:50.000000000 +0800
@@ -1,9 +1,4 @@
-from __future__ import absolute_import
-
-try:
-    import unittest2 as unittest
-except ImportError:
-    import unittest
+import unittest
 
 from kojiweb.util import formatMode
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc	2020-09-07 15:44:50.000000000 +0800
@@ -15,7 +15,6 @@
 import os
 import pprint
 import smtplib
-import socket  # for socket.error
 import sys
 import time
 from string import Template
@@ -28,12 +27,7 @@
 
 import koji
 import koji.policy
-from koji.util import LazyDict, LazyValue, to_list
-
-try:
-    import krbV
-except ImportError:  # pragma: no cover
-    krbV = None
+from koji.util import LazyDict, LazyValue, to_list, deprecated
 
 
 def _(args):
@@ -51,14 +45,6 @@
                       help=_("use alternate configuration file"))
     parser.add_option("--keytab", help=_("specify a Kerberos keytab to use"))
     parser.add_option("--principal", help=_("specify a Kerberos principal to use"))
-    parser.add_option("--krbservice", default="host",
-                      help=_("the service name of the principal being used by the hub"))
-    parser.add_option("--krb-rdns", action="store_true", default=False,
-                      help=_("get reverse dns FQDN for krb target"))
-    parser.add_option("--krb-canon-host", action="store_true", default=False,
-                      help=_("get canonical hostname for krb target"))
-    parser.add_option("--krb-server-realm",
-                      help=_("the realm of server Kerberos principal"))
     parser.add_option("--runas", metavar="USER",
                       help=_("run as the specified user (requires special privileges)"))
     parser.add_option("--user", help=_("specify user"))
@@ -68,8 +54,7 @@
     parser.add_option("--network-hack", action="store_true", default=False,
                       help=optparse.SUPPRESS_HELP)  # no longer used
     parser.add_option("--cert", help=_("Client SSL certificate file for authentication"))
-    parser.add_option("--ca", default='',
-                      help=_("ignored"))  # FIXME: remove in next major release
+    parser.add_option("--ca", help=optparse.SUPPRESS_HELP)  # FIXME: remove in 1.24
     parser.add_option("--serverca", help=_("CA cert file that issued the hub certificate"))
     parser.add_option("-n", "--test", action="store_true", default=False,
                       help=_("test mode"))
@@ -77,7 +62,7 @@
                       help=_("show debug output"))
     parser.add_option("--debug-xmlrpc", action="store_true", default=False,
                       help=_("show xmlrpc debug output"))
-    parser.add_option("--smtp-host", metavar="HOST",
+    parser.add_option("--smtp-host", metavar="HOST", default='localhost',
                       help=_("specify smtp server for notifications"))
     parser.add_option("--smtp-user", dest="smtp_user", metavar="USER",
                       help=_("specify smtp username for notifications"))
@@ -91,6 +76,10 @@
                       help=_("Email domain appended to Koji username for notifications"))
     parser.add_option("--from-addr", default="Koji Build System <buildsys@example.com>",
                       help=_("From address for notifications"))
+    parser.add_option("--cc-addr", help=_("CC address for notifications (multiple)"),
+                      action="append", metavar="EMAIL_ADDRESS")
+    parser.add_option("--bcc-addr", help=_("BCC address for notifications (multiple)"),
+                      action="append", metavar="EMAIL_ADDRESS")
     parser.add_option("--email-template", default="/etc/koji-gc/email.tpl",
                       help=_("notification template"))
     parser.add_option("--action", help=_("action(s) to take"))
@@ -137,10 +126,6 @@
         # name, alias, type
         ['keytab', None, 'string'],
         ['principal', None, 'string'],
-        ['krbservice', None, 'string'],
-        ['krb_rdns', None, 'boolean'],
-        ['krb_canon_host', None, 'boolean'],
-        ['krb_server_realm', None, 'string'],
         ['runas', None, 'string'],
         ['user', None, 'string'],
         ['password', None, 'string'],
@@ -154,6 +139,8 @@
         ['smtp_user', None, 'string'],
         ['smtp_pass', None, 'string'],
         ['from_addr', None, 'string'],
+        ['cc_addr', None, 'string'],
+        ['bcc_addr', None, 'string'],
         ['email_template', None, 'string'],
         ['email_domain', None, 'string'],
         ['mail', None, 'boolean'],
@@ -178,10 +165,17 @@
                 setattr(defaults, name, config.getboolean(*alias))
             else:
                 setattr(defaults, name, config.get(*alias))
+    if config.has_option('main', 'cc_addr'):
+        setattr(defaults, 'cc_addr', config.get('main', 'cc_addr').split(','))
+    if config.has_option('main', 'bcc_addr'):
+        setattr(defaults, 'bcc_addr', config.get('main', 'bcc_addr').split(','))
     # parse again with defaults
     (options, args) = parser.parse_args(values=defaults)
     options.config = config
 
+    if options.ca:
+        deprecated("--ca option is deprecated and will be removed in 1.24")
+
     # figure out actions
     actions = ('prune', 'trash', 'delete', 'salvage')
     if options.action:
@@ -368,18 +362,6 @@
                (ret, koji.API_VERSION)))
 
 
-def has_krb_creds():
-    if krbV is None:
-        return False
-    try:
-        ctx = krbV.default_context()
-        ccache = ctx.default_ccache()
-        ccache.principal()
-        return True
-    except krbV.Krb5Error:
-        return False
-
-
 def activate_session(session):
     """Test and login the session is applicable"""
     global options
@@ -392,17 +374,9 @@
     elif options.user:
         # authenticate using user/password
         session.login()
-    elif has_krb_creds() or (options.keytab and options.principal):
-        try:
-            if options.keytab and options.principal:
-                session.krb_login(principal=options.principal, keytab=options.keytab,
-                                  proxyuser=options.runas)
-            else:
-                session.krb_login(proxyuser=options.runas)
-        except krbV.Krb5Error as e:
-            error(_("Kerberos authentication failed: %s (%s)") % (e.args[1], e.args[0]))
-        except socket.error as e:
-            warn(_("Could not connect to Kerberos authentication service: '%s'") % e.args[1])
+    elif koji.reqgssapi:
+        session.gssapi_login(principal=options.principal, keytab=options.keytab,
+                             proxyuser=options.runas)
     if not options.noauth and not session.logged_in:
         error(_("Error: unable to log in, no authentication methods available"))
     ensure_connection(session)
@@ -436,23 +410,29 @@
         msg['Subject'] = "%i builds marked for deletion" % len(builds)
     msg['From'] = options.from_addr
     msg['To'] = "%s@%s" % (owner_name, options.email_domain)  # XXX!
+    emails = [msg['To']]
+    if options.cc_addr:
+        msg['Cc'] = ','.join(options.cc_addr)
+        emails += options.cc_addr
+    if options.bcc_addr:
+        emails += options.bcc_addr
     msg['X-Koji-Builder'] = owner_name
     if options.test:
         if options.debug:
             print(str(msg))
         else:
-            print("Would have sent warning notice to %s" % msg['To'])
+            print("Would have sent warning notice to %s" % emails)
     else:
         if options.debug:
-            print("Sending warning notice to %s" % msg['To'])
+            print("Sending warning notice to %s" % emails)
         try:
             s = smtplib.SMTP(options.smtp_host)
             if options.smtp_user is not None and options.smtp_pass is not None:
                 s.login(options.smtp_user, options.smtp_pass)
-            s.sendmail(msg['From'], msg['To'], msg.as_string())
+            s.sendmail(msg['From'], emails, msg.as_string())
             s.quit()
         except Exception:
-            print("FAILED: Sending warning notice to %s" % msg['To'])
+            print("FAILED: Sending warning notice to %s" % emails)
 
 
 def main(args):
@@ -546,9 +526,15 @@
             else:
                 age = time.time() - ts
         else:
-            history = [(h['revoke_event'], h) for h in history]
-            last = max(history)[1]
-            if not last['revoke_event']:
+            tagged = False
+            last = history[0]
+            for h in history:
+                if not h['revoke_event']:
+                    tagged = True
+                    break
+                if h['revoke_event'] > last['revoke_event']:
+                    last = h
+            if tagged:
                 # this might happen if the build was tagged just now
                 print("[%i/%i] Warning: build not untagged: %s" % (i, N, nvr))
                 continue
@@ -893,7 +879,7 @@
         if options.debug:
             print("Pruning tag: %s" % tagname)
         # get builds
-        history = session.queryHistory(tag=tagname, active=True)['tag_listing']
+        history = session.queryHistory(tag=taginfo['id'], active=True)['tag_listing']
         history = sorted(history, key=lambda x: -x['create_ts'])
         if not history:
             if options.debug:
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.conf	2020-09-07 15:44:50.000000000 +0800
@@ -16,12 +16,6 @@
 server = https://koji.fedoraproject.org/kojihub
 weburl = https://koji.fedoraproject.org/koji
 
-# The service name of the principal being used by the hub
-#krbservice = host
-
-## The realm of server principal. Using client's realm if not set
-# krb_server_realm = EXAMPLE.COM
-
 # The domain name that will be appended to Koji usernames
 # when creating email notifications
 #email_domain = fedoraproject.org
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.service /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.service
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.service	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.service	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,7 @@
+[Unit]
+Description=Koji garbage collection
+Documentation=https://docs.pagure.org/koji/utils/
+
+[Service]
+Type=oneshot
+ExecStart=/usr/sbin/koji-gc --lock-file=/var/lock/koji-gc.lock --exit-on-lock
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.timer /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.timer
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-gc.timer	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-gc.timer	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,10 @@
+[Unit]
+Description=Daily Koji garbage collection
+Documentation=https://docs.pagure.org/koji/utils/
+
+[Timer]
+OnCalendar=daily
+Persistent=true
+
+[Install]
+WantedBy=timers.target
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira	2020-09-07 15:44:50.000000000 +0800
@@ -64,7 +64,7 @@
 
 class ManagedRepo(object):
 
-    def __init__(self, manager, data):
+    def __init__(self, manager, data, repodata=None):
         self.manager = manager
         self.session = manager.session
         self.options = manager.options
@@ -81,7 +81,7 @@
         self.expire_ts = None
         if koji.REPO_STATES[self.state] in ['EXPIRED', 'DELETED', 'PROBLEM']:
             self.current = False
-            self.expire_ts = time.time()
+            self._find_expire_time(repodata)
             # TODO use hub data to find the actual expiration time
         self.first_seen = time.time()
         if self.current:
@@ -92,6 +92,17 @@
                 tags[x['parent_id']] = 1
             self.taglist = to_list(tags.keys())
 
+    def _find_expire_time(self, repodata):
+        # find all newer repos for same tag and set oldest as expire_ts for our repo
+        if repodata:
+            repos = [r for r in repodata if
+                     r['tag_id'] == self.tag_id and r['create_event'] > self.event_id]
+            if repos:
+                invalidated_by = sorted(repos, key=lambda x: x['create_event'])
+                self.expire_ts = invalidated_by[0]['create_ts']
+        if not self.expire_ts:
+            self.expire_ts = time.time()
+
     @property
     def dist(self):
         # TODO: remove this indirection once we can rely on the hub to return
@@ -162,13 +173,25 @@
         # XXX - config
         if self.state != koji.REPO_INIT:
             return False
-        age = time.time() - max(self.event_ts, self.first_seen)
-        # the first_seen timestamp is also factored in because a repo can be
+        times = [self.event_ts]
+        # the mtime is also factored in because a repo can be
         # created from an older event and should not be expired based solely on
         # that event's timestamp.
+        path = self.get_path()
+        if os.path.exists(path):
+            try:
+                times.append(os.stat(path).st_mtime)
+            except Exception:
+                self.logger.error("Can't read mtime for %s" % path)
+                return False
+        else:
+            times.append(self.first_seen)
+            self.logger.warning("Repo %d is in INIT state, "
+                                "but doesn't have directory %s yet?" % (self.repo_id, path))
+        age = time.time() - max(times)
         return age > timeout
 
-    def tryDelete(self):
+    def tryDelete(self, logger):
         """Remove the repo from disk, if possible"""
         path = self.get_path()
         if not path:
@@ -187,52 +210,55 @@
             if e.errno == 2:
                 # No such file or directory, so the repo either never existed,
                 # or has already been deleted, so allow it to be marked deleted.
-                self.logger.info("Repo directory does not exist: %s" % path)
+                logger.info("Repo directory does not exist: %s" % path)
                 pass
             else:
-                self.logger.error("Can't stat repo directory: %s, %s" % (path, e.strerror))
+                logger.error("Can't stat repo directory: %s, %s" % (path, e.strerror))
                 return False
         else:
-            times = [self.event_ts, mtime, self.first_seen, self.expire_ts]
+            times = [self.event_ts, mtime, self.expire_ts]
             times = [ts for ts in times if ts is not None]
             age = time.time() - max(times)
-            self.logger.debug("Repo %s (%s) age: %i sec", self.repo_id, path, age)
+            logger.debug("Repo %s (%s) age: %i sec", self.repo_id, path, age)
             if age < lifetime:
                 return False
-        self.logger.debug("Attempting to delete repo %s.." % self.repo_id)
+        logger.debug("Attempting to delete repo %s.." % self.repo_id)
         if self.state != koji.REPO_EXPIRED:
             raise koji.GenericError("Repo not expired")
         if self.session.repoDelete(self.repo_id) > 0:
             # cannot delete, we are referenced by a buildroot
-            self.logger.debug("Cannot delete repo %s, still referenced" % self.repo_id)
+            logger.debug("Cannot delete repo %s, still referenced" % self.repo_id)
             return False
-        self.logger.info("Deleted repo %s" % self.repo_id)
+        logger.info("Deleted repo %s" % self.repo_id)
         self.state = koji.REPO_DELETED
         if os.path.islink(path):
             # expected for repos on other volumes
             info = self.get_info()
             if not os.path.exists(path):
-                self.logger.error('Repo volume link broken: %s', path)
+                logger.error('Repo volume link broken: %s', path)
                 return False
             if not info or 'volume' not in info:
-                self.logger.error('Missing repo.json in %s', path)
+                logger.error('Missing repo.json in %s', path)
                 return False
             realpath = self.get_path(volume=info['volume'])
             if not os.path.exists(realpath):
-                self.logger.error('Repo real path missing: %s', realpath)
+                logger.error('Repo real path missing: %s', realpath)
                 return False
             if not os.path.samefile(path, realpath):
-                self.logger.error('Incorrect volume link: %s', path)
+                logger.error('Incorrect volume link: %s', path)
                 return False
             # ok, try to remove the symlink
             try:
                 os.unlink(path)
             except OSError:
-                self.logger.error('Unable to remove volume link: %s', path)
-            # and remove the real path
-            self.manager.rmtree(realpath)
+                logger.error('Unable to remove volume link: %s', path)
         else:
-            self.manager.rmtree(path)
+            realpath = path
+        try:
+            rmtree(realpath)
+        except BaseException:
+            logger.error(''.join(traceback.format_exception(*sys.exc_info())))
+
         return True
 
     def ready(self):
@@ -359,7 +385,7 @@
             else:
                 self.logger.info('Found repo %s, state=%s'
                                  % (repo_id, koji.REPO_STATES[data['state']]))
-                repo = ManagedRepo(self, data)
+                repo = ManagedRepo(self, data, repodata)
                 self.repos[repo_id] = repo
             if not getTag(self.session, repo.tag_id) and not repo.expired():
                 self.logger.info('Tag %d for repo %d disappeared, expiring.', repo.tag_id, repo_id)
@@ -507,6 +533,21 @@
         finally:
             session.logout()
 
+    def deleteLoop(self, session):
+        """Triggers regens as needed/possible. Runs in a separate thread"""
+        self.session = session
+        self.delete_logger = logging.getLogger("koji.repo.delete")
+        self.delete_logger.info('deleteLoop starting')
+        try:
+            while True:
+                self.deleteRepos()
+                time.sleep(self.options.sleeptime)
+        except Exception:
+            self.delete_logger.exception('Error in delete thread')
+            raise
+        finally:
+            session.logout()
+
     def pruneLocalRepos(self):
         for volinfo in self.session.listVolumes():
             volumedir = pathinfo.volumedir(volinfo['name'])
@@ -558,7 +599,7 @@
                 symlink = False
                 if stat.S_ISLNK(dirstat.st_mode):
                     symlink = True
-                elif stat.S_ISDIR(dirstat.st_mode):
+                elif not stat.S_ISDIR(dirstat.st_mode):
                     self.logger.debug("%s not a directory, skipping", repodir)
                     continue
                 dir_ts = dirstat.st_mtime
@@ -668,16 +709,14 @@
 
         self.updateTagScores()
 
-        # trigger deletes
-        n_deletes = 0
-        for repo in to_list(self.repos.values()):
-            if n_deletes >= self.options.delete_batch_size:
-                break
-            if repo.expired():
-                # try to delete
-                if repo.tryDelete():
-                    n_deletes += 1
-                    del self.repos[repo.repo_id]
+        if self.options.queue_file:
+            with open(self.options.queue_file, "wt") as f:
+                fmt = "%-40s %7s %5s\n"
+                f.write(fmt % ("Tag", "Expired", "Score"))
+                for tag in sorted(self.needed_tags.values(), key=lambda t: t['score'],
+                                  reverse=True):
+                    time_expired = time.time() - tag['expire_ts']
+                    f.write(fmt % (tag['taginfo']['name'], int(time_expired), int(tag['score'])))
 
     def checkTasks(self):
         """Check on newRepo tasks
@@ -829,9 +868,12 @@
         order = sorted(self.needed_tags.values(), key=lambda t: t['score'], reverse=True)
         for tag in order:
             if running_tasks >= self.options.max_repo_tasks:
+                self.logger.debug("Running tasks (%s): %s" % (running_tasks, list(self.tasks)))
                 self.logger.info("Maximum number of repo tasks reached")
                 return
             elif len(self.tasks) + len(self.other_tasks) >= self.options.repo_tasks_limit:
+                self.logger.debug("Tracked tasks (%s): %s" % (len(self.tasks), list(self.tasks)))
+                self.logger.debug("Untracked tasks (%s): %s" % (len(self.other_tasks), list(self.other_tasks)))
                 self.logger.info("Repo task limit reached")
                 return
             tagname = tag['taginfo']['name']
@@ -881,6 +923,18 @@
         if running_tasks_maven >= self.options.max_repo_tasks_maven:
             self.logger.info("Maximum number of maven repo tasks reached")
 
+    def deleteRepos(self):
+        # trigger deletes
+        self.delete_logger.debug("Starting delete repos")
+        n = 0
+        for repo in to_list(self.repos.values()):
+            if repo.expired():
+                # try to delete
+                if repo.tryDelete(self.delete_logger):
+                    del self.repos[repo.repo_id]
+                    n += 1
+        self.delete_logger.debug("Ending delete repos (deleted: %s)" % n)
+
 
 def start_currency_checker(session, repomgr):
     subsession = session.subsession()
@@ -909,6 +963,15 @@
     return thread
 
 
+def start_delete_loop(session, repomgr):
+    subsession = session.subsession()
+    thread = threading.Thread(name='deleteLoop',
+                              target=repomgr.deleteLoop, args=(subsession,))
+    thread.setDaemon(True)
+    thread.start()
+    return thread
+
+
 def main(options, session):
     repomgr = RepoManager(options, session)
     repomgr.readCurrentRepos()
@@ -920,6 +983,7 @@
     if options.check_external_repos:
         curr_ext_chk_thread = start_external_currency_checker(session, repomgr)
     regen_thread = start_regen_loop(session, repomgr)
+    delete_thread = start_delete_loop(session, repomgr)
     # TODO also move rmtree jobs to threads
     logger.info("Entering main loop")
     while True:
@@ -928,15 +992,18 @@
             repomgr.checkQueue()
             repomgr.printState()
             repomgr.pruneLocalRepos()
-            if not curr_chk_thread.isAlive():
+            if not curr_chk_thread.is_alive():
                 logger.error("Currency checker thread died. Restarting it.")
                 curr_chk_thread = start_currency_checker(session, repomgr)
-            if options.check_external_repos and not curr_ext_chk_thread.isAlive():
+            if options.check_external_repos and not curr_ext_chk_thread.is_alive():
                 logger.error("External currency checker thread died. Restarting it.")
                 curr_ext_chk_thread = start_external_currency_checker(session, repomgr)
-            if not regen_thread.isAlive():
+            if not regen_thread.is_alive():
                 logger.error("Regeneration thread died. Restarting it.")
                 regen_thread = start_regen_loop(session, repomgr)
+            if not delete_thread.is_alive():
+                logger.error("Delete thread died. Restarting it.")
+                delete_thread = start_delete_loop(session, repomgr)
         except KeyboardInterrupt:
             logger.warning("User exit")
             break
@@ -993,6 +1060,8 @@
     parser.add_option("-s", "--server", help="URL of XMLRPC server")
     parser.add_option("--topdir", help="Specify topdir")
     parser.add_option("--logfile", help="Specify logfile")
+    parser.add_option("--queue-file",
+                      help="If specified, queue is dumped to separate status file each cycle")
     (options, args) = parser.parse_args()
 
     config = koji.read_config_files(options.configFile)
@@ -1013,10 +1082,6 @@
                 'principal': None,
                 'keytab': '/etc/kojira/kojira.keytab',
                 'ccache': '/var/tmp/kojira.ccache',
-                'krbservice': 'host',
-                'krb_rdns': True,
-                'krb_canon_host': False,
-                'krb_server_realm': None,
                 'retry_interval': 60,
                 'max_retries': 120,
                 'offline_retry': True,
@@ -1026,7 +1091,6 @@
                 'max_repo_tasks': 4,
                 'max_repo_tasks_maven': 2,
                 'repo_tasks_limit': 10,
-                'delete_batch_size': 3,
                 'deleted_repo_lifetime': 7 * 24 * 3600,
                 # XXX should really be called expired_repo_lifetime
                 'dist_repo_lifetime': 7 * 24 * 3600,
@@ -1036,19 +1100,19 @@
                 'cert': None,
                 'ca': '',  # FIXME: unused, remove in next major release
                 'serverca': None,
+                'queue_file': None,
                 }
     if config.has_section(section):
         int_opts = ('deleted_repo_lifetime', 'max_repo_tasks', 'repo_tasks_limit',
                     'retry_interval', 'max_retries', 'offline_retry_interval',
-                    'max_delete_processes', 'max_repo_tasks_maven',
-                    'delete_batch_size', 'dist_repo_lifetime', 'sleeptime',
-                    'recent_tasks_lifetime')
+                    'max_delete_processes', 'max_repo_tasks_maven', 'dist_repo_lifetime',
+                    'sleeptime', 'recent_tasks_lifetime')
         str_opts = ('topdir', 'server', 'user', 'password', 'logfile', 'principal', 'keytab',
-                    'krbservice', 'cert', 'ca', 'serverca', 'debuginfo_tags',
+                    'cert', 'ca', 'serverca', 'debuginfo_tags', 'queue_file',
                     'source_tags', 'separate_source_tags', 'ignore_tags')  # FIXME: remove ca here
         bool_opts = ('verbose', 'debug', 'ignore_stray_repos', 'offline_retry',
-                     'krb_rdns', 'krb_canon_host', 'no_ssl_verify', 'check_external_repos')
-        legacy_opts = ('with_src')
+                     'no_ssl_verify', 'check_external_repos')
+        legacy_opts = ('with_src', 'delete_batch_size')
         for name in config.options(section):
             if name in int_opts:
                 defaults[name] = config.getint(section, name)
@@ -1125,8 +1189,8 @@
     elif options.user:
         # authenticate using user/password
         session.login()
-    elif (koji.krbV or koji.requests_kerberos) and options.principal and options.keytab:
-        session.krb_login(options.principal, options.keytab, options.ccache)
+    elif koji.reqgssapi and options.principal and options.keytab:
+        session.gssapi_login(options.principal, options.keytab, options.ccache)
     else:
         quit("No username/password/certificate supplied and Kerberos missing or not configured")
     # get an exclusive session
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.conf	2020-09-07 15:44:50.000000000 +0800
@@ -3,12 +3,6 @@
 ; user=kojira
 ; password=kojira
 
-; For Kerberos authentication
-; the principal to connect with
-principal=koji/repo@EXAMPLE.COM
-; The location of the keytab for the principal above
-keytab=/etc/kojira.keytab
-
 ; The URL for the koji hub server
 server=http://hub.example.com/kojihub
 
@@ -26,12 +20,6 @@
 ;location of the keytab
 ;keytab = /etc/kojira/kojira.keytab
 
-;the service name of the principal being used by the hub
-;krbservice = host
-
-;The realm of server principal. Using client's realm if not set
-;krb_server_realm = EXAMPLE.COM
-
 ;configuration for SSL authentication
 
 ;client certificate
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.init /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.init
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.init	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.init	2020-09-07 15:44:50.000000000 +0800
@@ -14,8 +14,6 @@
 # Check that we're a privileged user
 [ `id -u` = 0 ] || exit 0
 
-[ -f /etc/sysconfig/kojira ] && . /etc/sysconfig/kojira
-
 prog="kojira"
 
 # Check that networking is up.
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.sysconfig /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.sysconfig
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/kojira.sysconfig	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/kojira.sysconfig	1970-01-01 08:00:00.000000000 +0800
@@ -1,4 +0,0 @@
-FORCE_LOCK=Y
-KOJIRA_DEBUG=N
-KOJIRA_VERBOSE=Y
-RUNAS=root
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-shadow /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-shadow
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-shadow	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-shadow	2020-09-07 15:44:50.000000000 +0800
@@ -44,11 +44,6 @@
 import koji
 from koji.util import to_list
 
-try:
-    import krbV
-except ImportError:  # pragma: no cover
-    krbV = None
-
 # koji.fp.o keeps stalling, probably network errors...
 # better to time out than to stall
 socket.setdefaulttimeout(180)  # XXX - too short?
@@ -82,18 +77,10 @@
                       help=_("use alternate configuration file"))
     parser.add_option("--keytab", help=_("specify a Kerberos keytab to use"))
     parser.add_option("--principal", help=_("specify a Kerberos principal to use"))
-    parser.add_option("--krbservice", help=_("the service name of the"
-                                             " principal being used by the hub"))
     parser.add_option("--runas", metavar="USER",
                       help=_("run as the specified user (requires special privileges)"))
     parser.add_option("--user", help=_("specify user"))
     parser.add_option("--password", help=_("specify password"))
-    parser.add_option("--krb-rdns", action="store_true", default=False,
-                      help=_("get reverse dns FQDN for krb target"))
-    parser.add_option("--krb-canon-host", action="store_true", default=False,
-                      help=_("get canonical hostname for krb target"))
-    parser.add_option("--krb-server-realm",
-                      help=_("the realm of server Kerberos principal"))
     parser.add_option("--noauth", action="store_true", default=False,
                       help=_("do not authenticate"))
     parser.add_option("-n", "--test", action="store_true", default=False,
@@ -305,17 +292,12 @@
     elif options.user:
         # authenticate using user/password
         session.login()
-    elif krbV:
-        try:
-            if options.keytab and options.principal:
-                session.krb_login(principal=options.principal, keytab=options.keytab,
-                                  proxyuser=options.runas)
-            else:
-                session.krb_login(proxyuser=options.runas)
-        except krbV.Krb5Error as e:
-            error(_("Kerberos authentication failed: '%s' (%s)") % (e.args[1], e.args[0]))
-        except socket.error as e:
-            warn(_("Could not connect to Kerberos authentication service: '%s'") % e.args[1])
+    else:
+        if options.keytab and options.principal:
+            session.gssapi_login(principal=options.principal, keytab=options.keytab,
+                                 proxyuser=options.runas)
+        else:
+            session.gssapi_login(proxyuser=options.runas)
     if not options.noauth and not session.logged_in:
         error(_("Error: unable to log in"))
     ensure_connection(session)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-shadow.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-shadow.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-shadow.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-shadow.conf	2020-09-07 15:44:50.000000000 +0800
@@ -3,8 +3,4 @@
 
 [main]
 server=http://localhost/kojihub/
-krbservice=host
 remote=https://koji.fedoraproject.org/kojihub
-
-## The realm of server principal. Using client's realm if not set
-# krb_server_realm = EXAMPLE.COM
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-sidetag-cleanup /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-sidetag-cleanup
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-sidetag-cleanup	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-sidetag-cleanup	2020-09-07 15:44:50.000000000 +0800
@@ -1,4 +1,4 @@
-#!/usr/bin/python3
+#!/usr/bin/python2
 
 import sys
 import configparser
@@ -33,12 +33,6 @@
     parser.add_option("-s", "--server", help=_("url of koji XMLRPC server"))
     parser.add_option("--keytab", help=_("specify a Kerberos keytab to use"))
     parser.add_option("--principal", help=_("specify a Kerberos principal to use"))
-    parser.add_option("--krbservice", default="host",
-                      help=_("the service name of the principal being used by the hub"))
-    parser.add_option("--krb-rdns", action="store_true", default=False,
-                      help=_("get reverse dns FQDN for krb target"))
-    parser.add_option("--krb-canon-host", action="store_true", default=False,
-                      help=_("get canonical hostname for krb target"))
     parser.add_option("--runas", metavar="USER",
                       help=_("run as the specified user (requires special privileges)"))
     parser.add_option("--user", help=_("specify user"))
@@ -88,9 +82,6 @@
             # name, alias, type
             ['keytab', None, 'string'],
             ['principal', None, 'string'],
-            ['krbservice', None, 'string'],
-            ['krb_rdns', None, 'boolean'],
-            ['krb_canon_host', None, 'boolean'],
             ['runas', None, 'string'],
             ['user', None, 'string'],
             ['password', None, 'string'],
@@ -190,7 +181,7 @@
 
 def clean_empty(tags):
     # delete empty tags which are older than --empty-delay
-    if not options.clean_old:
+    if not options.clean_empty:
         return tags
     passed = []
     candidates = []
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-sweep-db.service /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-sweep-db.service
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/koji-sweep-db.service	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/koji-sweep-db.service	2020-09-07 15:44:50.000000000 +0800
@@ -3,5 +3,5 @@
 Documentation=https://pagure.io/docs/koji/
 
 [Service]
-Type=simple
+Type=oneshot
 ExecStart=/usr/sbin/koji-sweep-db
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/Makefile /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/Makefile
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/util/Makefile	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/util/Makefile	2020-09-07 15:44:50.000000000 +0800
@@ -32,14 +32,13 @@
 install-systemd: _install
 	mkdir -p $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
 	install -p -m 644 kojira.service $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
+	install -p -m 644 koji-gc.service $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
+	install -p -m 644 koji-gc.timer $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
 	install -p -m 644 koji-sweep-db.service $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
 	install -p -m 644 koji-sweep-db.timer $(DESTDIR)$(SYSTEMDSYSTEMUNITDIR)
 
 install-sysv: _install
-	mkdir -p $(DESTDIR)/etc/rc.d/init.d
-	install -p -m 755 kojira.init $(DESTDIR)/etc/rc.d/init.d/kojira
-
-	mkdir -p $(DESTDIR)/etc/sysconfig
-	install -p -m 644 kojira.sysconfig $(DESTDIR)/etc/sysconfig/kojira
+	# no more utils support for sysv
+	true
 
 install: install-$(TYPE)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/fix_kojikamid.sh /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/fix_kojikamid.sh
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/fix_kojikamid.sh	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/fix_kojikamid.sh	2020-09-07 15:44:50.000000000 +0800
@@ -2,7 +2,7 @@
 
 awk '/^# INSERT kojikamid dup #/ {exit} {print $0}' kojikamid.py
 
-for fn in ../koji/__init__.py ../koji/daemon.py
+for fn in ../koji/__init__.py ../koji/daemon.py ../koji/util.py
 do
     awk '/^# END kojikamid dup #/ {p=0} p {print $0} /^# BEGIN kojikamid dup #/ {p=1}' $fn
 done
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojikamid.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojikamid.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojikamid.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojikamid.py	2020-09-07 15:44:50.000000000 +0800
@@ -333,11 +333,11 @@
             elif checksum_type == 'sha256':
                 checksum = hashlib.sha256()
             elif checksum_type == 'md5':
-                checksum = hashlib.md5()
+                checksum = md5_constructor.md5()  # noqa: F821
             else:
                 raise BuildError('Unknown checksum type %s for %s' % (  # noqa: F821
-                        checksum_type,
-                        os.path.basename(fileinfo['localpath'])))
+                                 checksum_type,
+                                 os.path.basename(fileinfo['localpath'])))
         with open(destpath, 'w') as destfile:
             offset = 0
             while True:
@@ -608,7 +608,7 @@
     destpath = os.path.join(prefix, path)
     fobj = open(destpath, 'r')
     offset = 0
-    sum = hashlib.md5()
+    sum = hashlib.sha256()
     while True:
         data = fobj.read(131072)
         if not data:
@@ -619,8 +619,8 @@
         sum.update(data)
     fobj.close()
     digest = sum.hexdigest()
-    server.verifyChecksum(path, digest, 'md5')
-    logger.info('Uploaded %s (%s bytes, md5: %s)', destpath, offset, digest)
+    server.verifyChecksum(path, digest, 'sha256')
+    logger.info('Uploaded %s (%s bytes, sha256: %s)', destpath, offset, digest)
 
 
 def get_mgmt_server():
@@ -709,10 +709,10 @@
             if contents:
                 size = len(contents)
                 data = base64.b64encode(contents)
-                digest = hashlib.md5(contents).hexdigest()
+                digest = hashlib.sha256(contents).hexdigest()
                 del contents
                 try:
-                    server.uploadDirect(relpath, offset, size, digest, data)
+                    server.uploadDirect(relpath, offset, size, ('sha256', digest), data)
                 except Exception:
                     log_local('error uploading %s' % relpath)
         time.sleep(1)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojivmd /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojivmd
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojivmd	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojivmd	2020-09-07 15:44:50.000000000 +0800
@@ -57,11 +57,6 @@
     ServerRestart
 )
 
-try:
-    import krbV
-except ImportError:  # pragma: no cover
-    krbV = None
-
 
 # Register libvirt handler
 def libvirt_callback(ignore, err):
@@ -135,10 +130,6 @@
                 'host_principal_format': 'compile/%s@EXAMPLE.COM',
                 'keytab': '/etc/kojivmd/kojivmd.keytab',
                 'ccache': '/var/tmp/kojivmd.ccache',
-                'krbservice': 'host',
-                'krb_rdns': True,
-                'krb_canon_host': False,
-                'krb_server_realm': None,
                 'server': None,
                 'user': None,
                 'password': None,
@@ -160,8 +151,7 @@
                     defaults[name] = int(value)
                 except ValueError:
                     quit("value for %s option must be a valid integer" % name)
-            elif name in ['offline_retry', 'krb_rdns', 'krb_canon_host',
-                          'no_ssl_verify']:
+            elif name in ['offline_retry', 'no_ssl_verify']:
                 defaults[name] = config.getboolean('kojivmd', name)
             elif name in ['plugin', 'plugins']:
                 defaults['plugin'] = value.split()
@@ -492,6 +482,10 @@
             curr_mem_node = ctx.xpathEval('/domain/currentMemory')[0]
             if str(mem) != curr_mem_node.getContent():
                 curr_mem_node.setContent(str(mem))
+        if opts.get('static_mac'):
+            mac = opts['static_mac']
+            mac_node = ctx.xpathEval('/domain/devices/interface/mac')[0]
+            mac_node.setProp('address', mac)
         fixed_xml = str(doc)
         ctx.xpathFreeContext()
         doc.freeDoc()
@@ -517,7 +511,9 @@
 
         if opts.get('static_mac'):
             orig_mac = self.macAddr(orig_vm)
-            cmd += ["--mac", orig_mac]
+            #doesn't work anymore, needs to place mac address inside the xml
+            #cmd += ["--mac", orig_mac]
+            opts['static_mac'] = orig_mac
 
         proc = subprocess.Popen(cmd, stdout=subprocess.PIPE,
                                 stderr=subprocess.STDOUT, close_fds=True)
@@ -775,14 +771,14 @@
         fobj.close()
         return len(data)
 
-    def uploadDirect(self, filepath, offset, size, md5sum, data):
+    def uploadDirect(self, filepath, offset, size, checksum, data):
         """
         Upload contents directly to the server.
         """
         remotepath = os.path.dirname(os.path.join(self.getUploadDir(), filepath))
         filename = os.path.basename(filepath)
         self.session.uploadFile(remotepath, filename, size,
-                                md5sum, offset, data)
+                                checksum, offset, data)
 
     def verifyChecksum(self, path, checksum, algo='sha1'):
         local_path = os.path.abspath(os.path.join(self.output_dir, path))
@@ -795,7 +791,7 @@
         if algo == 'sha1':
             sum = hashlib.sha1()
         elif algo == 'md5':
-            sum = hashlib.md5()
+            sum = koji.util.md5_constructor()
         elif algo == 'sha256':
             sum == hashlib.sha256()
         else:
@@ -1150,20 +1146,13 @@
             quit("Error: Unable to log in. Bad credentials?")
         except requests.exceptions.ConnectionError:
             quit("Error: Unable to connect to server %s" % (options.server))
-    elif krbV:
+    else:
         krb_principal = options.krb_principal
         if krb_principal is None:
             krb_principal = options.host_principal_format % socket.getfqdn()
-        try:
-            session.krb_login(principal=krb_principal,
-                              keytab=options.keytab,
-                              ccache=options.ccache)
-        except krbV.Krb5Error as e:
-            quit("Kerberos authentication failed: '%s' (%s)" % (e.args[1], e.args[0]))
-        except socket.error as e:
-            quit("Could not connect to Kerberos authentication service: '%s'" % e.args[1])
-    else:
-        quit("No username/password supplied and Kerberos missing or not configured")
+        session.gssapi_login(principal=krb_principal,
+                             keytab=options.keytab,
+                             ccache=options.ccache)
     # make session exclusive
     try:
         session.exclusiveSession(force=options.force_lock)
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojivmd.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojivmd.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/vm/kojivmd.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/vm/kojivmd.conf	2020-09-07 15:44:50.000000000 +0800
@@ -42,12 +42,6 @@
 ;location of the keytab
 ;keytab = /etc/kojivmd/kojivmd.keytab
 
-;the service name of the principal being used by the hub
-;krbservice = host
-
-;The realm of server principal. Using client's realm if not set
-;krb_server_realm = EXAMPLE.COM
-
 ;configuration for SSL authentication
 
 ;client certificate
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/conf/kojiweb.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/conf/kojiweb.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/conf/kojiweb.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/conf/kojiweb.conf	2020-09-07 15:44:50.000000000 +0800
@@ -28,7 +28,6 @@
 #     AuthName "Koji Web UI"
 #     GssapiCredStore keytab:/etc/koji.keytab
 #     Require valid-user
-#     GssapiLocalName Off
 #     ErrorDocument 401 /koji-static/errors/unauthorized.html
 # </Location>
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/conf/web.conf /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/conf/web.conf
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/conf/web.conf	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/conf/web.conf	2020-09-07 15:44:50.000000000 +0800
@@ -21,7 +21,7 @@
 
 LoginTimeout = 72
 
-# This must be changed and uncommented before deployment
+# This must be CHANGED to random value and uncommented before deployment
 # Secret = CHANGE_ME
 
 LibPath = /usr/share/koji-web/lib
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/archiveinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/archiveinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/archiveinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/archiveinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -1,7 +1,7 @@
 #import koji
 #from kojiweb import util
 #from pprint import pformat
-#from six.moves.urllib.parse import quote
+#from urllib.parse import quote
 
 #attr _PASSTHROUGH = ['archiveID', 'fileOrder', 'fileStart', 'buildrootOrder', 'buildrootStart']
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/buildinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/buildinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/buildinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/buildinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -69,7 +69,7 @@
       <td>$build.volume_name</td>
     </tr>
     <tr>
-      <th>Started</th><td>$util.formatTimeLong($start_time)</td>
+      <th>Started</th><td>$util.formatTimeLong($start_ts)</td>
     </tr>
     #if $build.state == $koji.BUILD_STATES.BUILDING
     #if $estCompletion
@@ -79,7 +79,7 @@
     #end if
     #else
     <tr>
-      <th>Completed</th><td>$util.formatTimeLong($build.completion_time)</td>
+      <th>Completed</th><td>$util.formatTimeLong($build.completion_ts)</td>
     </tr>
     #end if
     #if $build.cg_id
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/buildrootinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/buildrootinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/buildrootinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/buildrootinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -29,7 +29,7 @@
       <th>Retired</th><td>$util.formatTimeLong($buildroot.retire_event_time)</td>
     </tr>
     <tr>
-      <th>Repo ID</th><td>$buildroot.repo_id</td>
+      <th>Repo ID</th><td><a href="repoinfo?repoID=$buildroot.repo_id">$buildroot.repo_id</a></td>
     </tr>
     <tr>
       <th>Repo Tag</th><td><a href="taginfo?tagID=$buildroot.tag_id">$buildroot.tag_name</a></td>
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/builds.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/builds.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/builds.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/builds.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -127,7 +127,7 @@
           <td><a href="taginfo?tagID=$build.tag_id">$build.tag_name</a></td>
           #end if
           <td class="user-$build.owner_name"><a href="userinfo?userID=$build.owner_id">$build.owner_name</a></td>
-          <td>$util.formatTime($build.completion_time)</td>
+          <td>$util.formatTime($build.completion_ts)</td>
           #set $stateName = $util.stateName($build.state)
           <td class="$stateName">$util.stateImage($build.state)</td>
         </tr>
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/fileinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/fileinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/fileinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/fileinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -1,6 +1,6 @@
 #import datetime
 #from kojiweb import util
-#from six.moves.urllib.parse import quote
+#from urllib.parse import quote
 
 #include "includes/header.chtml"
   #if $rpm
@@ -23,7 +23,7 @@
     </tr>
     #if 'mtime' in $file and $file.mtime
     <tr>
-      <th>Modification time</th><td>$util.formatTimeLong($datetime.datetime.fromtimestamp($file.mtime))</td>
+      <th>Modification time</th><td>$util.formatTimeLong($file.mtime)</td>
     </tr>
     #end if
     #if 'user' in $file and $file.user
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/index.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/index.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/index.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/index.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -24,7 +24,7 @@
       #if not $user
       <td class="user-$build.owner_name"><a href="userinfo?userID=$build.owner_id">$build.owner_name</a></td>
       #end if
-      <td>$util.formatTime($build.completion_time)</td>
+      <td>$util.formatTime($build.completion_ts)</td>
       <td class="$stateName">$util.stateImage($build.state)</td>
     </tr>
     #end for
@@ -65,7 +65,7 @@
       </td>
       #end if
       <td>$task.arch</td>
-      <td>$util.formatTime($task.completion_time)</td>
+      <td>$util.formatTime($task.completion_ts)</td>
       <td class="task$state">$util.imageTag($state)</td>
     </tr>
     #end for
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/index.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/index.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/index.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/index.py	2020-09-07 15:44:50.000000000 +0800
@@ -20,10 +20,9 @@
 #       Mike Bonnet <mikeb@redhat.com>
 #       Mike McLean <mikem@redhat.com>
 
-from __future__ import absolute_import, division
-
 import datetime
 import hashlib
+import http.cookies
 import logging
 import mimetypes
 import os
@@ -32,10 +31,6 @@
 import sys
 import time
 
-import six
-import six.moves.http_cookies
-from six.moves import range
-
 import koji
 import kojiweb.util
 from koji.server import ServerRedirect
@@ -60,11 +55,10 @@
     if not options['Secret'].value:
         raise koji.AuthError('Unable to authenticate, server secret not configured')
     digest_string = value + options['Secret'].value
-    if six.PY3:
-        digest_string = digest_string.encode('utf-8')
-    shasum = hashlib.sha1(digest_string)
+    digest_string = digest_string.encode('utf-8')
+    shasum = hashlib.sha256(digest_string)
     value = "%s:%s" % (shasum.hexdigest(), value)
-    cookies = six.moves.http_cookies.SimpleCookie()
+    cookies = http.cookies.SimpleCookie()
     cookies['user'] = value
     c = cookies['user']  # morsel instance
     c['secure'] = True
@@ -78,7 +72,7 @@
 
 
 def _clearUserCookie(environ):
-    cookies = six.moves.http_cookies.SimpleCookie()
+    cookies = http.cookies.SimpleCookie()
     cookies['user'] = ''
     c = cookies['user']  # morsel instance
     c['path'] = os.path.dirname(environ['SCRIPT_NAME'])
@@ -89,7 +83,7 @@
 
 def _getUserCookie(environ):
     options = environ['koji.options']
-    cookies = six.moves.http_cookies.SimpleCookie(environ.get('HTTP_COOKIE', ''))
+    cookies = http.cookies.SimpleCookie(environ.get('HTTP_COOKIE', ''))
     if 'user' not in cookies:
         return None
     value = cookies['user'].value
@@ -101,9 +95,8 @@
     if not options['Secret'].value:
         raise koji.AuthError('Unable to authenticate, server secret not configured')
     digest_string = value + options['Secret'].value
-    if six.PY3:
-        digest_string = digest_string.encode('utf-8')
-    shasum = hashlib.sha1(digest_string)
+    digest_string = digest_string.encode('utf-8')
+    shasum = hashlib.sha256(digest_string)
     if shasum.hexdigest() != sig:
         authlogger.warning('invalid user cookie: %s:%s', sig, value)
         return None
@@ -125,13 +118,13 @@
     return user
 
 
-def _krbLogin(environ, session, principal):
+def _gssapiLogin(environ, session, principal):
     options = environ['koji.options']
     wprinc = options['WebPrincipal']
     keytab = options['WebKeytab']
     ccache = options['WebCCache']
-    return session.krb_login(principal=wprinc, keytab=keytab,
-                             ccache=ccache, proxyuser=principal)
+    return session.gssapi_login(principal=wprinc, keytab=keytab,
+                                ccache=ccache, proxyuser=principal)
 
 
 def _sslLogin(environ, session, username):
@@ -153,7 +146,7 @@
             if not _sslLogin(environ, session, environ['koji.currentLogin']):
                 raise koji.AuthError('could not login %s via SSL' % environ['koji.currentLogin'])
         elif options['WebPrincipal']:
-            if not _krbLogin(environ, environ['koji.session'], environ['koji.currentLogin']):
+            if not _gssapiLogin(environ, environ['koji.session'], environ['koji.currentLogin']):
                 raise koji.AuthError(
                     'could not login using principal: %s' % environ['koji.currentLogin'])
         else:
@@ -181,12 +174,7 @@
 
 def _getServer(environ):
     opts = environ['koji.options']
-    s_opts = {'krbservice': opts['KrbService'],
-              'krb_rdns': opts['KrbRDNS'],
-              'krb_canon_host': opts['KrbCanonHost'],
-              'krb_server_realm': opts['KrbServerRealm']
-              }
-    session = koji.ClientSession(opts['KojiHubURL'], opts=s_opts)
+    session = koji.ClientSession(opts['KojiHubURL'])
 
     environ['koji.currentLogin'] = _getUserCookie(environ)
     if environ['koji.currentLogin']:
@@ -280,7 +268,7 @@
                 'configuration error: mod_auth_gssapi should have performed authentication before '
                 'presenting this page')
 
-        if not _krbLogin(environ, session, principal):
+        if not _gssapiLogin(environ, session, principal):
             raise koji.AuthError('could not login using principal: %s' % principal)
 
         username = principal
@@ -738,7 +726,7 @@
     values['pathinfo'] = pathinfo
 
     paths = []  # (volume, relpath) tuples
-    for relname, volumes in six.iteritems(server.listTaskOutput(task['id'], all_volumes=True)):
+    for relname, volumes in server.listTaskOutput(task['id'], all_volumes=True).items():
         paths += [(volume, relname) for volume in volumes]
     values['output'] = sorted(paths, key=_sortByExtAndName)
     if environ['koji.currentUser']:
@@ -762,8 +750,8 @@
         return ''
     files = server.listTaskOutput(taskID, stat=True, all_volumes=True)
     output = '%i:%s\n' % (task['id'], koji.TASK_STATES[task['state']])
-    for filename, volumes_data in six.iteritems(files):
-        for volume, file_stats in six.iteritems(volumes_data):
+    for filename, volumes_data in files.items():
+        for volume, file_stats in volumes_data.items():
             output += '%s:%s:%s\n' % (volume, filename, file_stats['st_size'])
     return output
 
@@ -1185,7 +1173,10 @@
 
     buildID = int(buildID)
 
-    build = server.getBuild(buildID)
+    try:
+        build = server.getBuild(buildID, strict=True)
+    except koji.GenericError:
+        raise koji.GenericError("Invalid build ID: %i" % buildID)
 
     values['title'] = koji.buildLabel(build) + ' | Build Info'
 
@@ -1288,12 +1279,12 @@
         if field not in values:
             values[field] = None
 
-    values['start_time'] = build.get('start_time') or build['creation_time']
+    values['start_ts'] = build.get('start_ts') or build['creation_ts']
     # the build start time is not accurate for maven and win builds, get it from the
     # task start time instead
     if 'maven' in typeinfo or 'win' in typeinfo:
         if task:
-            values['start_time'] = task['start_time']
+            values['start_ts'] = task['start_ts']
     if build['state'] == koji.BUILD_STATES['BUILDING']:
         avgDuration = server.getAverageBuildDuration(build['package_id'])
         if avgDuration is not None:
@@ -2521,3 +2512,22 @@
 </html>
 """ % values
     return html
+
+
+def repoinfo(environ, repoID):
+    values = _initValues(environ, 'Repo Info', 'tags')
+    server = _getServer(environ)
+
+    values['repo_id'] = repoID
+    repo_info = server.repoInfo(repoID, strict=False)
+    values['repo'] = repo_info
+    if repo_info:
+        topurl = environ['koji.options']['KojiFilesURL']
+        pathinfo = koji.PathInfo(topdir=topurl)
+        if repo_info['dist']:
+            values['url'] = pathinfo.distrepo(repo_info['id'], repo_info['tag_name'])
+        else:
+            values['url'] = pathinfo.repo(repo_info['id'], repo_info['tag_name'])
+        values['repo_json'] = os.path.join(pathinfo.repo(repo_info['id'], repo_info['tag_name']),
+                                           'repo.json')
+    return _genHTML(environ, 'repoinfo.chtml')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/packageinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/packageinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/packageinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/packageinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -48,7 +48,7 @@
           <tr class="$util.rowToggle($self)">
             <td><a href="buildinfo?buildID=$build.build_id">$build.nvr</a></td>
             <td class="user-$build.owner_name"><a href="userinfo?userID=$build.owner_id">$build.owner_name</a></td>
-            <td>$util.formatTime($build.completion_time)</td>
+            <td>$util.formatTime($build.completion_ts)</td>
             #set $stateName = $util.stateName($build.state)
             <td class="$stateName">$util.stateImage($build.state)</td>
           </tr>
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/recentbuilds.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/recentbuilds.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/recentbuilds.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/recentbuilds.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -43,7 +43,7 @@
       <title>$koji.BUILD_STATES[$build.state].lower(): $koji.buildLabel($build)#if $build.task then ', target: ' + $build.task.request[1] else ''#</title>
       <link>$weburl/buildinfo?buildID=$build.build_id</link>
       #if $build.completion_time
-      <pubDate>$util.formatTimeRSS($build.completion_time)</pubDate>
+      <pubDate>$util.formatTimeRSS($build.completion_ts)</pubDate>
       #end if
       #if $build.state == $koji.BUILD_STATES['COMPLETE'] and $build.changelog
       <description>&lt;pre&gt;$util.escapeHTML($koji.util.formatChangelog($build.changelog))&lt;/pre&gt;</description>
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/repoinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/repoinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/repoinfo.chtml	1970-01-01 08:00:00.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/repoinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -0,0 +1,26 @@
+#import koji
+#from kojiweb import util
+
+#include "includes/header.chtml"
+
+<h4>Information for repo $repo_id</h4>
+
+#if $repo
+<table>
+  <tr><th>ID</th><td>$repo.id</td><th></tr>
+  <tr><th>Tag</th><td><a href="taginfo?tagID=$repo.tag_id">$repo.tag_name</a></td></tr>
+  #set $state = $util.repoState($repo.state)
+  <tr><th>State</th><td class="repo$state">$state</td></tr>
+  <tr><th>Event</th><td>$repo.create_event ($util.formatTimeLong($repo.create_ts))</td></tr>
+  #if $repo.state != koji.REPO_STATES['DELETED']
+  <tr><th>URL</th><td><a href="$url">repodata</a></td></tr>
+  <tr><th>Repo json</th><td><a href="$repo_json">repo.json</a></td></tr>
+  #end if
+  <tr><th>Dist repo?</th><td class="$str($repo.dist).lower()">#if $repo.dist then 'yes' else 'no'#</td></tr>
+</table>
+#else
+Repo $repo_id not found.
+#end if
+
+
+#include "includes/footer.chtml"
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/rpminfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/rpminfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/rpminfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/rpminfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -2,7 +2,7 @@
 #from kojiweb import util
 #from pprint import pformat
 #import time
-#from six.moves.urllib.parse import quote
+#from urllib.parse import quote
 
 #attr _PASSTHROUGH = ['rpmID', 'fileOrder', 'fileStart', 'buildrootOrder', 'buildrootStart']
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/search.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/search.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/search.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/search.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -1,5 +1,5 @@
 #from kojiweb import util
-#from six.moves.urllib.parse import quote
+#from urllib.parse import quote
 
 #include "includes/header.chtml"
 
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taginfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taginfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taginfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taginfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -112,7 +112,12 @@
     </tr>
     #end if
     <tr>
-      <th>Repo&nbsp;created</th><td>#if $repo then $util.formatTimeRSS($repo.creation_time) else ''#</td>
+      <th>Repo&nbsp;created</th>
+      <td>
+      #if $repo
+        <a href="repoinfo?repoID=$repo.id">$util.formatTimeRSS($repo.create_ts)</a>
+      #end if
+      </td>
     </tr>
     <tr>
       <th>Packages</th>
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taskinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taskinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taskinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taskinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -1,7 +1,7 @@
 #import koji
 #import koji.util as kojiutil
 #from kojiweb import util
-#from six.moves.urllib.parse import quote
+#from urllib.parse import quote
 #import datetime
 
 #def printChildren($taskID, $childMap)
@@ -77,11 +77,11 @@
     #end for
     #end if
     <tr>
-      <th>Created</th><td>$util.formatTimeLong($task.create_time)</td>
+      <th>Created</th><td>$util.formatTimeLong($task.create_ts)</td>
     </tr>
     #if $task.start_time
     <tr>
-      <th>Started</th><td>$util.formatTimeLong($task.start_time)</td>
+      <th>Started</th><td>$util.formatTimeLong($task.start_ts)</td>
     #end if
     #set $end_ts = None
     #if $task.state == $koji.TASK_STATES.OPEN
@@ -93,7 +93,7 @@
     #end if
     #elif $task.completion_time
     <tr>
-      <th>Completed</th><td>$util.formatTimeLong($task.completion_time)</td>
+      <th>Completed</th><td>$util.formatTimeLong($task.completion_ts)</td>
     </tr>
     #set $end_ts = $task.completion_ts
     #end if
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taskinfo_params.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taskinfo_params.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/taskinfo_params.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/taskinfo_params.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -184,25 +184,25 @@
 #end if
 #elif $task.method == 'distRepo'
 <strong>Tag:</strong> <a href="taginfo?tagID=$tag.id">$tag.name</a><br/>
-<strong>Repo ID:</strong> <a href="$pathinfo.distrepo($params[1],$tag.name)">$params[1]</a></br>
+<strong>Repo ID:</strong> <a href="repoinfo?repoID=$params[1]">$params[1]</a></br>
 <strong>Keys:</strong> $printValue(0, $params[2])<br/>
 $printOpts($params[3])
 #elif $task.method == 'prepRepo'
 <strong>Tag:</strong> <a href="taginfo?tagID=$params[0].id">$params[0].name</a>
 #elif $task.method == 'createrepo'
-<strong>Repo ID:</strong> $params[0]<br/>
+<strong>Repo ID:</strong> <a href="repoinfo?repoID=$params[0]">$params[0]</a><br/>
 <strong>Arch:</strong> $params[1]<br/>
 #set $oldrepo = $params[2]
 #if $oldrepo
-    <strong>Old Repo ID:</strong> $oldrepo.id<br/>
-    <strong>Old Repo Creation:</strong> $koji.formatTimeLong($oldrepo.creation_time)<br/>
+    <strong>Old Repo ID:</strong> <a href="repoinfo?repoID=$oldrepo.id">$oldrepo.id</a><br/>
+    <strong>Old Repo Creation:</strong> $koji.formatTimeLong($oldrepo.create_ts)<br/>
 #end if
 #if $len($params) > 4 and $params[4]
     <strong>External Repos:</strong> $printValue(None, [ext['external_repo_name'] for ext in $params[3]])<br/>
 #end if
 #elif $task.method == 'createdistrepo'
 <strong>Tag:</strong> <a href="taginfo?tagID=$tag.id">$tag.name</a><br/>
-<strong>Repo ID:</strong> <a href="$pathinfo.distrepo($params[1],$tag.name)">$params[1]</a></br>
+<strong>Repo ID:</strong> <a href="repoinfo?repoID=$params[1]">$params[1]</a></br>
 <strong>Arch:</strong> $printValue(0, $params[2])<br/>
 <strong>Keys:</strong> $printValue(0, $params[3])<br/>
 <strong>Options:</strong> $printMap($params[4], '&nbsp;&nbsp;&nbsp;&nbsp;')
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/tasks.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/tasks.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/tasks.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/tasks.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -153,7 +153,7 @@
             #end if
           </td>
           <td>$task.arch</td>
-          <td>$util.formatTime($task.completion_time)</td>
+          <td>$util.formatTime($task.completion_ts)</td>
           <td class="task$state">$util.imageTag($taskState)</td>
         </tr>
       #end for
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/userinfo.chtml /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/userinfo.chtml
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/userinfo.chtml	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/userinfo.chtml	2020-09-07 15:44:50.000000000 +0800
@@ -93,7 +93,7 @@
           <tr class="$util.rowToggle($self)">
             #set $stateName = $util.stateName($build.state)
             <td><a href="buildinfo?buildID=$build.build_id">$build.nvr</a></td>
-            <td>$util.formatTime($build.completion_time)</td>
+            <td>$util.formatTime($build.completion_ts)</td>
             <td class="$stateName">$util.stateImage($build.state)</td>
           </tr>
           #end for
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/wsgi_publisher.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/wsgi_publisher.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/kojiweb/wsgi_publisher.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/kojiweb/wsgi_publisher.py	2020-09-07 15:44:50.000000000 +0800
@@ -19,8 +19,6 @@
 # Authors:
 #       Mike McLean <mikem@redhat.com>
 
-from __future__ import absolute_import
-
 import cgi
 import inspect
 import logging
@@ -29,8 +27,6 @@
 import sys
 import traceback
 
-import six
-
 import koji
 import koji.util
 from koji.server import ServerError, ServerRedirect
@@ -292,6 +288,7 @@
         if err:
             result.append("<p>%s</p>\n" % err)
         result.append("</body></html>\n")
+        result = [x.encode('utf-8') for x in result]
         length = sum([len(x) for x in result])
         headers = [
             ('Allow', 'GET, POST, HEAD'),
@@ -352,11 +349,8 @@
         return self._tobytes(result), headers
 
     def _tobytes(self, result):
-        if isinstance(result, six.string_types):
-            if six.PY2:
-                result = [result]
-            else:
-                result = [bytes(result, encoding='utf-8')]
+        if isinstance(result, str):
+            result = [bytes(result, encoding='utf-8')]
         return result
 
     def handle_request(self, environ, start_response):
@@ -405,7 +399,7 @@
             else:
                 # last one wins
                 headers[key] = (name, value)
-        if isinstance(result, six.string_types):
+        if isinstance(result, str):
             headers.setdefault('content-length', ('Content-Length', str(len(result))))
         headers.setdefault('content-type', ('Content-Type', 'text/html'))
         headers = to_list(headers.values()) + extra
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/lib/kojiweb/util.py /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/lib/kojiweb/util.py
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/lib/kojiweb/util.py	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/lib/kojiweb/util.py	2020-09-07 15:44:50.000000000 +0800
@@ -19,21 +19,17 @@
 # Authors:
 #       Mike Bonnet <mikeb@redhat.com>
 #       Mike McLean <mikem@redhat.com>
-from __future__ import absolute_import, division
-
 import datetime
 import hashlib
 import os
 import ssl
 import stat
+import xmlrpc.client
 # a bunch of exception classes that explainError needs
 from socket import error as socket_error
 from xml.parsers.expat import ExpatError
 
 import Cheetah.Template
-import six
-from six.moves import range
-from six.moves.xmlrpc_client import ProtocolError
 
 import koji
 import koji.tasks
@@ -105,7 +101,7 @@
     def filter(self, *args, **kw):
         """Convert all strs to unicode objects"""
         result = super(DecodeUTF8, self).filter(*args, **kw)
-        if isinstance(result, six.text_type):
+        if isinstance(result, str):
             pass
         else:
             result = result.decode('utf-8', 'replace')
@@ -159,10 +155,7 @@
         tmpl_class = Cheetah.Template.Template.compile(file=fileName)
         TEMPLATES[fileName] = tmpl_class
     tmpl_inst = tmpl_class(namespaces=[environ['koji.values']], filter=XHTMLFilter)
-    if six.PY2:
-        return tmpl_inst.respond().encode('utf-8', 'replace')
-    else:
-        return tmpl_inst.respond()
+    return tmpl_inst.respond()
 
 
 def _truncTime():
@@ -179,9 +172,8 @@
     if tstamp is None:
         tstamp = _truncTime()
     value = user + str(tstamp) + environ['koji.options']['Secret'].value
-    if six.PY3:
-        value = value.encode('utf-8')
-    return hashlib.md5(value).hexdigest()[-8:]
+    value = value.encode('utf-8')
+    return hashlib.sha256(value).hexdigest()
 
 
 def _getValidTokens(environ):
@@ -447,6 +439,11 @@
         return 'unknown'
 
 
+def repoState(stateID):
+    """Convert a numeric repo state into a readable name"""
+    return koji.REPO_STATES[stateID].lower()
+
+
 def taskState(stateID):
     """Convert a numeric task state into a readable name"""
     return koji.TASK_STATES[stateID].lower()
@@ -662,7 +659,7 @@
 The web interface is having difficulty communicating with the main \
 server. This most likely indicates a network issue."""
         level = 1
-    elif isinstance(error, (ProtocolError, ExpatError)):
+    elif isinstance(error, (xmlrpc.client.ProtocolError, ExpatError)):
         str = """\
 The main server returned an invalid response. This could be caused by \
 a network issue or load issues on the server."""
diff -Nuar /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/static/koji.css /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/static/koji.css
--- /home/koji21/rpmbuild/BUILD/koji-1.21.1/www/static/koji.css	2020-06-09 17:18:51.000000000 +0800
+++ /home/koji22/rpmbuild/BUILD/koji-1.22.1/www/static/koji.css	2020-09-07 15:44:50.000000000 +0800
@@ -387,7 +387,7 @@
     background-color: #eee;
 }
 
-.taskfree {
+.taskfree, .repoinit {
     color: #30c;
 }
 
@@ -395,11 +395,11 @@
     color: #f60;
 }
 
-.taskclosed {
+.taskclosed, .repoready {
     color: #0c0;
 }
 
-.taskcanceled {
+.taskcanceled, .repoexpired {
     color: #c90;
 }
 
@@ -407,7 +407,7 @@
     color: #c0f;
 }
 
-.taskfailed {
+.taskfailed, .repodeleted, .repoproblem {
     color: #c00;
 }
 
